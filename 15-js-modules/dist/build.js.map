{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./app.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/buffer/index.js","webpack:///./node_modules/core-util-is/lib/util.js","webpack:///./node_modules/events/events.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/inherits/inherits_browser.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/process-nextick-args/index.js","webpack:///./node_modules/process/browser.js","webpack:///./node_modules/ramda/dist/ramda.js","webpack:///./node_modules/readable-stream/duplex-browser.js","webpack:///./node_modules/readable-stream/lib/_stream_duplex.js","webpack:///./node_modules/readable-stream/lib/_stream_passthrough.js","webpack:///./node_modules/readable-stream/lib/_stream_readable.js","webpack:///./node_modules/readable-stream/lib/_stream_transform.js","webpack:///./node_modules/readable-stream/lib/_stream_writable.js","webpack:///./node_modules/readable-stream/lib/internal/streams/BufferList.js","webpack:///./node_modules/readable-stream/lib/internal/streams/destroy.js","webpack:///./node_modules/readable-stream/lib/internal/streams/stream-browser.js","webpack:///./node_modules/readable-stream/passthrough.js","webpack:///./node_modules/readable-stream/readable-browser.js","webpack:///./node_modules/readable-stream/transform.js","webpack:///./node_modules/readable-stream/writable-browser.js","webpack:///./node_modules/safe-buffer/index.js","webpack:///./node_modules/setimmediate/setImmediate.js","webpack:///./node_modules/stream-browserify/index.js","webpack:///./node_modules/string_decoder/lib/string_decoder.js","webpack:///./node_modules/timers-browserify/main.js","webpack:///./node_modules/util-deprecate/browser.js","webpack:///(webpack)/buildin/global.js","webpack:///./utils.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","arr1","arr3","ramda__WEBPACK_IMPORTED_MODULE_0__","arr4","console","log","_utils__WEBPACK_IMPORTED_MODULE_1__","byteLength","b64","lens","getLens","validLen","placeHoldersLen","toByteArray","tmp","arr","Arr","_byteLength","curByte","len","revLookup","charCodeAt","fromByteArray","uint8","length","extraBytes","parts","len2","push","encodeChunk","lookup","join","Uint8Array","Array","code","Error","indexOf","start","end","num","output","global","base64","ieee754","isArray","kMaxLength","Buffer","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","__proto__","arg","encodingOrOffset","this","allocUnsafe","from","TypeError","ArrayBuffer","array","byteOffset","undefined","fromArrayLike","fromArrayBuffer","string","encoding","isEncoding","actual","write","slice","fromString","obj","isBuffer","checked","copy","buffer","val","type","data","fromObject","assertSize","size","toString","isView","loweredCase","utf8ToBytes","base64ToBytes","toLowerCase","swap","b","bidirectionalIndexOf","dir","isNaN","arrayIndexOf","lastIndexOf","indexSize","arrLength","valLength","String","read","buf","readUInt16BE","foundIndex","found","j","hexWrite","offset","Number","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","str","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","fromCharCode","apply","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","e","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","a","x","y","concat","list","pos","swap16","swap32","swap64","arguments","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","isFinite","toJSON","_arr","ret","out","toHex","bytes","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","INVALID_BASE64_RE","Infinity","leadSurrogate","trim","replace","stringtrim","base64clean","src","dst","objectToString","isBoolean","isNull","isNullOrUndefined","isNumber","isString","isSymbol","isUndefined","isRegExp","re","isObject","isDate","isError","isFunction","isPrimitive","EventEmitter","_events","_maxListeners","defaultMaxListeners","setMaxListeners","emit","er","handler","args","listeners","error","err","context","addListener","listener","newListener","warned","trace","on","once","fired","g","removeListener","position","splice","removeAllListeners","listenerCount","evlistener","emitter","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","ctor","superCtor","super_","constructor","writable","TempCtor","process","version","nextTick","fn","arg1","arg2","arg3","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","defaultClearTimeout","runTimeout","fun","setTimeout","clearTimeout","currentQueue","queue","draining","queueIndex","cleanUpNextTick","drainQueue","timeout","run","marker","runClearTimeout","Item","noop","title","browser","env","argv","versions","off","prependListener","prependOnceListener","binding","cwd","chdir","umask","pad","Identity","ws","Const","_stepCatArray","_stepCatString","_stepCatObject","_arity","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","_arrayFromIterator","iter","next","done","_arrayOf","_cloneRegExp","pattern","RegExp","source","ignoreCase","multiline","sticky","unicode","_complement","f","_concat","set1","set2","idx","len1","result","_containsWith","pred","_filter","_has","prop","_identity","_isArguments","_isArray","_isFunction","_isInteger","isInteger","_isNumber","_isObject","_isPlaceholder","_isString","_isTransformer","_map","functor","_pipe","_pipeP","ctx","then","_quote","_reduced","@@transducer/value","@@transducer/reduced","_slice","to","_toISOString","Date","toISOString","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","toFixed","_xfBase","init","xf","_xwrap","XWrap","acc","_assign","assign","nextKey","_checkForMethod","methodname","_curry1","f1","_curry2","f2","_b","_a","_curry3","f3","_c","_curryN","received","combined","argsIdx","left","combinedIdx","_dispatchable","transducer","_xall","XAll","all","input","_xany","XAny","any","_xaperture","XAperture","full","store","getCopy","_xdrop","XDrop","_xdropLast","XDropLast","_xdropRepeatsWith","XDropRepeatsWith","lastValue","seenFirstValue","sameAsLast","_xdropWhile","XDropWhile","_xfilter","XFilter","_xfind","XFind","_xfindIndex","XFindIndex","_xfindLast","XFindLast","last","_xfindLastIndex","XFindLastIndex","lastIdx","_xmap","XMap","_xreduceBy","XReduceBy","valueFn","valueAcc","keyFn","inputs","_xtake","XTake","_xtakeWhile","XTakeWhile","add","adjust","_idx","_list","always","and","aperture","append","el","assoc","assocPath","path","thisObj","clamp","comparator","curryN","dec","defaultTo","v","differenceWith","first","second","firstLen","dissoc","dissocPath","head","tail","divide","dropWhile","empty","evolve","transformations","transformation","find","findIndex","findLast","findLastIndex","forEach","fromPairs","pairs","groupWith","nextidx","gt","gte","has","hasIn","identical","identity","ifElse","condition","onTrue","onFalse","inc","insert","elt","insertAll","elts","intersperse","separator","is","Ctor","isArrayLike","nodeType","isNil","keys","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","hasArgsEnumBug","contains","item","nIdx","ks","checkArgsLength","keysIn","lt","lte","mapAccum","tuple","mapAccumRight","rx","mathMod","maxBy","merge","mergeAll","mergeWithKey","k","minBy","modulo","multiply","nAry","negate","none","not","nth","charAt","nthArg","objOf","of","called","or","over","map","pair","fst","snd","paths","pathOr","pathSatisfies","propPath","pick","names","pickAll","pickBy","test","prepend","propIs","propOr","propSatisfies","props","ps","range","reduceRight","reduced","remove","count","regex","replacement","reverse","split","scan","fromIndex","toIndex","sort","sortBy","aa","bb","splitAt","index","splitEvery","splitWhen","prefix","subtract","take","xs","takeLastWhile","takeWhile","tap","times","toPairs","toPairsIn","transpose","outerlist","innerlist","beginRx","endRx","tryCatch","tryer","catcher","unapply","unary","uncurryN","depth","endIdx","currentDepth","unfold","seed","uniqWith","unless","whenFalseFn","until","update","useWith","transformers","values","vals","valuesIn","vs","view","when","whenTrueFn","where","spec","testObj","wrap","wrapper","xprod","ilen","jlen","zip","rv","zipObj","zipWith","F","T","_clone","refFrom","refTo","deep","copiedValue","valueOf","_createPartialApplicator","_equals","stackA","stackB","message","entries","keysA","pop","_makeFlat","recursive","flatt","_reduce","_iterableReduce","step","symIterator","iterator","_arrayReduce","reduce","_methodReduce","_stepCat","@@transducer/init","@@transducer/step","@@transducer/result","_xdropLastWhile","XDropLastWhile","retained","retain","flush","addIndex","origFn","binary","clone","curry","drop","dropLast","dropLastWhile","filter","filterable","flatten","flip","intersectionWith","list1","list2","lookupList","filteredList","results","into","invert","invertObj","isEmpty","mapObjIndexed","mergeWith","_","_l","_r","partial","partialRight","pathEq","_path","pluck","project","propEq","reduceBy","reduceWhile","reject","repeat","sum","takeLast","transduce","unionWith","whereEq","_flatCat","rxf","preservingReduced","_indexOf","inf","_xchain","allPass","preds","anyPass","ap","applicative","applySpec","chain","monad","cond","arity","constructN","Fn","$0","$1","$2","$3","$4","$5","$6","$7","$8","$9","converge","after","fns","countBy","elem","dropRepeatsWith","eqBy","eqProps","obj1","obj2","groupBy","indexBy","juxt","setter","toFunctorFn","focus","lensIndex","lensPath","lensProp","liftN","lifted","mean","median","width","partition","pipe","pipeP","product","sequence","traversable","traverse","unnest","_contains","compose","composeK","construct","difference","dropRepeats","lift","omit","_toString","seen","recur","mapPairs","repr","without","_Set","_nativeSet","Set","_items","hasOrAdd","shouldAdd","prevSize","bIdx","both","complement","either","invoker","method","memoize","cache","symmetricDifference","symmetricDifferenceWith","toLower","toUpper","uniqBy","appliedItem","uniq","intersection","union","R","__","@@functional/placeholder","composeP","pipeK","pna","objectKeys","Duplex","util","inherits","Readable","Writable","options","readable","allowHalfOpen","onend","_writableState","ended","onEndNT","self","highWaterMark","_readableState","destroyed","_destroy","cb","PassThrough","Transform","_transform","chunk","ReadableState","EElistenerCount","Stream","OurUint8Array","debugUtil","debug","debuglog","StringDecoder","BufferList","destroyImpl","kProxyEvents","stream","isDuplex","objectMode","readableObjectMode","hwm","readableHwm","readableHighWaterMark","defaultHwm","pipes","pipesCount","flowing","endEmitted","reading","sync","needReadable","emittedReadable","readableListening","resumeScheduled","defaultEncoding","awaitDrain","readingMore","decoder","_read","destroy","readableAddChunk","addToFront","skipChunkCheck","state","emitReadable","onEofChunk","chunkInvalid","getPrototypeOf","_uint8ArrayToBuffer","addChunk","maybeReadMore","needMoreData","unshift","_undestroy","undestroy","isPaused","setEncoding","enc","MAX_HWM","howMuchToRead","computeNewHighWaterMark","emitReadable_","flow","maybeReadMore_","nReadingNextTick","resume_","fromList","shift","clear","hasStrings","nb","copyFromBufferString","copyFromBuffer","fromListPartial","endReadable","endReadableNT","nOrig","doRead","dest","pipeOpts","endFn","stdout","stderr","unpipe","onunpipe","unpipeInfo","hasUnpiped","onclose","onfinish","ondrain","onerror","ondata","cleanedUp","needDrain","pipeOnDrain","increasedAwaitDrain","pause","event","resume","dests","ev","_this","paused","_fromList","_transformState","afterTransform","ts","transforming","writecb","writechunk","rs","needTransform","writeencoding","transform","_flush","prefinish","_write","_this2","err2","setImmediate","CorkedRequest","entry","finish","corkReq","callback","pendingcb","corkedRequestsFree","onCorkedFinish","asyncWrite","WritableState","internalUtil","deprecate","realHasInstance","nop","writableObjectMode","writableHwm","writableHighWaterMark","finalCalled","ending","finished","noDecode","decodeStrings","writing","corked","bufferProcessing","onwrite","writelen","onwriteStateUpdate","finishMaybe","errorEmitted","onwriteError","needFinish","bufferedRequest","clearBuffer","afterWrite","lastBufferedRequest","prefinished","bufferedRequestCount","writev","_writev","final","_final","doWrite","onwriteDrain","holder","allBuffers","isBuf","callFinal","need","getBuffer","current","hasInstance","Function","writeAfterEnd","valid","validChunk","newChunk","decodeChunk","writeOrBuffer","cork","uncork","setDefaultEncoding","endWritable","instance","Constructor","_classCallCheck","custom","emitErrorNT","readableDestroyed","writableDestroyed","copyProps","SafeBuffer","registerImmediate","html","channel","messagePrefix","onGlobalMessage","nextHandle","tasksByHandle","currentlyRunningATask","doc","document","attachTo","handle","runIfPresent","postMessage","importScripts","postMessageIsAsynchronous","oldOnMessage","onmessage","canUsePostMessage","MessageChannel","port1","port2","createElement","documentElement","script","onreadystatechange","removeChild","appendChild","random","addEventListener","attachEvent","task","clearImmediate","EE","_isStdio","didOnEnd","cleanup","nenc","retried","_normalizeEncoding","normalizeEncoding","text","utf16Text","utf16End","fillLast","utf8FillLast","base64Text","base64End","simpleWrite","simpleEnd","lastNeed","lastTotal","lastChar","utf8CheckByte","byte","utf8CheckExtraBytes","total","utf8CheckIncomplete","scope","window","Timeout","id","clearFn","_id","_clearFn","setInterval","clearInterval","close","unref","ref","enroll","msecs","_idleTimeoutId","_idleTimeout","unenroll","_unrefActive","active","_onTimeout","config","localStorage","msg","warn","eval","mult","div","__webpack_exports__","PI"],"mappings":"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AA,SAAAgT,EAAAC,GACA,IAAAC,EAAAC,EAQA,OAPAH,EAAAntB,OAAAotB,EAAAptB,QACAqtB,EAAAF,EACAG,EAAAF,IAEAC,EAAAD,EACAE,EAAAH,GAEA6H,GAAA/d,EAAAgW,GAAA4F,GAAA5F,CAAAI,GAAAC,MAoBA4H,GAAA/a,EAAA2Y,GAAAkC,GAAAve,IAEA0e,IACAjL,KACAC,KACAiL,IAr2QcC,4BAAA,GAs2QdpX,OACAqO,YACApO,UACA9C,OACAmU,WACAlR,UACAC,OACA9C,OACAiU,WACAC,MACAnR,YACAC,UACAnX,SACAuoB,aACAlR,SACAC,aACA6N,UACAxuB,QACAm2B,QACAx3B,QACAkzB,SACA/Q,SACA2N,SACA1N,cACAqV,cACAtB,WACAC,YACAuC,SA16BA,WACA,OAAAvsB,UAAA/I,OACA,UAAAW,MAAA,2CAEA,OAAA4xB,GAAAlrB,MAAAvF,KAAAmkB,GAAAld,aAu6BAN,UACAsnB,QACAiD,aACA/C,cACA3N,YACAuO,YACAG,WACAtE,SACA1N,UACAC,OACAC,aACA+T,cACA7T,kBACAI,UACAC,cACAG,UACA+M,QACAC,YACAC,iBACAqG,eACAhC,mBACArR,aACAwU,UACAvU,SACAqR,QACAC,WACAhoB,UACA2W,UACA+M,UACA5M,QACAC,aACAC,YACAC,iBACA2M,WACAC,QACA3M,WACAC,aACAgR,WACA9Q,aACAE,MACAC,OACAC,OACAC,SACApB,QACAqB,aACAC,YACAC,UACAI,OACAmQ,WACA5wB,WACA2Y,QACA+H,UACAE,aACAyT,gBACA/H,oBACAxL,eACA8L,QACAC,UACAC,aACA4G,WACA1S,MACAE,eACA6L,WACA3L,SACAzhB,QACAkxB,QACAxP,QACAU,UACA1F,QACA3Y,eACAtE,UACAf,QACA4yB,aACAC,YACAC,YACAoB,QACAnB,SACApP,MACAC,OACA0B,OACAzB,YACAE,iBACA4K,iBACArkB,SACA2Z,WACA5Z,OACA6Z,SACA+O,QACAC,UACAqC,WACApR,SACAC,YACAwK,aACAvK,gBACA7c,OACA+c,SACAC,UACAC,YACAC,QACAC,UACAC,QACAC,OACAC,OACAE,UACAC,SACAC,MACAiP,QACA9iB,QACA+T,MACAC,QACAE,QACAyJ,WACAC,gBACAmE,aACAzT,QACAuP,UACAvJ,UACAC,iBACAE,QACAE,WACAC,UACAoN,QACAiD,MAl2BA,WACA,OAAAxC,GAAA1rB,MAAAvF,KAAAmkB,GAAAld,aAk2BAwpB,SACAlE,SACAjJ,WACAoN,WACAlE,WACAnX,QACAoX,UACAlJ,UACAC,UACAC,iBACAC,SACAE,SACAiG,UACA6C,YACA7I,eACA8I,eACA7I,WACA8I,UACA7I,UACA8I,UACA5gB,WACAkY,WACAE,QACAsM,YACA/kB,OACA7K,SACAyjB,QACAC,UACAL,SACAQ,WACAE,cACAC,aACAE,YACA6H,OACA8F,uBACAC,2BACAhV,QACAqH,QACA6H,YACA3H,iBACAC,aACAC,OACAjC,QACAkC,SACAuN,WACAtN,WACAC,aACA7jB,YACAmxB,WACA/F,aACAtH,aACAmL,YACA7kB,QACA+Z,YACAxkB,QACA2kB,WACAC,SACAC,YACAI,UACA4M,SACAnG,aACAiG,QACAF,UACAtM,YACAC,UACAmK,UACAjK,SACAC,UACAC,WACAE,UACAE,YACAE,QACAC,QACAE,SACA0F,WACA0E,WACAjK,QACAE,SACAG,OACAE,UACAC,YAOA1tB,EAAAD,QAAA64B,KAOCx4B,KAAAmF,0EC9nRDvF,EAAAD,QAAAF,EAAA,6IC8BA,IAAAo5B,EAAAp5B,EAAA,gDAIAq5B,EAAAv4B,OAAA+kB,MAAA,SAAAlf,GACA,IAAAkf,KACA,QAAAlkB,KAAAgF,EACAkf,EAAA7hB,KAAArC,GACG,OAAAkkB,GAIH1lB,EAAAD,QAAAo5B,EAGA,IAAAC,EAAAv5B,EAAA,2CACAu5B,EAAAC,SAAAx5B,EAAA,+CAGA,IAAAy5B,EAAAz5B,EAAA,0DACA05B,EAAA15B,EAAA,0DAEAu5B,EAAAC,SAAAF,EAAAG,GAKA,IADA,IAAA5T,EAAAwT,EAAAK,EAAA13B,WACA+gB,EAAA,EAAiBA,EAAA8C,EAAAjiB,OAAiBmf,IAAA,CAClC,IAAA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","file":"build.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./app.js\");\n","/* \n  import método from 'biblioteca;\n  * carrega tudo da lib\n  as => alias para o método (novo nome)\n*/\n\nimport { union as juntaTudo, uniq as soOsmesmos } from 'ramda';\n\nimport soma, { sub, multiplicacao, div as dividir, PI } from './utils';\nimport { pipeline } from 'stream';\n\nconst arr1 = [1, 1, 1, 2, 2, 3, 4, 5, 6, 6];\nconst arr2 = [5, 6, 6, 6, 7, 7, 8, 9, 10, 1];\n\nconst arr3 = juntaTudo(arr1, arr2);\nconst arr4= soOsmesmos(arr1);\n\nconsole.log(arr3);\nconsole.log(arr4);\n\nconsole.log(soma(3, 2));\nconsole.log(sub(3, 2));\nconsole.log(multiplicacao(3, 2));\nconsole.log(dividir(4, 2));\nconsole.log(PI);","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// NOTE: These type checking functions intentionally don't use `instanceof`\n// because it is fragile and can be easily faked with `Object.create()`.\n\nfunction isArray(arg) {\n  if (Array.isArray) {\n    return Array.isArray(arg);\n  }\n  return objectToString(arg) === '[object Array]';\n}\nexports.isArray = isArray;\n\nfunction isBoolean(arg) {\n  return typeof arg === 'boolean';\n}\nexports.isBoolean = isBoolean;\n\nfunction isNull(arg) {\n  return arg === null;\n}\nexports.isNull = isNull;\n\nfunction isNullOrUndefined(arg) {\n  return arg == null;\n}\nexports.isNullOrUndefined = isNullOrUndefined;\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\nexports.isNumber = isNumber;\n\nfunction isString(arg) {\n  return typeof arg === 'string';\n}\nexports.isString = isString;\n\nfunction isSymbol(arg) {\n  return typeof arg === 'symbol';\n}\nexports.isSymbol = isSymbol;\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\nexports.isUndefined = isUndefined;\n\nfunction isRegExp(re) {\n  return objectToString(re) === '[object RegExp]';\n}\nexports.isRegExp = isRegExp;\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\nexports.isObject = isObject;\n\nfunction isDate(d) {\n  return objectToString(d) === '[object Date]';\n}\nexports.isDate = isDate;\n\nfunction isError(e) {\n  return (objectToString(e) === '[object Error]' || e instanceof Error);\n}\nexports.isError = isError;\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\nexports.isFunction = isFunction;\n\nfunction isPrimitive(arg) {\n  return arg === null ||\n         typeof arg === 'boolean' ||\n         typeof arg === 'number' ||\n         typeof arg === 'string' ||\n         typeof arg === 'symbol' ||  // ES6 symbol\n         typeof arg === 'undefined';\n}\nexports.isPrimitive = isPrimitive;\n\nexports.isBuffer = Buffer.isBuffer;\n\nfunction objectToString(o) {\n  return Object.prototype.toString.call(o);\n}\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","'use strict';\n\nif (!process.version ||\n    process.version.indexOf('v0.') === 0 ||\n    process.version.indexOf('v1.') === 0 && process.version.indexOf('v1.8.') !== 0) {\n  module.exports = { nextTick: nextTick };\n} else {\n  module.exports = process\n}\n\nfunction nextTick(fn, arg1, arg2, arg3) {\n  if (typeof fn !== 'function') {\n    throw new TypeError('\"callback\" argument must be a function');\n  }\n  var len = arguments.length;\n  var args, i;\n  switch (len) {\n  case 0:\n  case 1:\n    return process.nextTick(fn);\n  case 2:\n    return process.nextTick(function afterTickOne() {\n      fn.call(null, arg1);\n    });\n  case 3:\n    return process.nextTick(function afterTickTwo() {\n      fn.call(null, arg1, arg2);\n    });\n  case 4:\n    return process.nextTick(function afterTickThree() {\n      fn.call(null, arg1, arg2, arg3);\n    });\n  default:\n    args = new Array(len - 1);\n    i = 0;\n    while (i < args.length) {\n      args[i++] = arguments[i];\n    }\n    return process.nextTick(function afterTick() {\n      fn.apply(null, args);\n    });\n  }\n}\n\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","//  Ramda v0.22.1\n//  https://github.com/ramda/ramda\n//  (c) 2013-2016 Scott Sauyet, Michael Hurley, and David Chambers\n//  Ramda may be freely distributed under the MIT license.\n\n;(function() {\n\n  'use strict';\n\n  /**\n     * A special placeholder value used to specify \"gaps\" within curried functions,\n     * allowing partial application of any combination of arguments, regardless of\n     * their positions.\n     *\n     * If `g` is a curried ternary function and `_` is `R.__`, the following are\n     * equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2, _)(1, 3)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @constant\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @example\n     *\n     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n     *      greet('Alice'); //=> 'Hello, Alice!'\n     */\n    var __ = { '@@functional/placeholder': true };\n\n    /* eslint-disable no-unused-vars */\n    var _arity = function _arity(n, fn) {\n        /* eslint-disable no-unused-vars */\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.apply(this, arguments);\n            };\n        case 1:\n            return function (a0) {\n                return fn.apply(this, arguments);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.apply(this, arguments);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.apply(this, arguments);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.apply(this, arguments);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.apply(this, arguments);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.apply(this, arguments);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.apply(this, arguments);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.apply(this, arguments);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.apply(this, arguments);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.apply(this, arguments);\n            };\n        default:\n            throw new Error('First argument to _arity must be a non-negative integer no greater than ten');\n        }\n    };\n\n    var _arrayFromIterator = function _arrayFromIterator(iter) {\n        var list = [];\n        var next;\n        while (!(next = iter.next()).done) {\n            list.push(next.value);\n        }\n        return list;\n    };\n\n    var _arrayOf = function _arrayOf() {\n        return Array.prototype.slice.call(arguments);\n    };\n\n    var _cloneRegExp = function _cloneRegExp(pattern) {\n        return new RegExp(pattern.source, (pattern.global ? 'g' : '') + (pattern.ignoreCase ? 'i' : '') + (pattern.multiline ? 'm' : '') + (pattern.sticky ? 'y' : '') + (pattern.unicode ? 'u' : ''));\n    };\n\n    var _complement = function _complement(f) {\n        return function () {\n            return !f.apply(this, arguments);\n        };\n    };\n\n    /**\n     * Private `concat` function to merge two array-like objects.\n     *\n     * @private\n     * @param {Array|Arguments} [set1=[]] An array-like object.\n     * @param {Array|Arguments} [set2=[]] An array-like object.\n     * @return {Array} A new, merged array.\n     * @example\n     *\n     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     */\n    var _concat = function _concat(set1, set2) {\n        set1 = set1 || [];\n        set2 = set2 || [];\n        var idx;\n        var len1 = set1.length;\n        var len2 = set2.length;\n        var result = [];\n        idx = 0;\n        while (idx < len1) {\n            result[result.length] = set1[idx];\n            idx += 1;\n        }\n        idx = 0;\n        while (idx < len2) {\n            result[result.length] = set2[idx];\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _containsWith = function _containsWith(pred, x, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (pred(x, list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    };\n\n    var _filter = function _filter(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        while (idx < len) {\n            if (fn(list[idx])) {\n                result[result.length] = list[idx];\n            }\n            idx += 1;\n        }\n        return result;\n    };\n\n    var _forceReduced = function _forceReduced(x) {\n        return {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n    var _functionName = function _functionName(f) {\n        // String(x => x) evaluates to \"x => x\", so the pattern may not match.\n        var match = String(f).match(/^function (\\w*)/);\n        return match == null ? '' : match[1];\n    };\n\n    var _has = function _has(prop, obj) {\n        return Object.prototype.hasOwnProperty.call(obj, prop);\n    };\n\n    var _identity = function _identity(x) {\n        return x;\n    };\n\n    var _isArguments = function () {\n        var toString = Object.prototype.toString;\n        return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {\n            return toString.call(x) === '[object Arguments]';\n        } : function _isArguments(x) {\n            return _has('callee', x);\n        };\n    }();\n\n    /**\n     * Tests whether or not an object is an array.\n     *\n     * @private\n     * @param {*} val The object to test.\n     * @return {Boolean} `true` if `val` is an array, `false` otherwise.\n     * @example\n     *\n     *      _isArray([]); //=> true\n     *      _isArray(null); //=> false\n     *      _isArray({}); //=> false\n     */\n    var _isArray = Array.isArray || function _isArray(val) {\n        return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';\n    };\n\n    var _isFunction = function _isFunction(x) {\n        return Object.prototype.toString.call(x) === '[object Function]';\n    };\n\n    /**\n     * Determine if the passed argument is an integer.\n     *\n     * @private\n     * @param {*} n\n     * @category Type\n     * @return {Boolean}\n     */\n    var _isInteger = Number.isInteger || function _isInteger(n) {\n        return n << 0 === n;\n    };\n\n    var _isNumber = function _isNumber(x) {\n        return Object.prototype.toString.call(x) === '[object Number]';\n    };\n\n    var _isObject = function _isObject(x) {\n        return Object.prototype.toString.call(x) === '[object Object]';\n    };\n\n    var _isPlaceholder = function _isPlaceholder(a) {\n        return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;\n    };\n\n    var _isRegExp = function _isRegExp(x) {\n        return Object.prototype.toString.call(x) === '[object RegExp]';\n    };\n\n    var _isString = function _isString(x) {\n        return Object.prototype.toString.call(x) === '[object String]';\n    };\n\n    var _isTransformer = function _isTransformer(obj) {\n        return typeof obj['@@transducer/step'] === 'function';\n    };\n\n    var _map = function _map(fn, functor) {\n        var idx = 0;\n        var len = functor.length;\n        var result = Array(len);\n        while (idx < len) {\n            result[idx] = fn(functor[idx]);\n            idx += 1;\n        }\n        return result;\n    };\n\n    // Based on https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign\n    var _objectAssign = function _objectAssign(target) {\n        if (target == null) {\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n        var output = Object(target);\n        var idx = 1;\n        var length = arguments.length;\n        while (idx < length) {\n            var source = arguments[idx];\n            if (source != null) {\n                for (var nextKey in source) {\n                    if (_has(nextKey, source)) {\n                        output[nextKey] = source[nextKey];\n                    }\n                }\n            }\n            idx += 1;\n        }\n        return output;\n    };\n\n    var _of = function _of(x) {\n        return [x];\n    };\n\n    var _pipe = function _pipe(f, g) {\n        return function () {\n            return g.call(this, f.apply(this, arguments));\n        };\n    };\n\n    var _pipeP = function _pipeP(f, g) {\n        return function () {\n            var ctx = this;\n            return f.apply(ctx, arguments).then(function (x) {\n                return g.call(ctx, x);\n            });\n        };\n    };\n\n    // \\b matches word boundary; [\\b] matches backspace\n    var _quote = function _quote(s) {\n        var escaped = s.replace(/\\\\/g, '\\\\\\\\').replace(/[\\b]/g, '\\\\b')    // \\b matches word boundary; [\\b] matches backspace\n    .replace(/\\f/g, '\\\\f').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/\\t/g, '\\\\t').replace(/\\v/g, '\\\\v').replace(/\\0/g, '\\\\0');\n        return '\"' + escaped.replace(/\"/g, '\\\\\"') + '\"';\n    };\n\n    var _reduced = function _reduced(x) {\n        return x && x['@@transducer/reduced'] ? x : {\n            '@@transducer/value': x,\n            '@@transducer/reduced': true\n        };\n    };\n\n    /**\n     * An optimized, private array `slice` implementation.\n     *\n     * @private\n     * @param {Arguments|Array} args The array or arguments object to consider.\n     * @param {Number} [from=0] The array index to slice from, inclusive.\n     * @param {Number} [to=args.length] The array index to slice to, exclusive.\n     * @return {Array} A new, sliced array.\n     * @example\n     *\n     *      _slice([1, 2, 3, 4, 5], 1, 3); //=> [2, 3]\n     *\n     *      var firstThreeArgs = function(a, b, c, d) {\n     *        return _slice(arguments, 0, 3);\n     *      };\n     *      firstThreeArgs(1, 2, 3, 4); //=> [1, 2, 3]\n     */\n    var _slice = function _slice(args, from, to) {\n        switch (arguments.length) {\n        case 1:\n            return _slice(args, 0, args.length);\n        case 2:\n            return _slice(args, from, args.length);\n        default:\n            var list = [];\n            var idx = 0;\n            var len = Math.max(0, Math.min(args.length, to) - from);\n            while (idx < len) {\n                list[idx] = args[from + idx];\n                idx += 1;\n            }\n            return list;\n        }\n    };\n\n    /**\n     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.\n     */\n    var _toISOString = function () {\n        var pad = function pad(n) {\n            return (n < 10 ? '0' : '') + n;\n        };\n        return typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {\n            return d.toISOString();\n        } : function _toISOString(d) {\n            return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';\n        };\n    }();\n\n    var _xfBase = {\n        init: function () {\n            return this.xf['@@transducer/init']();\n        },\n        result: function (result) {\n            return this.xf['@@transducer/result'](result);\n        }\n    };\n\n    var _xwrap = function () {\n        function XWrap(fn) {\n            this.f = fn;\n        }\n        XWrap.prototype['@@transducer/init'] = function () {\n            throw new Error('init not implemented on XWrap');\n        };\n        XWrap.prototype['@@transducer/result'] = function (acc) {\n            return acc;\n        };\n        XWrap.prototype['@@transducer/step'] = function (acc, x) {\n            return this.f(acc, x);\n        };\n        return function _xwrap(fn) {\n            return new XWrap(fn);\n        };\n    }();\n\n    var _aperture = function _aperture(n, list) {\n        var idx = 0;\n        var limit = list.length - (n - 1);\n        var acc = new Array(limit >= 0 ? limit : 0);\n        while (idx < limit) {\n            acc[idx] = _slice(list, idx, idx + n);\n            idx += 1;\n        }\n        return acc;\n    };\n\n    var _assign = typeof Object.assign === 'function' ? Object.assign : _objectAssign;\n\n    /**\n     * Similar to hasMethod, this checks whether a function has a [methodname]\n     * function. If it isn't an array it will execute that function otherwise it\n     * will default to the ramda implementation.\n     *\n     * @private\n     * @param {Function} fn ramda implemtation\n     * @param {String} methodname property to check for a custom implementation\n     * @return {Object} Whatever the return value of the method is.\n     */\n    var _checkForMethod = function _checkForMethod(methodname, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, _slice(arguments, 0, length - 1));\n        };\n    };\n\n    /**\n     * Optimized internal one-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry1 = function _curry1(fn) {\n        return function f1(a) {\n            if (arguments.length === 0 || _isPlaceholder(a)) {\n                return f1;\n            } else {\n                return fn.apply(this, arguments);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal two-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry2 = function _curry2(fn) {\n        return function f2(a, b) {\n            switch (arguments.length) {\n            case 0:\n                return f2;\n            case 1:\n                return _isPlaceholder(a) ? f2 : _curry1(function (_b) {\n                    return fn(a, _b);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b);\n                }) : fn(a, b);\n            }\n        };\n    };\n\n    /**\n     * Optimized internal three-arity curry function.\n     *\n     * @private\n     * @category Function\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curry3 = function _curry3(fn) {\n        return function f3(a, b, c) {\n            switch (arguments.length) {\n            case 0:\n                return f3;\n            case 1:\n                return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                });\n            case 2:\n                return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _curry1(function (_c) {\n                    return fn(a, b, _c);\n                });\n            default:\n                return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {\n                    return fn(_a, _b, c);\n                }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {\n                    return fn(_a, b, _c);\n                }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {\n                    return fn(a, _b, _c);\n                }) : _isPlaceholder(a) ? _curry1(function (_a) {\n                    return fn(_a, b, c);\n                }) : _isPlaceholder(b) ? _curry1(function (_b) {\n                    return fn(a, _b, c);\n                }) : _isPlaceholder(c) ? _curry1(function (_c) {\n                    return fn(a, b, _c);\n                }) : fn(a, b, c);\n            }\n        };\n    };\n\n    /**\n     * Internal curryN function.\n     *\n     * @private\n     * @category Function\n     * @param {Number} length The arity of the curried function.\n     * @param {Array} received An array of arguments received thus far.\n     * @param {Function} fn The function to curry.\n     * @return {Function} The curried function.\n     */\n    var _curryN = function _curryN(length, received, fn) {\n        return function () {\n            var combined = [];\n            var argsIdx = 0;\n            var left = length;\n            var combinedIdx = 0;\n            while (combinedIdx < received.length || argsIdx < arguments.length) {\n                var result;\n                if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {\n                    result = received[combinedIdx];\n                } else {\n                    result = arguments[argsIdx];\n                    argsIdx += 1;\n                }\n                combined[combinedIdx] = result;\n                if (!_isPlaceholder(result)) {\n                    left -= 1;\n                }\n                combinedIdx += 1;\n            }\n            return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));\n        };\n    };\n\n    /**\n     * Returns a function that dispatches with different strategies based on the\n     * object in list position (last argument). If it is an array, executes [fn].\n     * Otherwise, if it has a function with [methodname], it will execute that\n     * function (functor case). Otherwise, if it is a transformer, uses transducer\n     * [xf] to return a new transformer (transducer case). Otherwise, it will\n     * default to executing [fn].\n     *\n     * @private\n     * @param {String} methodname property to check for a custom implementation\n     * @param {Function} xf transducer to initialize if object is transformer\n     * @param {Function} fn default ramda implementation\n     * @return {Function} A function that dispatches on object in list position\n     */\n    var _dispatchable = function _dispatchable(methodname, xf, fn) {\n        return function () {\n            var length = arguments.length;\n            if (length === 0) {\n                return fn();\n            }\n            var obj = arguments[length - 1];\n            if (!_isArray(obj)) {\n                var args = _slice(arguments, 0, length - 1);\n                if (typeof obj[methodname] === 'function') {\n                    return obj[methodname].apply(obj, args);\n                }\n                if (_isTransformer(obj)) {\n                    var transducer = xf.apply(null, args);\n                    return transducer(obj);\n                }\n            }\n            return fn.apply(this, arguments);\n        };\n    };\n\n    var _dropLastWhile = function dropLastWhile(pred, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && pred(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, 0, idx + 1);\n    };\n\n    var _xall = function () {\n        function XAll(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.all = true;\n        }\n        XAll.prototype['@@transducer/init'] = _xfBase.init;\n        XAll.prototype['@@transducer/result'] = function (result) {\n            if (this.all) {\n                result = this.xf['@@transducer/step'](result, true);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAll.prototype['@@transducer/step'] = function (result, input) {\n            if (!this.f(input)) {\n                this.all = false;\n                result = _reduced(this.xf['@@transducer/step'](result, false));\n            }\n            return result;\n        };\n        return _curry2(function _xall(f, xf) {\n            return new XAll(f, xf);\n        });\n    }();\n\n    var _xany = function () {\n        function XAny(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.any = false;\n        }\n        XAny.prototype['@@transducer/init'] = _xfBase.init;\n        XAny.prototype['@@transducer/result'] = function (result) {\n            if (!this.any) {\n                result = this.xf['@@transducer/step'](result, false);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XAny.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.any = true;\n                result = _reduced(this.xf['@@transducer/step'](result, true));\n            }\n            return result;\n        };\n        return _curry2(function _xany(f, xf) {\n            return new XAny(f, xf);\n        });\n    }();\n\n    var _xaperture = function () {\n        function XAperture(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XAperture.prototype['@@transducer/init'] = _xfBase.init;\n        XAperture.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XAperture.prototype['@@transducer/step'] = function (result, input) {\n            this.store(input);\n            return this.full ? this.xf['@@transducer/step'](result, this.getCopy()) : result;\n        };\n        XAperture.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        XAperture.prototype.getCopy = function () {\n            return _concat(_slice(this.acc, this.pos), _slice(this.acc, 0, this.pos));\n        };\n        return _curry2(function _xaperture(n, xf) {\n            return new XAperture(n, xf);\n        });\n    }();\n\n    var _xdrop = function () {\n        function XDrop(n, xf) {\n            this.xf = xf;\n            this.n = n;\n        }\n        XDrop.prototype['@@transducer/init'] = _xfBase.init;\n        XDrop.prototype['@@transducer/result'] = _xfBase.result;\n        XDrop.prototype['@@transducer/step'] = function (result, input) {\n            if (this.n > 0) {\n                this.n -= 1;\n                return result;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdrop(n, xf) {\n            return new XDrop(n, xf);\n        });\n    }();\n\n    var _xdropLast = function () {\n        function XDropLast(n, xf) {\n            this.xf = xf;\n            this.pos = 0;\n            this.full = false;\n            this.acc = new Array(n);\n        }\n        XDropLast.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLast.prototype['@@transducer/result'] = function (result) {\n            this.acc = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.full) {\n                result = this.xf['@@transducer/step'](result, this.acc[this.pos]);\n            }\n            this.store(input);\n            return result;\n        };\n        XDropLast.prototype.store = function (input) {\n            this.acc[this.pos] = input;\n            this.pos += 1;\n            if (this.pos === this.acc.length) {\n                this.pos = 0;\n                this.full = true;\n            }\n        };\n        return _curry2(function _xdropLast(n, xf) {\n            return new XDropLast(n, xf);\n        });\n    }();\n\n    var _xdropRepeatsWith = function () {\n        function XDropRepeatsWith(pred, xf) {\n            this.xf = xf;\n            this.pred = pred;\n            this.lastValue = undefined;\n            this.seenFirstValue = false;\n        }\n        XDropRepeatsWith.prototype['@@transducer/init'] = function () {\n            return this.xf['@@transducer/init']();\n        };\n        XDropRepeatsWith.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {\n            var sameAsLast = false;\n            if (!this.seenFirstValue) {\n                this.seenFirstValue = true;\n            } else if (this.pred(this.lastValue, input)) {\n                sameAsLast = true;\n            }\n            this.lastValue = input;\n            return sameAsLast ? result : this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropRepeatsWith(pred, xf) {\n            return new XDropRepeatsWith(pred, xf);\n        });\n    }();\n\n    var _xdropWhile = function () {\n        function XDropWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XDropWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XDropWhile.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f) {\n                if (this.f(input)) {\n                    return result;\n                }\n                this.f = null;\n            }\n            return this.xf['@@transducer/step'](result, input);\n        };\n        return _curry2(function _xdropWhile(f, xf) {\n            return new XDropWhile(f, xf);\n        });\n    }();\n\n    var _xfilter = function () {\n        function XFilter(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFilter.prototype['@@transducer/init'] = _xfBase.init;\n        XFilter.prototype['@@transducer/result'] = _xfBase.result;\n        XFilter.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;\n        };\n        return _curry2(function _xfilter(f, xf) {\n            return new XFilter(f, xf);\n        });\n    }();\n\n    var _xfind = function () {\n        function XFind(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.found = false;\n        }\n        XFind.prototype['@@transducer/init'] = _xfBase.init;\n        XFind.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, void 0);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFind.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, input));\n            }\n            return result;\n        };\n        return _curry2(function _xfind(f, xf) {\n            return new XFind(f, xf);\n        });\n    }();\n\n    var _xfindIndex = function () {\n        function XFindIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.found = false;\n        }\n        XFindIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindIndex.prototype['@@transducer/result'] = function (result) {\n            if (!this.found) {\n                result = this.xf['@@transducer/step'](result, -1);\n            }\n            return this.xf['@@transducer/result'](result);\n        };\n        XFindIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.found = true;\n                result = _reduced(this.xf['@@transducer/step'](result, this.idx));\n            }\n            return result;\n        };\n        return _curry2(function _xfindIndex(f, xf) {\n            return new XFindIndex(f, xf);\n        });\n    }();\n\n    var _xfindLast = function () {\n        function XFindLast(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XFindLast.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLast.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.last));\n        };\n        XFindLast.prototype['@@transducer/step'] = function (result, input) {\n            if (this.f(input)) {\n                this.last = input;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLast(f, xf) {\n            return new XFindLast(f, xf);\n        });\n    }();\n\n    var _xfindLastIndex = function () {\n        function XFindLastIndex(f, xf) {\n            this.xf = xf;\n            this.f = f;\n            this.idx = -1;\n            this.lastIdx = -1;\n        }\n        XFindLastIndex.prototype['@@transducer/init'] = _xfBase.init;\n        XFindLastIndex.prototype['@@transducer/result'] = function (result) {\n            return this.xf['@@transducer/result'](this.xf['@@transducer/step'](result, this.lastIdx));\n        };\n        XFindLastIndex.prototype['@@transducer/step'] = function (result, input) {\n            this.idx += 1;\n            if (this.f(input)) {\n                this.lastIdx = this.idx;\n            }\n            return result;\n        };\n        return _curry2(function _xfindLastIndex(f, xf) {\n            return new XFindLastIndex(f, xf);\n        });\n    }();\n\n    var _xmap = function () {\n        function XMap(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XMap.prototype['@@transducer/init'] = _xfBase.init;\n        XMap.prototype['@@transducer/result'] = _xfBase.result;\n        XMap.prototype['@@transducer/step'] = function (result, input) {\n            return this.xf['@@transducer/step'](result, this.f(input));\n        };\n        return _curry2(function _xmap(f, xf) {\n            return new XMap(f, xf);\n        });\n    }();\n\n    var _xreduceBy = function () {\n        function XReduceBy(valueFn, valueAcc, keyFn, xf) {\n            this.valueFn = valueFn;\n            this.valueAcc = valueAcc;\n            this.keyFn = keyFn;\n            this.xf = xf;\n            this.inputs = {};\n        }\n        XReduceBy.prototype['@@transducer/init'] = _xfBase.init;\n        XReduceBy.prototype['@@transducer/result'] = function (result) {\n            var key;\n            for (key in this.inputs) {\n                if (_has(key, this.inputs)) {\n                    result = this.xf['@@transducer/step'](result, this.inputs[key]);\n                    if (result['@@transducer/reduced']) {\n                        result = result['@@transducer/value'];\n                        break;\n                    }\n                }\n            }\n            this.inputs = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XReduceBy.prototype['@@transducer/step'] = function (result, input) {\n            var key = this.keyFn(input);\n            this.inputs[key] = this.inputs[key] || [\n                key,\n                this.valueAcc\n            ];\n            this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);\n            return result;\n        };\n        return _curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {\n            return new XReduceBy(valueFn, valueAcc, keyFn, xf);\n        });\n    }();\n\n    var _xtake = function () {\n        function XTake(n, xf) {\n            this.xf = xf;\n            this.n = n;\n            this.i = 0;\n        }\n        XTake.prototype['@@transducer/init'] = _xfBase.init;\n        XTake.prototype['@@transducer/result'] = _xfBase.result;\n        XTake.prototype['@@transducer/step'] = function (result, input) {\n            this.i += 1;\n            var ret = this.n === 0 ? result : this.xf['@@transducer/step'](result, input);\n            return this.i >= this.n ? _reduced(ret) : ret;\n        };\n        return _curry2(function _xtake(n, xf) {\n            return new XTake(n, xf);\n        });\n    }();\n\n    var _xtakeWhile = function () {\n        function XTakeWhile(f, xf) {\n            this.xf = xf;\n            this.f = f;\n        }\n        XTakeWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XTakeWhile.prototype['@@transducer/result'] = _xfBase.result;\n        XTakeWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.xf['@@transducer/step'](result, input) : _reduced(result);\n        };\n        return _curry2(function _xtakeWhile(f, xf) {\n            return new XTakeWhile(f, xf);\n        });\n    }();\n\n    /**\n     * Adds two values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Number}\n     * @see R.subtract\n     * @example\n     *\n     *      R.add(2, 3);       //=>  5\n     *      R.add(7)(10);      //=> 17\n     */\n    var add = _curry2(function add(a, b) {\n        return Number(a) + Number(b);\n    });\n\n    /**\n     * Applies a function to the value at the given index of an array, returning a\n     * new copy of the array with the element at the given index replaced with the\n     * result of the function application.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a -> a) -> Number -> [a] -> [a]\n     * @param {Function} fn The function to apply.\n     * @param {Number} idx The index.\n     * @param {Array|Arguments} list An array-like object whose value\n     *        at the supplied index will be replaced.\n     * @return {Array} A copy of the supplied array-like object with\n     *         the element at index `idx` replaced with the value\n     *         returned by applying `fn` to the existing element.\n     * @see R.update\n     * @example\n     *\n     *      R.adjust(R.add(10), 1, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.adjust(R.add(10))(1)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var adjust = _curry3(function adjust(fn, idx, list) {\n        if (idx >= list.length || idx < -list.length) {\n            return list;\n        }\n        var start = idx < 0 ? list.length : 0;\n        var _idx = start + idx;\n        var _list = _concat(list);\n        _list[_idx] = fn(list[_idx]);\n        return _list;\n    });\n\n    /**\n     * Returns `true` if all elements of the list match the predicate, `false` if\n     * there are any that don't.\n     *\n     * Dispatches to the `all` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n     *         otherwise.\n     * @see R.any, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      var lessThan3 = R.flip(R.lt)(3);\n     *      R.all(lessThan2)([1, 2]); //=> false\n     *      R.all(lessThan3)([1, 2]); //=> true\n     */\n    var all = _curry2(_dispatchable('all', _xall, function all(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (!fn(list[idx])) {\n                return false;\n            }\n            idx += 1;\n        }\n        return true;\n    }));\n\n    /**\n     * Returns a function that always returns the given value. Note that for\n     * non-primitives the value returned is a reference to the original value.\n     *\n     * This function is known as `const`, `constant`, or `K` (for K combinator) in\n     * other languages and libraries.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> (* -> a)\n     * @param {*} val The value to wrap in a function\n     * @return {Function} A Function :: * -> val.\n     * @example\n     *\n     *      var t = R.always('Tee');\n     *      t(); //=> 'Tee'\n     */\n    var always = _curry1(function always(val) {\n        return function () {\n            return val;\n        };\n    });\n\n    /**\n     * Returns `true` if both arguments are `true`; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if both arguments are `true`, `false` otherwise\n     * @see R.both\n     * @example\n     *\n     *      R.and(true, true); //=> true\n     *      R.and(true, false); //=> false\n     *      R.and(false, true); //=> false\n     *      R.and(false, false); //=> false\n     */\n    var and = _curry2(function and(a, b) {\n        return a && b;\n    });\n\n    /**\n     * Returns `true` if at least one of elements of the list match the predicate,\n     * `false` otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n     *         otherwise.\n     * @see R.all, R.none, R.transduce\n     * @example\n     *\n     *      var lessThan0 = R.flip(R.lt)(0);\n     *      var lessThan2 = R.flip(R.lt)(2);\n     *      R.any(lessThan0)([1, 2]); //=> false\n     *      R.any(lessThan2)([1, 2]); //=> true\n     */\n    var any = _curry2(_dispatchable('any', _xany, function any(fn, list) {\n        var idx = 0;\n        while (idx < list.length) {\n            if (fn(list[idx])) {\n                return true;\n            }\n            idx += 1;\n        }\n        return false;\n    }));\n\n    /**\n     * Returns a new list, composed of n-tuples of consecutive elements If `n` is\n     * greater than the length of the list, an empty list is returned.\n     *\n     * Dispatches to the `aperture` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @param {Number} n The size of the tuples to create\n     * @param {Array} list The list to split into `n`-tuples\n     * @return {Array} The new list.\n     * @see R.transduce\n     * @example\n     *\n     *      R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n     *      R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n     *      R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n     */\n    var aperture = _curry2(_dispatchable('aperture', _xaperture, _aperture));\n\n    /**\n     * Returns a new list containing the contents of the given list, followed by\n     * the given element.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The element to add to the end of the new list.\n     * @param {Array} list The list whose contents will be added to the beginning of the output\n     *        list.\n     * @return {Array} A new list containing the contents of the old list followed by `el`.\n     * @see R.prepend\n     * @example\n     *\n     *      R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n     *      R.append('tests', []); //=> ['tests']\n     *      R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n     */\n    var append = _curry2(function append(el, list) {\n        return _concat(list, [el]);\n    });\n\n    /**\n     * Applies function `fn` to the argument list `args`. This is useful for\n     * creating a fixed-arity function from a variadic function. `fn` should be a\n     * bound function if context is significant.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> a) -> [*] -> a\n     * @param {Function} fn\n     * @param {Array} args\n     * @return {*}\n     * @see R.call, R.unapply\n     * @example\n     *\n     *      var nums = [1, 2, 3, -99, 42, 6, 7];\n     *      R.apply(Math.max, nums); //=> 42\n     */\n    var apply = _curry2(function apply(fn, args) {\n        return fn.apply(this, args);\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the specified\n     * property with the given value. Note that this copies and flattens prototype\n     * properties onto the new object as well. All non-primitive properties are\n     * copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig String -> a -> {k: v} -> {k: v}\n     * @param {String} prop the property name to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except for the specified property.\n     * @see R.dissoc\n     * @example\n     *\n     *      R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n     */\n    var assoc = _curry3(function assoc(prop, val, obj) {\n        var result = {};\n        for (var p in obj) {\n            result[p] = obj[p];\n        }\n        result[prop] = val;\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, setting or overriding the nodes required\n     * to create the given path, and placing the specific value at the tail end of\n     * that path. Note that this copies and flattens prototype properties onto the\n     * new object as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig [String] -> a -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {*} val the new value\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original except along the specified path.\n     * @see R.dissocPath\n     * @example\n     *\n     *      R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n     */\n    var assocPath = _curry3(function assocPath(path, val, obj) {\n        switch (path.length) {\n        case 0:\n            return val;\n        case 1:\n            return assoc(path[0], val, obj);\n        default:\n            return assoc(path[0], assocPath(_slice(path, 1), val, Object(obj[path[0]])), obj);\n        }\n    });\n\n    /**\n     * Creates a function that is bound to a context.\n     * Note: `R.bind` does not provide the additional argument-binding capabilities of\n     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Function\n     * @category Object\n     * @sig (* -> *) -> {*} -> (* -> *)\n     * @param {Function} fn The function to bind to context\n     * @param {Object} thisObj The context to bind `fn` to\n     * @return {Function} A function that will execute in the context of `thisObj`.\n     * @see R.partial\n     * @example\n     *\n     *      var log = R.bind(console.log, console);\n     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n     *      // logs {a: 2}\n     */\n    var bind = _curry2(function bind(fn, thisObj) {\n        return _arity(fn.length, function () {\n            return fn.apply(thisObj, arguments);\n        });\n    });\n\n    /**\n     * Restricts a number to be within a range.\n     *\n     * Also works for other ordered types such as Strings and Dates.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a -> a\n     * @param {Number} minimum number\n     * @param {Number} maximum number\n     * @param {Number} value to be clamped\n     * @return {Number} Returns the clamped value\n     * @example\n     *\n     *      R.clamp(1, 10, -1) // => 1\n     *      R.clamp(1, 10, 11) // => 10\n     *      R.clamp(1, 10, 4)  // => 4\n     */\n    var clamp = _curry3(function clamp(min, max, value) {\n        if (min > max) {\n            throw new Error('min must not be greater than max in clamp(min, max, value)');\n        }\n        return value < min ? min : value > max ? max : value;\n    });\n\n    /**\n     * Makes a comparator function out of a function that reports whether the first\n     * element is less than the second.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a, b -> Boolean) -> (a, b -> Number)\n     * @param {Function} pred A predicate function of arity two.\n     * @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`.\n     * @example\n     *\n     *      var cmp = R.comparator((a, b) => a.age < b.age);\n     *      var people = [\n     *        // ...\n     *      ];\n     *      R.sort(cmp, people);\n     */\n    var comparator = _curry1(function comparator(pred) {\n        return function (a, b) {\n            return pred(a, b) ? -1 : pred(b, a) ? 1 : 0;\n        };\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function, with the specified\n     * arity. The curried function has two unusual capabilities. First, its\n     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curry\n     * @example\n     *\n     *      var sumArgs = (...args) => R.sum(args);\n     *\n     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curryN = _curry2(function curryN(length, fn) {\n        if (length === 1) {\n            return _curry1(fn);\n        }\n        return _arity(length, _curryN(length, [], fn));\n    });\n\n    /**\n     * Decrements its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.inc\n     * @example\n     *\n     *      R.dec(42); //=> 41\n     */\n    var dec = add(-1);\n\n    /**\n     * Returns the second argument if it is not `null`, `undefined` or `NaN`\n     * otherwise the first argument is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Logic\n     * @sig a -> b -> a | b\n     * @param {a} val The default value.\n     * @param {b} val The value to return if it is not null or undefined\n     * @return {*} The the second value or the default value\n     * @example\n     *\n     *      var defaultTo42 = R.defaultTo(42);\n     *\n     *      defaultTo42(null);  //=> 42\n     *      defaultTo42(undefined);  //=> 42\n     *      defaultTo42('Ramda');  //=> 'Ramda'\n     *      defaultTo42(parseInt('string')); //=> 42\n     */\n    var defaultTo = _curry2(function defaultTo(d, v) {\n        return v == null || v !== v ? d : v;\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      var cmp = (x, y) => x.a === y.a;\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}];\n     *      var l2 = [{a: 3}, {a: 4}];\n     *      R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n     */\n    var differenceWith = _curry3(function differenceWith(pred, first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_containsWith(pred, first[idx], second) && !_containsWith(pred, first[idx], out)) {\n                out.push(first[idx]);\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object that does not contain a `prop` property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Object\n     * @sig String -> {k: v} -> {k: v}\n     * @param {String} prop the name of the property to dissociate\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object similar to the original but without the specified property\n     * @see R.assoc\n     * @example\n     *\n     *      R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n     */\n    var dissoc = _curry2(function dissoc(prop, obj) {\n        var result = {};\n        for (var p in obj) {\n            if (p !== prop) {\n                result[p] = obj[p];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Makes a shallow clone of an object, omitting the property at the given path.\n     * Note that this copies and flattens prototype properties onto the new object\n     * as well. All non-primitive properties are copied by reference.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.11.0\n     * @category Object\n     * @sig [String] -> {k: v} -> {k: v}\n     * @param {Array} path the path to set\n     * @param {Object} obj the object to clone\n     * @return {Object} a new object without the property at path\n     * @see R.assocPath\n     * @example\n     *\n     *      R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n     */\n    var dissocPath = _curry2(function dissocPath(path, obj) {\n        switch (path.length) {\n        case 0:\n            return obj;\n        case 1:\n            return dissoc(path[0], obj);\n        default:\n            var head = path[0];\n            var tail = _slice(path, 1);\n            return obj[head] == null ? obj : assoc(head, dissocPath(tail, obj[head]), obj);\n        }\n    });\n\n    /**\n     * Divides two numbers. Equivalent to `a / b`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a / b`.\n     * @see R.multiply\n     * @example\n     *\n     *      R.divide(71, 100); //=> 0.71\n     *\n     *      var half = R.divide(R.__, 2);\n     *      half(42); //=> 21\n     *\n     *      var reciprocal = R.divide(1);\n     *      reciprocal(4);   //=> 0.25\n     */\n    var divide = _curry2(function divide(a, b) {\n        return a / b;\n    });\n\n    /**\n     * Returns a new list excluding the leading elements of a given list which\n     * satisfy the supplied predicate function. It passes each value to the supplied\n     * predicate function, skipping elements while the predicate function returns\n     * `true`. The predicate function is applied to one argument: *(value)*.\n     *\n     * Dispatches to the `dropWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var lteTwo = x => x <= 2;\n     *\n     *      R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n     */\n    var dropWhile = _curry2(_dispatchable('dropWhile', _xdropWhile, function dropWhile(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && pred(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, idx);\n    }));\n\n    /**\n     * Returns the empty value of its argument's type. Ramda defines the empty\n     * value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n     * types are supported if they define `<Type>.empty` and/or\n     * `<Type>.prototype.empty`.\n     *\n     * Dispatches to the `empty` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x\n     * @return {*}\n     * @example\n     *\n     *      R.empty(Just(42));      //=> Nothing()\n     *      R.empty([1, 2, 3]);     //=> []\n     *      R.empty('unicorns');    //=> ''\n     *      R.empty({x: 1, y: 2});  //=> {}\n     */\n    // else\n    var empty = _curry1(function empty(x) {\n        return x != null && typeof x.empty === 'function' ? x.empty() : x != null && x.constructor != null && typeof x.constructor.empty === 'function' ? x.constructor.empty() : _isArray(x) ? [] : _isString(x) ? '' : _isObject(x) ? {} : _isArguments(x) ? function () {\n            return arguments;\n        }() : // else\n        void 0;\n    });\n\n    /**\n     * Creates a new object by recursively evolving a shallow copy of `object`,\n     * according to the `transformation` functions. All non-primitive properties\n     * are copied by reference.\n     *\n     * A `transformation` function will not be invoked if its corresponding key\n     * does not exist in the evolved object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {k: (v -> v)} -> {k: v} -> {k: v}\n     * @param {Object} transformations The object specifying transformation functions to apply\n     *        to the object.\n     * @param {Object} object The object to be transformed.\n     * @return {Object} The transformed object.\n     * @example\n     *\n     *      var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n     *      var transformations = {\n     *        firstName: R.trim,\n     *        lastName: R.trim, // Will not get invoked.\n     *        data: {elapsed: R.add(1), remaining: R.add(-1)}\n     *      };\n     *      R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n     */\n    var evolve = _curry2(function evolve(transformations, object) {\n        var result = {};\n        var transformation, key, type;\n        for (key in object) {\n            transformation = transformations[key];\n            type = typeof transformation;\n            result[key] = type === 'function' ? transformation(object[key]) : type === 'object' ? evolve(transformations[key], object[key]) : object[key];\n        }\n        return result;\n    });\n\n    /**\n     * Returns the first element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `find` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     *        desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n     *      R.find(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var find = _curry2(_dispatchable('find', _xfind, function find(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx += 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the first element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1}, {a: 2}, {a: 3}];\n     *      R.findIndex(R.propEq('a', 2))(xs); //=> 1\n     *      R.findIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findIndex = _curry2(_dispatchable('findIndex', _xfindIndex, function findIndex(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Returns the last element of the list which matches the predicate, or\n     * `undefined` if no element matches.\n     *\n     * Dispatches to the `findLast` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> a | undefined\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Object} The element found, or `undefined`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n     *      R.findLast(R.propEq('a', 4))(xs); //=> undefined\n     */\n    var findLast = _curry2(_dispatchable('findLast', _xfindLast, function findLast(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return list[idx];\n            }\n            idx -= 1;\n        }\n    }));\n\n    /**\n     * Returns the index of the last element of the list which matches the\n     * predicate, or `-1` if no element matches.\n     *\n     * Dispatches to the `findLastIndex` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Number\n     * @param {Function} fn The predicate function used to determine if the element is the\n     * desired one.\n     * @param {Array} list The array to consider.\n     * @return {Number} The index of the element found, or `-1`.\n     * @see R.transduce\n     * @example\n     *\n     *      var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n     *      R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n     *      R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n     */\n    var findLastIndex = _curry2(_dispatchable('findLastIndex', _xfindLastIndex, function findLastIndex(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            if (fn(list[idx])) {\n                return idx;\n            }\n            idx -= 1;\n        }\n        return -1;\n    }));\n\n    /**\n     * Iterate over an input `list`, calling a provided function `fn` for each\n     * element in the list.\n     *\n     * `fn` receives one argument: *(value)*.\n     *\n     * Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.forEach` method. For more\n     * details on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n     *\n     * Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n     * the original array. In some libraries this function is named `each`.\n     *\n     * Dispatches to the `forEach` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig (a -> *) -> [a] -> [a]\n     * @param {Function} fn The function to invoke. Receives one argument, `value`.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} The original list.\n     * @see R.addIndex\n     * @example\n     *\n     *      var printXPlusFive = x => console.log(x + 5);\n     *      R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n     *      // logs 6\n     *      // logs 7\n     *      // logs 8\n     */\n    var forEach = _curry2(_checkForMethod('forEach', function forEach(fn, list) {\n        var len = list.length;\n        var idx = 0;\n        while (idx < len) {\n            fn(list[idx]);\n            idx += 1;\n        }\n        return list;\n    }));\n\n    /**\n     * Creates a new object from a list key-value pairs. If a key appears in\n     * multiple pairs, the rightmost pair is included in the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [[k,v]] -> {k: v}\n     * @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n     * @return {Object} The object made by pairing up `keys` and `values`.\n     * @see R.toPairs, R.pair\n     * @example\n     *\n     *      R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n     */\n    var fromPairs = _curry1(function fromPairs(pairs) {\n        var result = {};\n        var idx = 0;\n        while (idx < pairs.length) {\n            result[pairs[idx][0]] = pairs[idx][1];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and returns a list of lists where each sublist's elements are\n     * all \"equal\" according to the provided equality function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.21.0\n     * @category List\n     * @sig ((a, a) → Boolean) → [a] → [[a]]\n     * @param {Function} fn Function for determining whether two given (adjacent)\n     *        elements should be in the same group\n     * @param {Array} list The array to group. Also accepts a string, which will be\n     *        treated as a list of characters.\n     * @return {List} A list that contains sublists of equal elements,\n     *         whose concatenations are equal to the original list.\n     * @example\n     *\n     * R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n     *\n     * R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n     * //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n     *\n     * R.groupWith(R.eqBy(isVowel), 'aestiou')\n     * //=> ['ae', 'st', 'iou']\n     */\n    var groupWith = _curry2(function (fn, list) {\n        var res = [];\n        var idx = 0;\n        var len = list.length;\n        while (idx < len) {\n            var nextidx = idx + 1;\n            while (nextidx < len && fn(list[idx], list[nextidx])) {\n                nextidx += 1;\n            }\n            res.push(list.slice(idx, nextidx));\n            idx = nextidx;\n        }\n        return res;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.lt\n     * @example\n     *\n     *      R.gt(2, 1); //=> true\n     *      R.gt(2, 2); //=> false\n     *      R.gt(2, 3); //=> false\n     *      R.gt('a', 'z'); //=> false\n     *      R.gt('z', 'a'); //=> true\n     */\n    var gt = _curry2(function gt(a, b) {\n        return a > b;\n    });\n\n    /**\n     * Returns `true` if the first argument is greater than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.lte\n     * @example\n     *\n     *      R.gte(2, 1); //=> true\n     *      R.gte(2, 2); //=> true\n     *      R.gte(2, 3); //=> false\n     *      R.gte('a', 'z'); //=> false\n     *      R.gte('z', 'a'); //=> true\n     */\n    var gte = _curry2(function gte(a, b) {\n        return a >= b;\n    });\n\n    /**\n     * Returns whether or not an object has an own property with the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      var hasName = R.has('name');\n     *      hasName({name: 'alice'});   //=> true\n     *      hasName({name: 'bob'});     //=> true\n     *      hasName({});                //=> false\n     *\n     *      var point = {x: 0, y: 0};\n     *      var pointHas = R.has(R.__, point);\n     *      pointHas('x');  //=> true\n     *      pointHas('y');  //=> true\n     *      pointHas('z');  //=> false\n     */\n    var has = _curry2(_has);\n\n    /**\n     * Returns whether or not an object or its prototype chain has a property with\n     * the specified name\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Object\n     * @sig s -> {s: x} -> Boolean\n     * @param {String} prop The name of the property to check for.\n     * @param {Object} obj The object to query.\n     * @return {Boolean} Whether the property exists.\n     * @example\n     *\n     *      function Rectangle(width, height) {\n     *        this.width = width;\n     *        this.height = height;\n     *      }\n     *      Rectangle.prototype.area = function() {\n     *        return this.width * this.height;\n     *      };\n     *\n     *      var square = new Rectangle(2, 2);\n     *      R.hasIn('width', square);  //=> true\n     *      R.hasIn('area', square);  //=> true\n     */\n    var hasIn = _curry2(function hasIn(prop, obj) {\n        return prop in obj;\n    });\n\n    /**\n     * Returns true if its arguments are identical, false otherwise. Values are\n     * identical if they reference the same memory. `NaN` is identical to `NaN`;\n     * `0` and `-0` are not identical.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      var o = {};\n     *      R.identical(o, o); //=> true\n     *      R.identical(1, 1); //=> true\n     *      R.identical(1, '1'); //=> false\n     *      R.identical([], []); //=> false\n     *      R.identical(0, -0); //=> false\n     *      R.identical(NaN, NaN); //=> true\n     */\n    // SameValue algorithm\n    // Steps 1-5, 7-10\n    // Steps 6.b-6.e: +0 != -0\n    // Step 6.a: NaN == NaN\n    var identical = _curry2(function identical(a, b) {\n        // SameValue algorithm\n        if (a === b) {\n            // Steps 1-5, 7-10\n            // Steps 6.b-6.e: +0 != -0\n            return a !== 0 || 1 / a === 1 / b;\n        } else {\n            // Step 6.a: NaN == NaN\n            return a !== a && b !== b;\n        }\n    });\n\n    /**\n     * A function that does nothing but return the parameter supplied to it. Good\n     * as a default or placeholder function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig a -> a\n     * @param {*} x The value to return.\n     * @return {*} The input value, `x`.\n     * @example\n     *\n     *      R.identity(1); //=> 1\n     *\n     *      var obj = {};\n     *      R.identity(obj) === obj; //=> true\n     */\n    var identity = _curry1(_identity);\n\n    /**\n     * Creates a function that will process either the `onTrue` or the `onFalse`\n     * function depending upon the result of the `condition` predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> *) -> (*... -> *) -> (*... -> *)\n     * @param {Function} condition A predicate function\n     * @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n     * @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n     * @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n     *                    function depending upon the result of the `condition` predicate.\n     * @see R.unless, R.when\n     * @example\n     *\n     *      var incCount = R.ifElse(\n     *        R.has('count'),\n     *        R.over(R.lensProp('count'), R.inc),\n     *        R.assoc('count', 1)\n     *      );\n     *      incCount({});           //=> { count: 1 }\n     *      incCount({ count: 1 }); //=> { count: 2 }\n     */\n    var ifElse = _curry3(function ifElse(condition, onTrue, onFalse) {\n        return curryN(Math.max(condition.length, onTrue.length, onFalse.length), function _ifElse() {\n            return condition.apply(this, arguments) ? onTrue.apply(this, arguments) : onFalse.apply(this, arguments);\n        });\n    });\n\n    /**\n     * Increments its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @see R.dec\n     * @example\n     *\n     *      R.inc(42); //=> 43\n     */\n    var inc = add(1);\n\n    /**\n     * Inserts the supplied element into the list, at index `index`. _Note that\n     * this is not destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} index The position to insert the element\n     * @param {*} elt The element to insert into the Array\n     * @param {Array} list The list to insert into\n     * @return {Array} A new Array with `elt` inserted at `index`.\n     * @example\n     *\n     *      R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n     */\n    var insert = _curry3(function insert(idx, elt, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        var result = _slice(list);\n        result.splice(idx, 0, elt);\n        return result;\n    });\n\n    /**\n     * Inserts the sub-list into the list, at index `index`. _Note that this is not\n     * destructive_: it returns a copy of the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig Number -> [a] -> [a] -> [a]\n     * @param {Number} index The position to insert the sub-list\n     * @param {Array} elts The sub-list to insert into the Array\n     * @param {Array} list The list to insert the sub-list into\n     * @return {Array} A new Array with `elts` inserted starting at `index`.\n     * @example\n     *\n     *      R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n     */\n    var insertAll = _curry3(function insertAll(idx, elts, list) {\n        idx = idx < list.length && idx >= 0 ? idx : list.length;\n        return _concat(_concat(_slice(list, 0, idx), elts), _slice(list, idx));\n    });\n\n    /**\n     * Creates a new list with the separator interposed between elements.\n     *\n     * Dispatches to the `intersperse` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} separator The element to add to the list.\n     * @param {Array} list The list to be interposed.\n     * @return {Array} The new list.\n     * @example\n     *\n     *      R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n     */\n    var intersperse = _curry2(_checkForMethod('intersperse', function intersperse(separator, list) {\n        var out = [];\n        var idx = 0;\n        var length = list.length;\n        while (idx < length) {\n            if (idx === length - 1) {\n                out.push(list[idx]);\n            } else {\n                out.push(list[idx], separator);\n            }\n            idx += 1;\n        }\n        return out;\n    }));\n\n    /**\n     * See if an object (`val`) is an instance of the supplied constructor. This\n     * function will check up the inheritance chain, if any.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Type\n     * @sig (* -> {*}) -> a -> Boolean\n     * @param {Object} ctor A constructor\n     * @param {*} val The value to test\n     * @return {Boolean}\n     * @example\n     *\n     *      R.is(Object, {}); //=> true\n     *      R.is(Number, 1); //=> true\n     *      R.is(Object, 1); //=> false\n     *      R.is(String, 's'); //=> true\n     *      R.is(String, new String('')); //=> true\n     *      R.is(Object, new String('')); //=> true\n     *      R.is(Object, 's'); //=> false\n     *      R.is(Number, {}); //=> false\n     */\n    var is = _curry2(function is(Ctor, val) {\n        return val != null && val.constructor === Ctor || val instanceof Ctor;\n    });\n\n    /**\n     * Tests whether or not an object is similar to an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.5.0\n     * @category Type\n     * @category List\n     * @sig * -> Boolean\n     * @param {*} x The object to test.\n     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.\n     * @example\n     *\n     *      R.isArrayLike([]); //=> true\n     *      R.isArrayLike(true); //=> false\n     *      R.isArrayLike({}); //=> false\n     *      R.isArrayLike({length: 10}); //=> false\n     *      R.isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true\n     */\n    var isArrayLike = _curry1(function isArrayLike(x) {\n        if (_isArray(x)) {\n            return true;\n        }\n        if (!x) {\n            return false;\n        }\n        if (typeof x !== 'object') {\n            return false;\n        }\n        if (_isString(x)) {\n            return false;\n        }\n        if (x.nodeType === 1) {\n            return !!x.length;\n        }\n        if (x.length === 0) {\n            return true;\n        }\n        if (x.length > 0) {\n            return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);\n        }\n        return false;\n    });\n\n    /**\n     * Checks if the input value is `null` or `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Type\n     * @sig * -> Boolean\n     * @param {*} x The value to test.\n     * @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n     * @example\n     *\n     *      R.isNil(null); //=> true\n     *      R.isNil(undefined); //=> true\n     *      R.isNil(0); //=> false\n     *      R.isNil([]); //=> false\n     */\n    var isNil = _curry1(function isNil(x) {\n        return x == null;\n    });\n\n    /**\n     * Returns a list containing the names of all the enumerable own properties of\n     * the supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own properties.\n     * @example\n     *\n     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n     */\n    // cover IE < 9 keys issues\n    // Safari bug\n    var keys = function () {\n        // cover IE < 9 keys issues\n        var hasEnumBug = !{ toString: null }.propertyIsEnumerable('toString');\n        var nonEnumerableProps = [\n            'constructor',\n            'valueOf',\n            'isPrototypeOf',\n            'toString',\n            'propertyIsEnumerable',\n            'hasOwnProperty',\n            'toLocaleString'\n        ];\n        // Safari bug\n        var hasArgsEnumBug = function () {\n            'use strict';\n            return arguments.propertyIsEnumerable('length');\n        }();\n        var contains = function contains(list, item) {\n            var idx = 0;\n            while (idx < list.length) {\n                if (list[idx] === item) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        };\n        return typeof Object.keys === 'function' && !hasArgsEnumBug ? _curry1(function keys(obj) {\n            return Object(obj) !== obj ? [] : Object.keys(obj);\n        }) : _curry1(function keys(obj) {\n            if (Object(obj) !== obj) {\n                return [];\n            }\n            var prop, nIdx;\n            var ks = [];\n            var checkArgsLength = hasArgsEnumBug && _isArguments(obj);\n            for (prop in obj) {\n                if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {\n                    ks[ks.length] = prop;\n                }\n            }\n            if (hasEnumBug) {\n                nIdx = nonEnumerableProps.length - 1;\n                while (nIdx >= 0) {\n                    prop = nonEnumerableProps[nIdx];\n                    if (_has(prop, obj) && !contains(ks, prop)) {\n                        ks[ks.length] = prop;\n                    }\n                    nIdx -= 1;\n                }\n            }\n            return ks;\n        });\n    }();\n\n    /**\n     * Returns a list containing the names of all the properties of the supplied\n     * object, including prototype properties.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [k]\n     * @param {Object} obj The object to extract properties from\n     * @return {Array} An array of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.keysIn(f); //=> ['x', 'y']\n     */\n    var keysIn = _curry1(function keysIn(obj) {\n        var prop;\n        var ks = [];\n        for (prop in obj) {\n            ks[ks.length] = prop;\n        }\n        return ks;\n    });\n\n    /**\n     * Returns the number of elements in the array by returning `list.length`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [a] -> Number\n     * @param {Array} list The array to inspect.\n     * @return {Number} The length of the array.\n     * @example\n     *\n     *      R.length([]); //=> 0\n     *      R.length([1, 2, 3]); //=> 3\n     */\n    var length = _curry1(function length(list) {\n        return list != null && _isNumber(list.length) ? list.length : NaN;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than the second; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @see R.gt\n     * @example\n     *\n     *      R.lt(2, 1); //=> false\n     *      R.lt(2, 2); //=> false\n     *      R.lt(2, 3); //=> true\n     *      R.lt('a', 'z'); //=> true\n     *      R.lt('z', 'a'); //=> false\n     */\n    var lt = _curry2(function lt(a, b) {\n        return a < b;\n    });\n\n    /**\n     * Returns `true` if the first argument is less than or equal to the second;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> Boolean\n     * @param {Number} a\n     * @param {Number} b\n     * @return {Boolean}\n     * @see R.gte\n     * @example\n     *\n     *      R.lte(2, 1); //=> false\n     *      R.lte(2, 2); //=> true\n     *      R.lte(2, 3); //=> true\n     *      R.lte('a', 'z'); //=> true\n     *      R.lte('z', 'a'); //=> false\n     */\n    var lte = _curry2(function lte(a, b) {\n        return a <= b;\n    });\n\n    /**\n     * The mapAccum function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from left to right, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var appender = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n     */\n    var mapAccum = _curry3(function mapAccum(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var tuple = [acc];\n        while (idx < len) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx += 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * The mapAccumRight function behaves like a combination of map and reduce; it\n     * applies a function to each element of a list, passing an accumulating\n     * parameter from right to left, and returning a final value of this\n     * accumulator together with the new list.\n     *\n     * Similar to `mapAccum`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two arguments, *acc* and *value*, and should\n     * return a tuple *[acc, value]*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (acc -> x -> (acc, y)) -> acc -> [x] -> (acc, [y])\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var digits = ['1', '2', '3', '4'];\n     *      var append = (a, b) => [a + b, a + b];\n     *\n     *      R.mapAccumRight(append, 0, digits); //=> ['04321', ['04321', '0432', '043', '04']]\n     */\n    var mapAccumRight = _curry3(function mapAccumRight(fn, acc, list) {\n        var idx = list.length - 1;\n        var result = [];\n        var tuple = [acc];\n        while (idx >= 0) {\n            tuple = fn(tuple[0], list[idx]);\n            result[idx] = tuple[1];\n            idx -= 1;\n        }\n        return [\n            tuple[0],\n            result\n        ];\n    });\n\n    /**\n     * Tests a regular expression against a String. Note that this function will\n     * return an empty array when there are no matches. This differs from\n     * [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n     * which returns `null` when there are no matches.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig RegExp -> String -> [String | Undefined]\n     * @param {RegExp} rx A regular expression.\n     * @param {String} str The string to match against\n     * @return {Array} The list of matches or empty array.\n     * @see R.test\n     * @example\n     *\n     *      R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n     *      R.match(/a/, 'b'); //=> []\n     *      R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n     */\n    var match = _curry2(function match(rx, str) {\n        return str.match(rx) || [];\n    });\n\n    /**\n     * mathMod behaves like the modulo operator should mathematically, unlike the\n     * `%` operator (and by extension, R.modulo). So while \"-17 % 5\" is -2,\n     * mathMod(-17, 5) is 3. mathMod requires Integer arguments, and returns NaN\n     * when the modulus is zero or negative.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} m The dividend.\n     * @param {Number} p the modulus.\n     * @return {Number} The result of `b mod a`.\n     * @example\n     *\n     *      R.mathMod(-17, 5);  //=> 3\n     *      R.mathMod(17, 5);   //=> 2\n     *      R.mathMod(17, -5);  //=> NaN\n     *      R.mathMod(17, 0);   //=> NaN\n     *      R.mathMod(17.2, 5); //=> NaN\n     *      R.mathMod(17, 5.3); //=> NaN\n     *\n     *      var clock = R.mathMod(R.__, 12);\n     *      clock(15); //=> 3\n     *      clock(24); //=> 0\n     *\n     *      var seventeenMod = R.mathMod(17);\n     *      seventeenMod(3);  //=> 2\n     *      seventeenMod(4);  //=> 1\n     *      seventeenMod(10); //=> 7\n     */\n    var mathMod = _curry2(function mathMod(m, p) {\n        if (!_isInteger(m)) {\n            return NaN;\n        }\n        if (!_isInteger(p) || p < 1) {\n            return NaN;\n        }\n        return (m % p + p) % p;\n    });\n\n    /**\n     * Returns the larger of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.maxBy, R.min\n     * @example\n     *\n     *      R.max(789, 123); //=> 789\n     *      R.max('a', 'b'); //=> 'b'\n     */\n    var max = _curry2(function max(a, b) {\n        return b > a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * larger result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.max, R.minBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.maxBy(square, -3, 2); //=> -3\n     *\n     *      R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n     *      R.reduce(R.maxBy(square), 0, []); //=> 0\n     */\n    var maxBy = _curry3(function maxBy(f, a, b) {\n        return f(b) > f(a) ? b : a;\n    });\n\n    /**\n     * Create a new object with the own properties of the first object merged with\n     * the own properties of the second object. If a key exists in both objects,\n     * the value from the second object will be used.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> {k: v} -> {k: v}\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.mergeWith, R.mergeWithKey\n     * @example\n     *\n     *      R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n     *      //=> { 'name': 'fred', 'age': 40 }\n     *\n     *      var resetToDefault = R.merge(R.__, {x: 0});\n     *      resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n     */\n    var merge = _curry2(function merge(l, r) {\n        return _assign({}, l, r);\n    });\n\n    /**\n     * Merges a list of objects together into one object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig [{k: v}] -> {k: v}\n     * @param {Array} list An array of objects\n     * @return {Object} A merged object.\n     * @see R.reduce\n     * @example\n     *\n     *      R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n     *      R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n     */\n    var mergeAll = _curry1(function mergeAll(list) {\n        return _assign.apply(null, [{}].concat(list));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the key\n     * and the values associated with the key in each object, with the result being\n     * used as the value associated with the key in the returned object. The key\n     * will be excluded from the returned object if the resulting value is\n     * `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (String -> a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWith\n     * @example\n     *\n     *      let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n     *      R.mergeWithKey(concatValues,\n     *                     { a: true, thing: 'foo', values: [10, 20] },\n     *                     { b: true, thing: 'bar', values: [15, 35] });\n     *      //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n     */\n    var mergeWithKey = _curry3(function mergeWithKey(fn, l, r) {\n        var result = {};\n        var k;\n        for (k in l) {\n            if (_has(k, l)) {\n                result[k] = _has(k, r) ? fn(k, l[k], r[k]) : l[k];\n            }\n        }\n        for (k in r) {\n            if (_has(k, r) && !_has(k, result)) {\n                result[k] = r[k];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the smaller of its two arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord a => a -> a -> a\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.minBy, R.max\n     * @example\n     *\n     *      R.min(789, 123); //=> 123\n     *      R.min('a', 'b'); //=> 'a'\n     */\n    var min = _curry2(function min(a, b) {\n        return b < a ? b : a;\n    });\n\n    /**\n     * Takes a function and two values, and returns whichever value produces the\n     * smaller result when passed to the provided function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> a -> a -> a\n     * @param {Function} f\n     * @param {*} a\n     * @param {*} b\n     * @return {*}\n     * @see R.min, R.maxBy\n     * @example\n     *\n     *      //  square :: Number -> Number\n     *      var square = n => n * n;\n     *\n     *      R.minBy(square, -3, 2); //=> 2\n     *\n     *      R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n     *      R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n     */\n    var minBy = _curry3(function minBy(f, a, b) {\n        return f(b) < f(a) ? b : a;\n    });\n\n    /**\n     * Divides the first parameter by the second and returns the remainder. Note\n     * that this function preserves the JavaScript-style behavior for modulo. For\n     * mathematical modulo see `mathMod`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The value to the divide.\n     * @param {Number} b The pseudo-modulus\n     * @return {Number} The result of `b % a`.\n     * @see R.mathMod\n     * @example\n     *\n     *      R.modulo(17, 3); //=> 2\n     *      // JS behavior:\n     *      R.modulo(-17, 3); //=> -2\n     *      R.modulo(17, -3); //=> 2\n     *\n     *      var isOdd = R.modulo(R.__, 2);\n     *      isOdd(42); //=> 0\n     *      isOdd(21); //=> 1\n     */\n    var modulo = _curry2(function modulo(a, b) {\n        return a % b;\n    });\n\n    /**\n     * Multiplies two numbers. Equivalent to `a * b` but curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a * b`.\n     * @see R.divide\n     * @example\n     *\n     *      var double = R.multiply(2);\n     *      var triple = R.multiply(3);\n     *      double(3);       //=>  6\n     *      triple(4);       //=> 12\n     *      R.multiply(2, 5);  //=> 10\n     */\n    var multiply = _curry2(function multiply(a, b) {\n        return a * b;\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly `n` parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> (* -> a) -> (* -> a)\n     * @param {Number} n The desired arity of the new function.\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity `n`.\n     * @example\n     *\n     *      var takesTwoArgs = (a, b) => [a, b];\n     *\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.nAry(1, takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only `n` arguments are passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var nAry = _curry2(function nAry(n, fn) {\n        switch (n) {\n        case 0:\n            return function () {\n                return fn.call(this);\n            };\n        case 1:\n            return function (a0) {\n                return fn.call(this, a0);\n            };\n        case 2:\n            return function (a0, a1) {\n                return fn.call(this, a0, a1);\n            };\n        case 3:\n            return function (a0, a1, a2) {\n                return fn.call(this, a0, a1, a2);\n            };\n        case 4:\n            return function (a0, a1, a2, a3) {\n                return fn.call(this, a0, a1, a2, a3);\n            };\n        case 5:\n            return function (a0, a1, a2, a3, a4) {\n                return fn.call(this, a0, a1, a2, a3, a4);\n            };\n        case 6:\n            return function (a0, a1, a2, a3, a4, a5) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5);\n            };\n        case 7:\n            return function (a0, a1, a2, a3, a4, a5, a6) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6);\n            };\n        case 8:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7);\n            };\n        case 9:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8);\n            };\n        case 10:\n            return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {\n                return fn.call(this, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9);\n            };\n        default:\n            throw new Error('First argument to nAry must be a non-negative integer no greater than ten');\n        }\n    });\n\n    /**\n     * Negates its argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Math\n     * @sig Number -> Number\n     * @param {Number} n\n     * @return {Number}\n     * @example\n     *\n     *      R.negate(42); //=> -42\n     */\n    var negate = _curry1(function negate(n) {\n        return -n;\n    });\n\n    /**\n     * Returns `true` if no elements of the list match the predicate, `false`\n     * otherwise.\n     *\n     * Dispatches to the `any` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> Boolean\n     * @param {Function} fn The predicate function.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n     * @see R.all, R.any\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n     *      R.none(isEven, [1, 3, 5, 7, 8, 11]); //=> false\n     */\n    var none = _curry2(_complement(_dispatchable('any', _xany, any)));\n\n    /**\n     * A function that returns the `!` of its argument. It will return `true` when\n     * passed false-y value, and `false` when passed a truth-y one.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> Boolean\n     * @param {*} a any value\n     * @return {Boolean} the logical inverse of passed argument.\n     * @see R.complement\n     * @example\n     *\n     *      R.not(true); //=> false\n     *      R.not(false); //=> true\n     *      R.not(0); //=> true\n     *      R.not(1); //=> false\n     */\n    var not = _curry1(function not(a) {\n        return !a;\n    });\n\n    /**\n     * Returns the nth element of the given list or string. If n is negative the\n     * element at index length + n is returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> a | Undefined\n     * @sig Number -> String -> String\n     * @param {Number} offset\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      var list = ['foo', 'bar', 'baz', 'quux'];\n     *      R.nth(1, list); //=> 'bar'\n     *      R.nth(-1, list); //=> 'quux'\n     *      R.nth(-99, list); //=> undefined\n     *\n     *      R.nth(2, 'abc'); //=> 'c'\n     *      R.nth(3, 'abc'); //=> ''\n     */\n    var nth = _curry2(function nth(offset, list) {\n        var idx = offset < 0 ? list.length + offset : offset;\n        return _isString(list) ? list.charAt(idx) : list[idx];\n    });\n\n    /**\n     * Returns a function which returns its nth argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig Number -> *... -> *\n     * @param {Number} n\n     * @return {Function}\n     * @example\n     *\n     *      R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n     *      R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n     */\n    var nthArg = _curry1(function nthArg(n) {\n        var arity = n < 0 ? 1 : n + 1;\n        return curryN(arity, function () {\n            return nth(n, arguments);\n        });\n    });\n\n    /**\n     * Creates an object containing a single key:value pair.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig String -> a -> {String:a}\n     * @param {String} key\n     * @param {*} val\n     * @return {Object}\n     * @see R.pair\n     * @example\n     *\n     *      var matchPhrases = R.compose(\n     *        R.objOf('must'),\n     *        R.map(R.objOf('match_phrase'))\n     *      );\n     *      matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n     */\n    var objOf = _curry2(function objOf(key, val) {\n        var obj = {};\n        obj[key] = val;\n        return obj;\n    });\n\n    /**\n     * Returns a singleton array containing the value provided.\n     *\n     * Note this `of` is different from the ES6 `of`; See\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig a -> [a]\n     * @param {*} x any value\n     * @return {Array} An array wrapping `x`.\n     * @example\n     *\n     *      R.of(null); //=> [null]\n     *      R.of([42]); //=> [[42]]\n     */\n    var of = _curry1(_of);\n\n    /**\n     * Accepts a function `fn` and returns a function that guards invocation of\n     * `fn` such that `fn` can only ever be called once, no matter how many times\n     * the returned function is invoked. The first value calculated is returned in\n     * subsequent invocations.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> (a... -> b)\n     * @param {Function} fn The function to wrap in a call-only-once wrapper.\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      var addOneOnce = R.once(x => x + 1);\n     *      addOneOnce(10); //=> 11\n     *      addOneOnce(addOneOnce(50)); //=> 11\n     */\n    var once = _curry1(function once(fn) {\n        var called = false;\n        var result;\n        return _arity(fn.length, function () {\n            if (called) {\n                return result;\n            }\n            called = true;\n            result = fn.apply(this, arguments);\n            return result;\n        });\n    });\n\n    /**\n     * Returns `true` if one or both of its arguments are `true`. Returns `false`\n     * if both arguments are `false`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig * -> * -> *\n     * @param {Boolean} a A boolean value\n     * @param {Boolean} b A boolean value\n     * @return {Boolean} `true` if one or both arguments are `true`, `false` otherwise\n     * @see R.either\n     * @example\n     *\n     *      R.or(true, true); //=> true\n     *      R.or(true, false); //=> true\n     *      R.or(false, true); //=> true\n     *      R.or(false, false); //=> false\n     */\n    var or = _curry2(function or(a, b) {\n        return a || b;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the result of applying the given function to\n     * the focused value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> (a -> a) -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n     */\n    // `Identity` is a functor that holds a single value, where `map` simply\n    // transforms the held value with the provided function.\n    // The value returned by the getter function is first transformed with `f`,\n    // then set as the value of an `Identity`. This is then mapped over with the\n    // setter function of the lens.\n    var over = function () {\n        // `Identity` is a functor that holds a single value, where `map` simply\n        // transforms the held value with the provided function.\n        var Identity = function (x) {\n            return {\n                value: x,\n                map: function (f) {\n                    return Identity(f(x));\n                }\n            };\n        };\n        return _curry3(function over(lens, f, x) {\n            // The value returned by the getter function is first transformed with `f`,\n            // then set as the value of an `Identity`. This is then mapped over with the\n            // setter function of the lens.\n            return lens(function (y) {\n                return Identity(f(y));\n            })(x).value;\n        });\n    }();\n\n    /**\n     * Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category List\n     * @sig a -> b -> (a,b)\n     * @param {*} fst\n     * @param {*} snd\n     * @return {Array}\n     * @see R.objOf, R.of\n     * @example\n     *\n     *      R.pair('foo', 'bar'); //=> ['foo', 'bar']\n     */\n    var pair = _curry2(function pair(fst, snd) {\n        return [\n            fst,\n            snd\n        ];\n    });\n\n    /**\n     * Retrieve the value at a given path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig [String] -> {k: v} -> v | Undefined\n     * @param {Array} path The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path`.\n     * @see R.prop\n     * @example\n     *\n     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n     */\n    var path = _curry2(function path(paths, obj) {\n        var val = obj;\n        var idx = 0;\n        while (idx < paths.length) {\n            if (val == null) {\n                return;\n            }\n            val = val[paths[idx]];\n            idx += 1;\n        }\n        return val;\n    });\n\n    /**\n     * If the given, non-null object has a value at the given path, returns the\n     * value at that path. Otherwise returns the provided default value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Object\n     * @sig a -> [String] -> Object -> a\n     * @param {*} d The default value.\n     * @param {Array} p The path to use.\n     * @param {Object} obj The object to retrieve the nested property from.\n     * @return {*} The data at `path` of the supplied object or the default value.\n     * @example\n     *\n     *      R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n     *      R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n     */\n    var pathOr = _curry3(function pathOr(d, p, obj) {\n        return defaultTo(d, path(p, obj));\n    });\n\n    /**\n     * Returns `true` if the specified object property at given path satisfies the\n     * given predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Logic\n     * @sig (a -> Boolean) -> [String] -> Object -> Boolean\n     * @param {Function} pred\n     * @param {Array} propPath\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propSatisfies, R.path\n     * @example\n     *\n     *      R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n     */\n    var pathSatisfies = _curry3(function pathSatisfies(pred, propPath, obj) {\n        return propPath.length > 0 && pred(path(propPath, obj));\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys specified. If\n     * the key does not exist, the property is ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.omit, R.props\n     * @example\n     *\n     *      R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n     */\n    var pick = _curry2(function pick(names, obj) {\n        var result = {};\n        var idx = 0;\n        while (idx < names.length) {\n            if (names[idx] in obj) {\n                result[names[idx]] = obj[names[idx]];\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Similar to `pick` except that this one includes a `key: undefined` pair for\n     * properties that don't exist.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> {k: v}\n     * @param {Array} names an array of String property names to copy onto a new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties from `names` on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n     */\n    var pickAll = _curry2(function pickAll(names, obj) {\n        var result = {};\n        var idx = 0;\n        var len = names.length;\n        while (idx < len) {\n            var name = names[idx];\n            result[name] = obj[name];\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a partial copy of an object containing only the keys that satisfy\n     * the supplied predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @sig (v, k -> Boolean) -> {k: v} -> {k: v}\n     * @param {Function} pred A predicate to determine whether or not a key\n     *        should be included on the output object.\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with only properties that satisfy `pred`\n     *         on it.\n     * @see R.pick, R.filter\n     * @example\n     *\n     *      var isUpperCase = (val, key) => key.toUpperCase() === key;\n     *      R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n     */\n    var pickBy = _curry2(function pickBy(test, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (test(obj[prop], prop, obj)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list with the given element at the front, followed by the\n     * contents of the list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> [a]\n     * @param {*} el The item to add to the head of the output list.\n     * @param {Array} list The array to add to the tail of the output list.\n     * @return {Array} A new array.\n     * @see R.append\n     * @example\n     *\n     *      R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n     */\n    var prepend = _curry2(function prepend(el, list) {\n        return _concat([el], list);\n    });\n\n    /**\n     * Returns a function that when supplied an object returns the indicated\n     * property of that object, if it exists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig s -> {s: a} -> a | Undefined\n     * @param {String} p The property name\n     * @param {Object} obj The object to query\n     * @return {*} The value at `obj.p`.\n     * @see R.path\n     * @example\n     *\n     *      R.prop('x', {x: 100}); //=> 100\n     *      R.prop('x', {}); //=> undefined\n     */\n    var prop = _curry2(function prop(p, obj) {\n        return obj[p];\n    });\n\n    /**\n     * Returns `true` if the specified object property is of the given type;\n     * `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Type\n     * @sig Type -> String -> Object -> Boolean\n     * @param {Function} type\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.is, R.propSatisfies\n     * @example\n     *\n     *      R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n     *      R.propIs(Number, 'x', {x: 'foo'});    //=> false\n     *      R.propIs(Number, 'x', {});            //=> false\n     */\n    var propIs = _curry3(function propIs(type, name, obj) {\n        return is(type, obj[name]);\n    });\n\n    /**\n     * If the given, non-null object has an own property with the specified name,\n     * returns the value of that property. Otherwise returns the provided default\n     * value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Object\n     * @sig a -> String -> Object -> a\n     * @param {*} val The default value.\n     * @param {String} p The name of the property to return.\n     * @param {Object} obj The object to query.\n     * @return {*} The value of given property of the supplied object or the default value.\n     * @example\n     *\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var favorite = R.prop('favoriteLibrary');\n     *      var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n     *\n     *      favorite(alice);  //=> undefined\n     *      favoriteWithDefault(alice);  //=> 'Ramda'\n     */\n    var propOr = _curry3(function propOr(val, p, obj) {\n        return obj != null && _has(p, obj) ? obj[p] : val;\n    });\n\n    /**\n     * Returns `true` if the specified object property satisfies the given\n     * predicate; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Logic\n     * @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n     * @param {Function} pred\n     * @param {String} name\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.propEq, R.propIs\n     * @example\n     *\n     *      R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n     */\n    var propSatisfies = _curry3(function propSatisfies(pred, name, obj) {\n        return pred(obj[name]);\n    });\n\n    /**\n     * Acts as multiple `prop`: array of keys in, array of values out. Preserves\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [k] -> {k: v} -> [v]\n     * @param {Array} ps The property names to fetch\n     * @param {Object} obj The object to query\n     * @return {Array} The corresponding values or partially applied function.\n     * @example\n     *\n     *      R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n     *      R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n     *\n     *      var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n     *      fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n     */\n    var props = _curry2(function props(ps, obj) {\n        var len = ps.length;\n        var out = [];\n        var idx = 0;\n        while (idx < len) {\n            out[idx] = obj[ps[idx]];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> Number -> [Number]\n     * @param {Number} from The first number in the list.\n     * @param {Number} to One more than the last number in the list.\n     * @return {Array} The list of numbers in tthe set `[a, b)`.\n     * @example\n     *\n     *      R.range(1, 5);    //=> [1, 2, 3, 4]\n     *      R.range(50, 53);  //=> [50, 51, 52]\n     */\n    var range = _curry2(function range(from, to) {\n        if (!(_isNumber(from) && _isNumber(to))) {\n            throw new TypeError('Both arguments to range must be numbers');\n        }\n        var result = [];\n        var n = from;\n        while (n < to) {\n            result.push(n);\n            n += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * Similar to `reduce`, except moves through the input list from the right to\n     * the left.\n     *\n     * The iterator function receives two values: *(acc, value)*\n     *\n     * Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.addIndex\n     * @example\n     *\n     *      var pairs = [ ['a', 1], ['b', 2], ['c', 3] ];\n     *      var flattenPairs = (acc, pair) => acc.concat(pair);\n     *\n     *      R.reduceRight(flattenPairs, [], pairs); //=> [ 'c', 3, 'b', 2, 'a', 1 ]\n     */\n    var reduceRight = _curry3(function reduceRight(fn, acc, list) {\n        var idx = list.length - 1;\n        while (idx >= 0) {\n            acc = fn(acc, list[idx]);\n            idx -= 1;\n        }\n        return acc;\n    });\n\n    /**\n     * Returns a value wrapped to indicate that it is the final value of the reduce\n     * and transduce functions. The returned value should be considered a black\n     * box: the internal structure is not guaranteed to be stable.\n     *\n     * Note: this optimization is unavailable to functions not explicitly listed\n     * above. For instance, it is not currently supported by reduceRight.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category List\n     * @sig a -> *\n     * @param {*} x The final value of the reduce.\n     * @return {*} The wrapped value.\n     * @see R.reduce, R.transduce\n     * @example\n     *\n     *      R.reduce(\n     *        R.pipe(R.add, R.when(R.gte(R.__, 10), R.reduced)),\n     *        0,\n     *        [1, 2, 3, 4, 5]) // 10\n     */\n    var reduced = _curry1(_reduced);\n\n    /**\n     * Removes the sub-list of `list` starting at index `start` and containing\n     * `count` elements. _Note that this is not destructive_: it returns a copy of\n     * the list with the changes.\n     * <small>No lists have been harmed in the application of this function.</small>\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.2\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @param {Number} start The position to start removing elements\n     * @param {Number} count The number of elements to remove\n     * @param {Array} list The list to remove from\n     * @return {Array} A new Array with `count` elements from `start` removed.\n     * @example\n     *\n     *      R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n     */\n    var remove = _curry3(function remove(start, count, list) {\n        return _concat(_slice(list, 0, Math.min(start, list.length)), _slice(list, Math.min(list.length, start + count)));\n    });\n\n    /**\n     * Replace a substring or regex match in a string with a replacement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category String\n     * @sig RegExp|String -> String -> String -> String\n     * @param {RegExp|String} pattern A regular expression or a substring to match.\n     * @param {String} replacement The string to replace the matches with.\n     * @param {String} str The String to do the search and replacement in.\n     * @return {String} The result.\n     * @example\n     *\n     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n     *\n     *      // Use the \"g\" (global) flag to replace all occurrences:\n     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n     */\n    var replace = _curry3(function replace(regex, replacement, str) {\n        return str.replace(regex, replacement);\n    });\n\n    /**\n     * Returns a new list or string with the elements or characters in reverse\n     * order.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {Array|String}\n     * @example\n     *\n     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n     *      R.reverse([1, 2]);     //=> [2, 1]\n     *      R.reverse([1]);        //=> [1]\n     *      R.reverse([]);         //=> []\n     *\n     *      R.reverse('abc');      //=> 'cba'\n     *      R.reverse('ab');       //=> 'ba'\n     *      R.reverse('a');        //=> 'a'\n     *      R.reverse('');         //=> ''\n     */\n    var reverse = _curry1(function reverse(list) {\n        return _isString(list) ? list.split('').reverse().join('') : _slice(list).reverse();\n    });\n\n    /**\n     * Scan is similar to reduce, but returns a list of successively reduced values\n     * from the left\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a,b -> a) -> a -> [b] -> [a]\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {Array} A list of all intermediately reduced values.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n     */\n    var scan = _curry3(function scan(fn, acc, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [acc];\n        while (idx < len) {\n            acc = fn(acc, list[idx]);\n            result[idx + 1] = acc;\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns the result of \"setting\" the portion of the given data structure\n     * focused by the given lens to the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> a -> s -> s\n     * @param {Lens} lens\n     * @param {*} v\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n     *      R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n     */\n    var set = _curry3(function set(lens, v, x) {\n        return over(lens, always(v), x);\n    });\n\n    /**\n     * Returns the elements of the given list or string (or object with a `slice`\n     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n     *\n     * Dispatches to the `slice` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Number -> Number -> [a] -> [a]\n     * @sig Number -> Number -> String -> String\n     * @param {Number} fromIndex The start index (inclusive).\n     * @param {Number} toIndex The end index (exclusive).\n     * @param {*} list\n     * @return {*}\n     * @example\n     *\n     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n     *      R.slice(0, 3, 'ramda');                     //=> 'ram'\n     */\n    var slice = _curry3(_checkForMethod('slice', function slice(fromIndex, toIndex, list) {\n        return Array.prototype.slice.call(list, fromIndex, toIndex);\n    }));\n\n    /**\n     * Returns a copy of the list, sorted according to the comparator function,\n     * which should accept two values at a time and return a negative number if the\n     * first value is smaller, a positive number if it's larger, and zero if they\n     * are equal. Please note that this is a **copy** of the list. It does not\n     * modify the original.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,a -> Number) -> [a] -> [a]\n     * @param {Function} comparator A sorting function :: a -> b -> Int\n     * @param {Array} list The list to sort\n     * @return {Array} a new array with its elements sorted by the comparator function.\n     * @example\n     *\n     *      var diff = function(a, b) { return a - b; };\n     *      R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n     */\n    var sort = _curry2(function sort(comparator, list) {\n        return _slice(list).sort(comparator);\n    });\n\n    /**\n     * Sorts the list according to the supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig Ord b => (a -> b) -> [a] -> [a]\n     * @param {Function} fn\n     * @param {Array} list The list to sort.\n     * @return {Array} A new list sorted by the keys generated by `fn`.\n     * @example\n     *\n     *      var sortByFirstItem = R.sortBy(R.prop(0));\n     *      var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n     *      var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n     *      sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n     *      var alice = {\n     *        name: 'ALICE',\n     *        age: 101\n     *      };\n     *      var bob = {\n     *        name: 'Bob',\n     *        age: -10\n     *      };\n     *      var clara = {\n     *        name: 'clara',\n     *        age: 314.159\n     *      };\n     *      var people = [clara, bob, alice];\n     *      sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n     */\n    var sortBy = _curry2(function sortBy(fn, list) {\n        return _slice(list).sort(function (a, b) {\n            var aa = fn(a);\n            var bb = fn(b);\n            return aa < bb ? -1 : aa > bb ? 1 : 0;\n        });\n    });\n\n    /**\n     * Splits a given list or string at a given index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig Number -> [a] -> [[a], [a]]\n     * @sig Number -> String -> [String, String]\n     * @param {Number} index The index where the array/string is split.\n     * @param {Array|String} array The array/string to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n     *      R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n     *      R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n     */\n    var splitAt = _curry2(function splitAt(index, array) {\n        return [\n            slice(0, index, array),\n            slice(index, length(array), array)\n        ];\n    });\n\n    /**\n     * Splits a collection into slices of the specified length.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [[a]]\n     * @sig Number -> String -> [String]\n     * @param {Number} n\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n     *      R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n     */\n    var splitEvery = _curry2(function splitEvery(n, list) {\n        if (n <= 0) {\n            throw new Error('First argument to splitEvery must be a positive integer');\n        }\n        var result = [];\n        var idx = 0;\n        while (idx < list.length) {\n            result.push(slice(idx, idx += n, list));\n        }\n        return result;\n    });\n\n    /**\n     * Takes a list and a predicate and returns a pair of lists with the following properties:\n     *\n     *  - the result of concatenating the two output lists is equivalent to the input list;\n     *  - none of the elements of the first output list satisfies the predicate; and\n     *  - if the second output list is non-empty, its first element satisfies the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [[a], [a]]\n     * @param {Function} pred The predicate that determines where the array is split.\n     * @param {Array} list The array to be split.\n     * @return {Array}\n     * @example\n     *\n     *      R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n     */\n    var splitWhen = _curry2(function splitWhen(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var prefix = [];\n        while (idx < len && !pred(list[idx])) {\n            prefix.push(list[idx]);\n            idx += 1;\n        }\n        return [\n            prefix,\n            _slice(list, idx)\n        ];\n    });\n\n    /**\n     * Subtracts its second argument from its first argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig Number -> Number -> Number\n     * @param {Number} a The first value.\n     * @param {Number} b The second value.\n     * @return {Number} The result of `a - b`.\n     * @see R.add\n     * @example\n     *\n     *      R.subtract(10, 8); //=> 2\n     *\n     *      var minus5 = R.subtract(R.__, 5);\n     *      minus5(17); //=> 12\n     *\n     *      var complementaryAngle = R.subtract(90);\n     *      complementaryAngle(30); //=> 60\n     *      complementaryAngle(72); //=> 18\n     */\n    var subtract = _curry2(function subtract(a, b) {\n        return Number(a) - Number(b);\n    });\n\n    /**\n     * Returns all but the first element of the given list or string (or object\n     * with a `tail` method).\n     *\n     * Dispatches to the `slice` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.head, R.init, R.last\n     * @example\n     *\n     *      R.tail([1, 2, 3]);  //=> [2, 3]\n     *      R.tail([1, 2]);     //=> [2]\n     *      R.tail([1]);        //=> []\n     *      R.tail([]);         //=> []\n     *\n     *      R.tail('abc');  //=> 'bc'\n     *      R.tail('ab');   //=> 'b'\n     *      R.tail('a');    //=> ''\n     *      R.tail('');     //=> ''\n     */\n    var tail = _checkForMethod('tail', slice(1, Infinity));\n\n    /**\n     * Returns the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `take` method).\n     *\n     * Dispatches to the `take` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.drop\n     * @example\n     *\n     *      R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.take(3, 'ramda');               //=> 'ram'\n     *\n     *      var personnel = [\n     *        'Dave Brubeck',\n     *        'Paul Desmond',\n     *        'Eugene Wright',\n     *        'Joe Morello',\n     *        'Gerry Mulligan',\n     *        'Bob Bates',\n     *        'Joe Dodge',\n     *        'Ron Crotty'\n     *      ];\n     *\n     *      var takeFive = R.take(5);\n     *      takeFive(personnel);\n     *      //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n     */\n    var take = _curry2(_dispatchable('take', _xtake, function take(n, xs) {\n        return slice(0, n < 0 ? Infinity : n, xs);\n    }));\n\n    /**\n     * Returns a new list containing the last `n` elements of a given list, passing\n     * each value to the supplied predicate function, and terminating when the\n     * predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropLastWhile, R.addIndex\n     * @example\n     *\n     *      var isNotOne = x => x !== 1;\n     *\n     *      R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n     */\n    var takeLastWhile = _curry2(function takeLastWhile(fn, list) {\n        var idx = list.length - 1;\n        while (idx >= 0 && fn(list[idx])) {\n            idx -= 1;\n        }\n        return _slice(list, idx + 1, Infinity);\n    });\n\n    /**\n     * Returns a new list containing the first `n` elements of a given list,\n     * passing each value to the supplied predicate function, and terminating when\n     * the predicate function returns `false`. Excludes the element that caused the\n     * predicate function to fail. The predicate function is passed one argument:\n     * *(value)*.\n     *\n     * Dispatches to the `takeWhile` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.dropWhile, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isNotFour = x => x !== 4;\n     *\n     *      R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n     */\n    var takeWhile = _curry2(_dispatchable('takeWhile', _xtakeWhile, function takeWhile(fn, list) {\n        var idx = 0;\n        var len = list.length;\n        while (idx < len && fn(list[idx])) {\n            idx += 1;\n        }\n        return _slice(list, 0, idx);\n    }));\n\n    /**\n     * Runs the given function with the supplied object, then returns the object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> *) -> a -> a\n     * @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n     * @param {*} x\n     * @return {*} `x`.\n     * @example\n     *\n     *      var sayX = x => console.log('x is ' + x);\n     *      R.tap(sayX, 100); //=> 100\n     *      // logs 'x is 100'\n     */\n    var tap = _curry2(function tap(fn, x) {\n        fn(x);\n        return x;\n    });\n\n    /**\n     * Calls an input function `n` times, returning an array containing the results\n     * of those function calls.\n     *\n     * `fn` is passed one argument: The current value of `n`, which begins at `0`\n     * and is gradually incremented to `n - 1`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.3\n     * @category List\n     * @sig (Number -> a) -> Number -> [a]\n     * @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n     * @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n     * @return {Array} An array containing the return values of all calls to `fn`.\n     * @example\n     *\n     *      R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n     */\n    var times = _curry2(function times(fn, n) {\n        var len = Number(n);\n        var idx = 0;\n        var list;\n        if (len < 0 || isNaN(len)) {\n            throw new RangeError('n must be a non-negative number');\n        }\n        list = new Array(len);\n        while (idx < len) {\n            list[idx] = fn(idx);\n            idx += 1;\n        }\n        return list;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. Only the object's\n     * own properties are used.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own properties.\n     * @see R.fromPairs\n     * @example\n     *\n     *      R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n     */\n    var toPairs = _curry1(function toPairs(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            if (_has(prop, obj)) {\n                pairs[pairs.length] = [\n                    prop,\n                    obj[prop]\n                ];\n            }\n        }\n        return pairs;\n    });\n\n    /**\n     * Converts an object into an array of key, value arrays. The object's own\n     * properties and prototype properties are used. Note that the order of the\n     * output array is not guaranteed to be consistent across different JS\n     * platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Object\n     * @sig {String: *} -> [[String,*]]\n     * @param {Object} obj The object to extract from\n     * @return {Array} An array of key, value arrays from the object's own\n     *         and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n     */\n    var toPairsIn = _curry1(function toPairsIn(obj) {\n        var pairs = [];\n        for (var prop in obj) {\n            pairs[pairs.length] = [\n                prop,\n                obj[prop]\n            ];\n        }\n        return pairs;\n    });\n\n    /**\n     * Transposes the rows and columns of a 2D list.\n     * When passed a list of `n` lists of length `x`,\n     * returns a list of `x` lists of length `n`.\n     *\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [[a]] -> [[a]]\n     * @param {Array} list A 2D list\n     * @return {Array} A 2D list\n     * @example\n     *\n     *      R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n     *      R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     *\n     * If some of the rows are shorter than the following rows, their elements are skipped:\n     *\n     *      R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n     */\n    var transpose = _curry1(function transpose(outerlist) {\n        var i = 0;\n        var result = [];\n        while (i < outerlist.length) {\n            var innerlist = outerlist[i];\n            var j = 0;\n            while (j < innerlist.length) {\n                if (typeof result[j] === 'undefined') {\n                    result[j] = [];\n                }\n                result[j].push(innerlist[j]);\n                j += 1;\n            }\n            i += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Removes (strips) whitespace from both ends of the string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to trim.\n     * @return {String} Trimmed version of `str`.\n     * @example\n     *\n     *      R.trim('   xyz  '); //=> 'xyz'\n     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n     */\n    var trim = function () {\n        var ws = '\\t\\n\\x0B\\f\\r \\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' + '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' + '\\u2029\\uFEFF';\n        var zeroWidth = '\\u200B';\n        var hasProtoTrim = typeof String.prototype.trim === 'function';\n        if (!hasProtoTrim || (ws.trim() || !zeroWidth.trim())) {\n            return _curry1(function trim(str) {\n                var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');\n                var endRx = new RegExp('[' + ws + '][' + ws + ']*$');\n                return str.replace(beginRx, '').replace(endRx, '');\n            });\n        } else {\n            return _curry1(function trim(str) {\n                return str.trim();\n            });\n        }\n    }();\n\n    /**\n     * `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n     * function evaluates the `tryer`; if it does not throw, it simply returns the\n     * result. If the `tryer` *does* throw, the returned function evaluates the\n     * `catcher` function and returns its result. Note that for effective\n     * composition with this function, both the `tryer` and `catcher` functions\n     * must return the same type of results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n     * @param {Function} tryer The function that may throw.\n     * @param {Function} catcher The function that will be evaluated if `tryer` throws.\n     * @return {Function} A new function that will catch exceptions and send then to the catcher.\n     * @example\n     *\n     *      R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n     *      R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n     */\n    var tryCatch = _curry2(function _tryCatch(tryer, catcher) {\n        return _arity(tryer.length, function () {\n            try {\n                return tryer.apply(this, arguments);\n            } catch (e) {\n                return catcher.apply(this, _concat([e], arguments));\n            }\n        });\n    });\n\n    /**\n     * Gives a single-word string description of the (native) type of a value,\n     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n     * attempt to distinguish user Object types any further, reporting them all as\n     * 'Object'.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Type\n     * @sig (* -> {*}) -> String\n     * @param {*} val The value to test\n     * @return {String}\n     * @example\n     *\n     *      R.type({}); //=> \"Object\"\n     *      R.type(1); //=> \"Number\"\n     *      R.type(false); //=> \"Boolean\"\n     *      R.type('s'); //=> \"String\"\n     *      R.type(null); //=> \"Null\"\n     *      R.type([]); //=> \"Array\"\n     *      R.type(/[A-z]/); //=> \"RegExp\"\n     */\n    var type = _curry1(function type(val) {\n        return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);\n    });\n\n    /**\n     * Takes a function `fn`, which takes a single array argument, and returns a\n     * function which:\n     *\n     *   - takes any number of positional arguments;\n     *   - passes these arguments to `fn` as an array; and\n     *   - returns the result.\n     *\n     * In other words, R.unapply derives a variadic function from a function which\n     * takes an array. R.unapply is the inverse of R.apply.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Function\n     * @sig ([*...] -> a) -> (*... -> a)\n     * @param {Function} fn\n     * @return {Function}\n     * @see R.apply\n     * @example\n     *\n     *      R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n     */\n    var unapply = _curry1(function unapply(fn) {\n        return function () {\n            return fn(_slice(arguments));\n        };\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 1 parameter. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> b) -> (a -> b)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 1.\n     * @example\n     *\n     *      var takesTwoArgs = function(a, b) {\n     *        return [a, b];\n     *      };\n     *      takesTwoArgs.length; //=> 2\n     *      takesTwoArgs(1, 2); //=> [1, 2]\n     *\n     *      var takesOneArg = R.unary(takesTwoArgs);\n     *      takesOneArg.length; //=> 1\n     *      // Only 1 argument is passed to the wrapped function\n     *      takesOneArg(1, 2); //=> [1, undefined]\n     */\n    var unary = _curry1(function unary(fn) {\n        return nAry(1, fn);\n    });\n\n    /**\n     * Returns a function of arity `n` from a (manually) curried function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Function\n     * @sig Number -> (a -> b) -> (a -> c)\n     * @param {Number} length The arity for the returned function.\n     * @param {Function} fn The function to uncurry.\n     * @return {Function} A new function.\n     * @see R.curry\n     * @example\n     *\n     *      var addFour = a => b => c => d => a + b + c + d;\n     *\n     *      var uncurriedAddFour = R.uncurryN(4, addFour);\n     *      uncurriedAddFour(1, 2, 3, 4); //=> 10\n     */\n    var uncurryN = _curry2(function uncurryN(depth, fn) {\n        return curryN(depth, function () {\n            var currentDepth = 1;\n            var value = fn;\n            var idx = 0;\n            var endIdx;\n            while (currentDepth <= depth && typeof value === 'function') {\n                endIdx = currentDepth === depth ? arguments.length : idx + value.length;\n                value = value.apply(this, _slice(arguments, idx, endIdx));\n                currentDepth += 1;\n                idx = endIdx;\n            }\n            return value;\n        });\n    });\n\n    /**\n     * Builds a list from a seed value. Accepts an iterator function, which returns\n     * either false to stop iteration or an array of length 2 containing the value\n     * to add to the resulting list and the seed to be used in the next call to the\n     * iterator function.\n     *\n     * The iterator function receives one argument: *(seed)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category List\n     * @sig (a -> [b]) -> * -> [b]\n     * @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n     *        either false to quit iteration or an array of length two to proceed. The element\n     *        at index 0 of this array will be added to the resulting array, and the element\n     *        at index 1 will be passed to the next call to `fn`.\n     * @param {*} seed The seed value.\n     * @return {Array} The final list.\n     * @example\n     *\n     *      var f = n => n > 50 ? false : [-n, n + 10];\n     *      R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n     */\n    var unfold = _curry2(function unfold(fn, seed) {\n        var pair = fn(seed);\n        var result = [];\n        while (pair && pair.length) {\n            result[result.length] = pair[0];\n            pair = fn(pair[1]);\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied predicate to\n     * two list elements. Prefers the first item if two items compare equal based\n     * on the predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      var strEq = R.eqBy(String);\n     *      R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n     *      R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n     *      R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n     *      R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n     */\n    var uniqWith = _curry2(function uniqWith(pred, list) {\n        var idx = 0;\n        var len = list.length;\n        var result = [];\n        var item;\n        while (idx < len) {\n            item = list[idx];\n            if (!_containsWith(pred, item, result)) {\n                result[result.length] = item;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is not satisfied, the function will return the result of\n     * calling the `whenFalseFn` function with the same argument. If the predicate\n     * is satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred        A predicate function\n     * @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n     *                               to a falsy value.\n     * @param {*}        x           An object to test with the `pred` function and\n     *                               pass to `whenFalseFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenFalseFn`.\n     * @see R.ifElse, R.when\n     * @example\n     *\n     *      // coerceArray :: (a|[a]) -> [a]\n     *      var coerceArray = R.unless(R.isArrayLike, R.of);\n     *      coerceArray([1, 2, 3]); //=> [1, 2, 3]\n     *      coerceArray(1);         //=> [1]\n     */\n    var unless = _curry3(function unless(pred, whenFalseFn, x) {\n        return pred(x) ? x : whenFalseFn(x);\n    });\n\n    /**\n     * Takes a predicate, a transformation function, and an initial value,\n     * and returns a value of the same type as the initial value.\n     * It does so by applying the transformation until the predicate is satisfied,\n     * at which point it returns the satisfactory value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred A predicate function\n     * @param {Function} fn The iterator function\n     * @param {*} init Initial value\n     * @return {*} Final value that satisfies predicate\n     * @example\n     *\n     *      R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n     */\n    var until = _curry3(function until(pred, fn, init) {\n        var val = init;\n        while (!pred(val)) {\n            val = fn(val);\n        }\n        return val;\n    });\n\n    /**\n     * Returns a new copy of the array with the element at the provided index\n     * replaced with the given value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig Number -> a -> [a] -> [a]\n     * @param {Number} idx The index to update.\n     * @param {*} x The value to exist at the given index of the returned array.\n     * @param {Array|Arguments} list The source array-like object to be updated.\n     * @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n     * @see R.adjust\n     * @example\n     *\n     *      R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n     *      R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n     */\n    var update = _curry3(function update(idx, x, list) {\n        return adjust(always(x), idx, list);\n    });\n\n    /**\n     * Accepts a function `fn` and a list of transformer functions and returns a\n     * new curried function. When the new function is invoked, it calls the\n     * function `fn` with parameters consisting of the result of calling each\n     * supplied handler on successive arguments to the new function.\n     *\n     * If more arguments are passed to the returned function than transformer\n     * functions, those arguments are passed directly to `fn` as additional\n     * parameters. If you expect additional arguments that don't need to be\n     * transformed, although you can ignore them, it's best to pass an identity\n     * function so that the new function reports the correct arity.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} fn The function to wrap.\n     * @param {Array} transformers A list of transformer functions\n     * @return {Function} The wrapped function.\n     * @example\n     *\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n     */\n    var useWith = _curry2(function useWith(fn, transformers) {\n        return curryN(transformers.length, function () {\n            var args = [];\n            var idx = 0;\n            while (idx < transformers.length) {\n                args.push(transformers[idx].call(this, arguments[idx]));\n                idx += 1;\n            }\n            return fn.apply(this, args.concat(_slice(arguments, transformers.length)));\n        });\n    });\n\n    /**\n     * Returns a list of all the enumerable own properties of the supplied object.\n     * Note that the order of the output array is not guaranteed across different\n     * JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own properties.\n     * @example\n     *\n     *      R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n     */\n    var values = _curry1(function values(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var vals = [];\n        var idx = 0;\n        while (idx < len) {\n            vals[idx] = obj[props[idx]];\n            idx += 1;\n        }\n        return vals;\n    });\n\n    /**\n     * Returns a list of all the properties, including prototype properties, of the\n     * supplied object.\n     * Note that the order of the output array is not guaranteed to be consistent\n     * across different JS platforms.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Object\n     * @sig {k: v} -> [v]\n     * @param {Object} obj The object to extract values from\n     * @return {Array} An array of the values of the object's own and prototype properties.\n     * @example\n     *\n     *      var F = function() { this.x = 'X'; };\n     *      F.prototype.y = 'Y';\n     *      var f = new F();\n     *      R.valuesIn(f); //=> ['X', 'Y']\n     */\n    var valuesIn = _curry1(function valuesIn(obj) {\n        var prop;\n        var vs = [];\n        for (prop in obj) {\n            vs[vs.length] = obj[prop];\n        }\n        return vs;\n    });\n\n    /**\n     * Returns a \"view\" of the given data structure, determined by the given lens.\n     * The lens's focus determines which portion of the data structure is visible.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Lens s a -> s -> a\n     * @param {Lens} lens\n     * @param {*} x\n     * @return {*}\n     * @see R.prop, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});  //=> 1\n     *      R.view(xLens, {x: 4, y: 2});  //=> 4\n     */\n    // `Const` is a functor that effectively ignores the function given to `map`.\n    // Using `Const` effectively ignores the setter function of the `lens`,\n    // leaving the value returned by the getter function unmodified.\n    var view = function () {\n        // `Const` is a functor that effectively ignores the function given to `map`.\n        var Const = function (x) {\n            return {\n                value: x,\n                map: function () {\n                    return this;\n                }\n            };\n        };\n        return _curry2(function view(lens, x) {\n            // Using `Const` effectively ignores the setter function of the `lens`,\n            // leaving the value returned by the getter function unmodified.\n            return lens(Const)(x).value;\n        });\n    }();\n\n    /**\n     * Tests the final argument by passing it to the given predicate function. If\n     * the predicate is satisfied, the function will return the result of calling\n     * the `whenTrueFn` function with the same argument. If the predicate is not\n     * satisfied, the argument is returned as is.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Logic\n     * @sig (a -> Boolean) -> (a -> a) -> a -> a\n     * @param {Function} pred       A predicate function\n     * @param {Function} whenTrueFn A function to invoke when the `condition`\n     *                              evaluates to a truthy value.\n     * @param {*}        x          An object to test with the `pred` function and\n     *                              pass to `whenTrueFn` if necessary.\n     * @return {*} Either `x` or the result of applying `x` to `whenTrueFn`.\n     * @see R.ifElse, R.unless\n     * @example\n     *\n     *      // truncate :: String -> String\n     *      var truncate = R.when(\n     *        R.propSatisfies(R.gt(R.__, 10), 'length'),\n     *        R.pipe(R.take(10), R.append('…'), R.join(''))\n     *      );\n     *      truncate('12345');         //=> '12345'\n     *      truncate('0123456789ABC'); //=> '0123456789…'\n     */\n    var when = _curry3(function when(pred, whenTrueFn, x) {\n        return pred(x) ? whenTrueFn(x) : x;\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec. Each of the spec's own properties must be a predicate function.\n     * Each predicate is applied to the value of the corresponding property of the\n     * test object. `where` returns true if all the predicates return true, false\n     * otherwise.\n     *\n     * `where` is well suited to declaratively expressing constraints for other\n     * functions such as `filter` and `find`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category Object\n     * @sig {String: (* -> Boolean)} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = where({\n     *        a: equals('foo'),\n     *        b: complement(equals('bar')),\n     *        x: gt(__, 10),\n     *        y: lt(__, 20)\n     *      });\n     *\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n     *      pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n     *      pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n     */\n    var where = _curry2(function where(spec, testObj) {\n        for (var prop in spec) {\n            if (_has(prop, spec) && !spec[prop](testObj[prop])) {\n                return false;\n            }\n        }\n        return true;\n    });\n\n    /**\n     * Wrap a function inside another to allow you to make adjustments to the\n     * parameters, or do other processing either before the internal function is\n     * called or with its results.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a... -> b) -> ((a... -> b) -> a... -> c) -> (a... -> c)\n     * @param {Function} fn The function to wrap.\n     * @param {Function} wrapper The wrapper function.\n     * @return {Function} The wrapped function.\n     * @deprecated since v0.22.0\n     * @example\n     *\n     *      var greet = name => 'Hello ' + name;\n     *\n     *      var shoutedGreet = R.wrap(greet, (gr, name) => gr(name).toUpperCase());\n     *\n     *      shoutedGreet(\"Kathy\"); //=> \"HELLO KATHY\"\n     *\n     *      var shortenedGreet = R.wrap(greet, function(gr, name) {\n     *        return gr(name.substring(0, 3));\n     *      });\n     *      shortenedGreet(\"Robert\"); //=> \"Hello Rob\"\n     */\n    var wrap = _curry2(function wrap(fn, wrapper) {\n        return curryN(fn.length, function () {\n            return wrapper.apply(this, _concat([fn], arguments));\n        });\n    });\n\n    /**\n     * Creates a new list out of the two supplied by creating each possible pair\n     * from the lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The list made by combining each possible pair from\n     *         `as` and `bs` into pairs (`[a, b]`).\n     * @example\n     *\n     *      R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n     */\n    // = xprodWith(prepend); (takes about 3 times as long...)\n    var xprod = _curry2(function xprod(a, b) {\n        // = xprodWith(prepend); (takes about 3 times as long...)\n        var idx = 0;\n        var ilen = a.length;\n        var j;\n        var jlen = b.length;\n        var result = [];\n        while (idx < ilen) {\n            j = 0;\n            while (j < jlen) {\n                result[result.length] = [\n                    a[idx],\n                    b[j]\n                ];\n                j += 1;\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by pairing up equally-positioned\n     * items from both lists. The returned list is truncated to the length of the\n     * shorter of the two input lists.\n     * Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b] -> [[a,b]]\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n     * @example\n     *\n     *      R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n     */\n    var zip = _curry2(function zip(a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = [\n                a[idx],\n                b[idx]\n            ];\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * Creates a new object out of a list of keys and a list of values.\n     * Key/value pairing is truncated to the length of the shorter of the two lists.\n     * Note: `zipObj` is equivalent to `pipe(zipWith(pair), fromPairs)`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig [String] -> [*] -> {String: *}\n     * @param {Array} keys The array that will be properties on the output object.\n     * @param {Array} values The list of values on the output object.\n     * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n     * @example\n     *\n     *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n     */\n    var zipObj = _curry2(function zipObj(keys, values) {\n        var idx = 0;\n        var len = Math.min(keys.length, values.length);\n        var out = {};\n        while (idx < len) {\n            out[keys[idx]] = values[idx];\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Creates a new list out of the two supplied by applying the function to each\n     * equally-positioned pair in the lists. The returned list is truncated to the\n     * length of the shorter of the two input lists.\n     *\n     * @function\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a,b -> c) -> [a] -> [b] -> [c]\n     * @param {Function} fn The function used to combine the two elements into one value.\n     * @param {Array} list1 The first array to consider.\n     * @param {Array} list2 The second array to consider.\n     * @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n     *         using `fn`.\n     * @example\n     *\n     *      var f = (x, y) => {\n     *        // ...\n     *      };\n     *      R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n     *      //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n     */\n    var zipWith = _curry3(function zipWith(fn, a, b) {\n        var rv = [];\n        var idx = 0;\n        var len = Math.min(a.length, b.length);\n        while (idx < len) {\n            rv[idx] = fn(a[idx], b[idx]);\n            idx += 1;\n        }\n        return rv;\n    });\n\n    /**\n     * A function that always returns `false`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.T\n     * @example\n     *\n     *      R.F(); //=> false\n     */\n    var F = always(false);\n\n    /**\n     * A function that always returns `true`. Any passed in parameters are ignored.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig * -> Boolean\n     * @param {*}\n     * @return {Boolean}\n     * @see R.always, R.F\n     * @example\n     *\n     *      R.T(); //=> true\n     */\n    var T = always(true);\n\n    /**\n     * Copies an object.\n     *\n     * @private\n     * @param {*} value The value to be copied\n     * @param {Array} refFrom Array containing the source references\n     * @param {Array} refTo Array containing the copied source references\n     * @param {Boolean} deep Whether or not to perform deep cloning.\n     * @return {*} The copied value.\n     */\n    var _clone = function _clone(value, refFrom, refTo, deep) {\n        var copy = function copy(copiedValue) {\n            var len = refFrom.length;\n            var idx = 0;\n            while (idx < len) {\n                if (value === refFrom[idx]) {\n                    return refTo[idx];\n                }\n                idx += 1;\n            }\n            refFrom[idx + 1] = value;\n            refTo[idx + 1] = copiedValue;\n            for (var key in value) {\n                copiedValue[key] = deep ? _clone(value[key], refFrom, refTo, true) : value[key];\n            }\n            return copiedValue;\n        };\n        switch (type(value)) {\n        case 'Object':\n            return copy({});\n        case 'Array':\n            return copy([]);\n        case 'Date':\n            return new Date(value.valueOf());\n        case 'RegExp':\n            return _cloneRegExp(value);\n        default:\n            return value;\n        }\n    };\n\n    var _createPartialApplicator = function _createPartialApplicator(concat) {\n        return _curry2(function (fn, args) {\n            return _arity(Math.max(0, fn.length - args.length), function () {\n                return fn.apply(this, concat(args, arguments));\n            });\n        });\n    };\n\n    var _dropLast = function dropLast(n, xs) {\n        return take(n < xs.length ? xs.length - n : 0, xs);\n    };\n\n    // Values of other types are only equal if identical.\n    var _equals = function _equals(a, b, stackA, stackB) {\n        if (identical(a, b)) {\n            return true;\n        }\n        if (type(a) !== type(b)) {\n            return false;\n        }\n        if (a == null || b == null) {\n            return false;\n        }\n        if (typeof a.equals === 'function' || typeof b.equals === 'function') {\n            return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);\n        }\n        switch (type(a)) {\n        case 'Arguments':\n        case 'Array':\n        case 'Object':\n            if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {\n                return a === b;\n            }\n            break;\n        case 'Boolean':\n        case 'Number':\n        case 'String':\n            if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {\n                return false;\n            }\n            break;\n        case 'Date':\n            if (!identical(a.valueOf(), b.valueOf())) {\n                return false;\n            }\n            break;\n        case 'Error':\n            return a.name === b.name && a.message === b.message;\n        case 'RegExp':\n            if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {\n                return false;\n            }\n            break;\n        case 'Map':\n        case 'Set':\n            if (!_equals(_arrayFromIterator(a.entries()), _arrayFromIterator(b.entries()), stackA, stackB)) {\n                return false;\n            }\n            break;\n        case 'Int8Array':\n        case 'Uint8Array':\n        case 'Uint8ClampedArray':\n        case 'Int16Array':\n        case 'Uint16Array':\n        case 'Int32Array':\n        case 'Uint32Array':\n        case 'Float32Array':\n        case 'Float64Array':\n            break;\n        case 'ArrayBuffer':\n            break;\n        default:\n            // Values of other types are only equal if identical.\n            return false;\n        }\n        var keysA = keys(a);\n        if (keysA.length !== keys(b).length) {\n            return false;\n        }\n        var idx = stackA.length - 1;\n        while (idx >= 0) {\n            if (stackA[idx] === a) {\n                return stackB[idx] === b;\n            }\n            idx -= 1;\n        }\n        stackA.push(a);\n        stackB.push(b);\n        idx = keysA.length - 1;\n        while (idx >= 0) {\n            var key = keysA[idx];\n            if (!(_has(key, b) && _equals(b[key], a[key], stackA, stackB))) {\n                return false;\n            }\n            idx -= 1;\n        }\n        stackA.pop();\n        stackB.pop();\n        return true;\n    };\n\n    /**\n     * `_makeFlat` is a helper function that returns a one-level or fully recursive\n     * function based on the flag passed in.\n     *\n     * @private\n     */\n    var _makeFlat = function _makeFlat(recursive) {\n        return function flatt(list) {\n            var value, jlen, j;\n            var result = [];\n            var idx = 0;\n            var ilen = list.length;\n            while (idx < ilen) {\n                if (isArrayLike(list[idx])) {\n                    value = recursive ? flatt(list[idx]) : list[idx];\n                    j = 0;\n                    jlen = value.length;\n                    while (j < jlen) {\n                        result[result.length] = value[j];\n                        j += 1;\n                    }\n                } else {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n            return result;\n        };\n    };\n\n    var _reduce = function () {\n        function _arrayReduce(xf, acc, list) {\n            var idx = 0;\n            var len = list.length;\n            while (idx < len) {\n                acc = xf['@@transducer/step'](acc, list[idx]);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                idx += 1;\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _iterableReduce(xf, acc, iter) {\n            var step = iter.next();\n            while (!step.done) {\n                acc = xf['@@transducer/step'](acc, step.value);\n                if (acc && acc['@@transducer/reduced']) {\n                    acc = acc['@@transducer/value'];\n                    break;\n                }\n                step = iter.next();\n            }\n            return xf['@@transducer/result'](acc);\n        }\n        function _methodReduce(xf, acc, obj) {\n            return xf['@@transducer/result'](obj.reduce(bind(xf['@@transducer/step'], xf), acc));\n        }\n        var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';\n        return function _reduce(fn, acc, list) {\n            if (typeof fn === 'function') {\n                fn = _xwrap(fn);\n            }\n            if (isArrayLike(list)) {\n                return _arrayReduce(fn, acc, list);\n            }\n            if (typeof list.reduce === 'function') {\n                return _methodReduce(fn, acc, list);\n            }\n            if (list[symIterator] != null) {\n                return _iterableReduce(fn, acc, list[symIterator]());\n            }\n            if (typeof list.next === 'function') {\n                return _iterableReduce(fn, acc, list);\n            }\n            throw new TypeError('reduce: list must be array or iterable');\n        };\n    }();\n\n    var _stepCat = function () {\n        var _stepCatArray = {\n            '@@transducer/init': Array,\n            '@@transducer/step': function (xs, x) {\n                xs.push(x);\n                return xs;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatString = {\n            '@@transducer/init': String,\n            '@@transducer/step': function (a, b) {\n                return a + b;\n            },\n            '@@transducer/result': _identity\n        };\n        var _stepCatObject = {\n            '@@transducer/init': Object,\n            '@@transducer/step': function (result, input) {\n                return _assign(result, isArrayLike(input) ? objOf(input[0], input[1]) : input);\n            },\n            '@@transducer/result': _identity\n        };\n        return function _stepCat(obj) {\n            if (_isTransformer(obj)) {\n                return obj;\n            }\n            if (isArrayLike(obj)) {\n                return _stepCatArray;\n            }\n            if (typeof obj === 'string') {\n                return _stepCatString;\n            }\n            if (typeof obj === 'object') {\n                return _stepCatObject;\n            }\n            throw new Error('Cannot create transformer for ' + obj);\n        };\n    }();\n\n    var _xdropLastWhile = function () {\n        function XDropLastWhile(fn, xf) {\n            this.f = fn;\n            this.retained = [];\n            this.xf = xf;\n        }\n        XDropLastWhile.prototype['@@transducer/init'] = _xfBase.init;\n        XDropLastWhile.prototype['@@transducer/result'] = function (result) {\n            this.retained = null;\n            return this.xf['@@transducer/result'](result);\n        };\n        XDropLastWhile.prototype['@@transducer/step'] = function (result, input) {\n            return this.f(input) ? this.retain(result, input) : this.flush(result, input);\n        };\n        XDropLastWhile.prototype.flush = function (result, input) {\n            result = _reduce(this.xf['@@transducer/step'], result, this.retained);\n            this.retained = [];\n            return this.xf['@@transducer/step'](result, input);\n        };\n        XDropLastWhile.prototype.retain = function (result, input) {\n            this.retained.push(input);\n            return result;\n        };\n        return _curry2(function _xdropLastWhile(fn, xf) {\n            return new XDropLastWhile(fn, xf);\n        });\n    }();\n\n    /**\n     * Creates a new list iteration function from an existing one by adding two new\n     * parameters to its callback function: the current index, and the entire list.\n     *\n     * This would turn, for instance, Ramda's simple `map` function into one that\n     * more closely resembles `Array.prototype.map`. Note that this will only work\n     * for functions in which the iteration callback function is the first\n     * parameter, and where the list is the last parameter. (This latter might be\n     * unimportant if the list parameter is not used.)\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Function\n     * @category List\n     * @sig ((a ... -> b) ... -> [a] -> *) -> (a ..., Int, [a] -> b) ... -> [a] -> *)\n     * @param {Function} fn A list iteration function that does not pass index or list to its callback\n     * @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n     * @example\n     *\n     *      var mapIndexed = R.addIndex(R.map);\n     *      mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n     *      //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n     */\n    var addIndex = _curry1(function addIndex(fn) {\n        return curryN(fn.length, function () {\n            var idx = 0;\n            var origFn = arguments[0];\n            var list = arguments[arguments.length - 1];\n            var args = _slice(arguments);\n            args[0] = function () {\n                var result = origFn.apply(this, _concat(arguments, [\n                    idx,\n                    list\n                ]));\n                idx += 1;\n                return result;\n            };\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Wraps a function of any arity (including nullary) in a function that accepts\n     * exactly 2 parameters. Any extraneous parameters will not be passed to the\n     * supplied function.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.2.0\n     * @category Function\n     * @sig (* -> c) -> (a, b -> c)\n     * @param {Function} fn The function to wrap.\n     * @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n     *         arity 2.\n     * @example\n     *\n     *      var takesThreeArgs = function(a, b, c) {\n     *        return [a, b, c];\n     *      };\n     *      takesThreeArgs.length; //=> 3\n     *      takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      var takesTwoArgs = R.binary(takesThreeArgs);\n     *      takesTwoArgs.length; //=> 2\n     *      // Only 2 arguments are passed to the wrapped function\n     *      takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n     */\n    var binary = _curry1(function binary(fn) {\n        return nAry(2, fn);\n    });\n\n    /**\n     * Creates a deep copy of the value which may contain (nested) `Array`s and\n     * `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are not\n     * copied, but assigned by their reference.\n     *\n     * Dispatches to a `clone` method if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig {*} -> {*}\n     * @param {*} value The object or array to clone\n     * @return {*} A new object or array.\n     * @example\n     *\n     *      var objects = [{}, {}, {}];\n     *      var objectsClone = R.clone(objects);\n     *      objects[0] === objectsClone[0]; //=> false\n     */\n    var clone = _curry1(function clone(value) {\n        return value != null && typeof value.clone === 'function' ? value.clone() : _clone(value, [], [], true);\n    });\n\n    /**\n     * Returns a curried equivalent of the provided function. The curried function\n     * has two unusual capabilities. First, its arguments needn't be provided one\n     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n     * following are equivalent:\n     *\n     *   - `g(1)(2)(3)`\n     *   - `g(1)(2, 3)`\n     *   - `g(1, 2)(3)`\n     *   - `g(1, 2, 3)`\n     *\n     * Secondly, the special placeholder value `R.__` may be used to specify\n     * \"gaps\", allowing partial application of any combination of arguments,\n     * regardless of their positions. If `g` is as above and `_` is `R.__`, the\n     * following are equivalent:\n     *\n     *   - `g(1, 2, 3)`\n     *   - `g(_, 2, 3)(1)`\n     *   - `g(_, _, 3)(1)(2)`\n     *   - `g(_, _, 3)(1, 2)`\n     *   - `g(_, 2)(1)(3)`\n     *   - `g(_, 2)(1, 3)`\n     *   - `g(_, 2)(_, 3)(1)`\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> a) -> (* -> a)\n     * @param {Function} fn The function to curry.\n     * @return {Function} A new, curried function.\n     * @see R.curryN\n     * @example\n     *\n     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;\n     *\n     *      var curriedAddFourNumbers = R.curry(addFourNumbers);\n     *      var f = curriedAddFourNumbers(1, 2);\n     *      var g = f(3);\n     *      g(4); //=> 10\n     */\n    var curry = _curry1(function curry(fn) {\n        return curryN(fn.length, fn);\n    });\n\n    /**\n     * Returns all but the first `n` elements of the given list, string, or\n     * transducer/transformer (or object with a `drop` method).\n     *\n     * Dispatches to the `drop` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n\n     * @param {*} list\n     * @return {*}\n     * @see R.take, R.transduce\n     * @example\n     *\n     *      R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.drop(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.drop(3, 'ramda');               //=> 'da'\n     */\n    var drop = _curry2(_dispatchable('drop', _xdrop, function drop(n, xs) {\n        return slice(Math.max(0, n), Infinity, xs);\n    }));\n\n    /**\n     * Returns a list containing all but the last `n` elements of the given `list`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements of `xs` to skip.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.takeLast\n     * @example\n     *\n     *      R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n     *      R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n     *      R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n     *      R.dropLast(3, 'ramda');               //=> 'ra'\n     */\n    var dropLast = _curry2(_dispatchable('dropLast', _xdropLast, _dropLast));\n\n    /**\n     * Returns a new list excluding all the tailing elements of a given list which\n     * satisfy the supplied predicate function. It passes each value from the right\n     * to the supplied predicate function, skipping elements while the predicate\n     * function returns `true`. The predicate function is applied to one argument:\n     * *(value)*.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> Boolean) -> [a] -> [a]\n     * @param {Function} fn The function called per iteration.\n     * @param {Array} list The collection to iterate over.\n     * @return {Array} A new array.\n     * @see R.takeLastWhile, R.addIndex\n     * @example\n     *\n     *      var lteThree = x => x <= 3;\n     *\n     *      R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n     */\n    var dropLastWhile = _curry2(_dispatchable('dropLastWhile', _xdropLastWhile, _dropLastWhile));\n\n    /**\n     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n     * cyclical data structures.\n     *\n     * Dispatches symmetrically to the `equals` methods of both arguments, if\n     * present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.15.0\n     * @category Relation\n     * @sig a -> b -> Boolean\n     * @param {*} a\n     * @param {*} b\n     * @return {Boolean}\n     * @example\n     *\n     *      R.equals(1, 1); //=> true\n     *      R.equals(1, '1'); //=> false\n     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true\n     *\n     *      var a = {}; a.v = a;\n     *      var b = {}; b.v = b;\n     *      R.equals(a, b); //=> true\n     */\n    var equals = _curry2(function equals(a, b) {\n        return _equals(a, b, [], []);\n    });\n\n    /**\n     * Takes a predicate and a \"filterable\", and returns a new filterable of the\n     * same type containing the members of the given filterable which satisfy the\n     * given predicate.\n     *\n     * Dispatches to the `filter` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.reject, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *\n     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    // else\n    var filter = _curry2(_dispatchable('filter', _xfilter, function (pred, filterable) {\n        return _isObject(filterable) ? _reduce(function (acc, key) {\n            if (pred(filterable[key])) {\n                acc[key] = filterable[key];\n            }\n            return acc;\n        }, {}, keys(filterable)) : // else\n        _filter(pred, filterable);\n    }));\n\n    /**\n     * Returns a new list by pulling every item out of it (and all its sub-arrays)\n     * and putting them in a new array, depth-first.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [b]\n     * @param {Array} list The array to consider.\n     * @return {Array} The flattened list.\n     * @see R.unnest\n     * @example\n     *\n     *      R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n     *      //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n     */\n    var flatten = _curry1(_makeFlat(true));\n\n    /**\n     * Returns a new function much like the supplied one, except that the first two\n     * arguments' order is reversed.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (a -> b -> c -> ... -> z) -> (b -> a -> c -> ... -> z)\n     * @param {Function} fn The function to invoke with its first two parameters reversed.\n     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\n     * @example\n     *\n     *      var mergeThree = (a, b, c) => [].concat(a, b, c);\n     *\n     *      mergeThree(1, 2, 3); //=> [1, 2, 3]\n     *\n     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n     */\n    var flip = _curry1(function flip(fn) {\n        return curry(function (a, b) {\n            var args = _slice(arguments);\n            args[0] = b;\n            args[1] = a;\n            return fn.apply(this, args);\n        });\n    });\n\n    /**\n     * Returns the first element of the given list or string. In some libraries\n     * this function is named `first`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {Array|String} list\n     * @return {*}\n     * @see R.tail, R.init, R.last\n     * @example\n     *\n     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'\n     *      R.head([]); //=> undefined\n     *\n     *      R.head('abc'); //=> 'a'\n     *      R.head(''); //=> ''\n     */\n    var head = nth(0);\n\n    /**\n     * Returns all but the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category List\n     * @sig [a] -> [a]\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.last, R.head, R.tail\n     * @example\n     *\n     *      R.init([1, 2, 3]);  //=> [1, 2]\n     *      R.init([1, 2]);     //=> [1]\n     *      R.init([1]);        //=> []\n     *      R.init([]);         //=> []\n     *\n     *      R.init('abc');  //=> 'ab'\n     *      R.init('ab');   //=> 'a'\n     *      R.init('a');    //=> ''\n     *      R.init('');     //=> ''\n     */\n    var init = slice(0, -1);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists. Duplication is determined according to the\n     * value returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate function that determines whether\n     *        the two supplied elements are equal.\n     * @param {Array} list1 One list of items to compare\n     * @param {Array} list2 A second list of items to compare\n     * @return {Array} A new list containing those elements common to both lists.\n     * @see R.intersection\n     * @example\n     *\n     *      var buffaloSpringfield = [\n     *        {id: 824, name: 'Richie Furay'},\n     *        {id: 956, name: 'Dewey Martin'},\n     *        {id: 313, name: 'Bruce Palmer'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *      var csny = [\n     *        {id: 204, name: 'David Crosby'},\n     *        {id: 456, name: 'Stephen Stills'},\n     *        {id: 539, name: 'Graham Nash'},\n     *        {id: 177, name: 'Neil Young'}\n     *      ];\n     *\n     *      R.intersectionWith(R.eqBy(R.prop('id')), buffaloSpringfield, csny);\n     *      //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n     */\n    var intersectionWith = _curry3(function intersectionWith(pred, list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        var results = [];\n        var idx = 0;\n        while (idx < filteredList.length) {\n            if (_containsWith(pred, filteredList[idx], lookupList)) {\n                results[results.length] = filteredList[idx];\n            }\n            idx += 1;\n        }\n        return uniqWith(pred, results);\n    });\n\n    /**\n     * Transforms the items of the list with the transducer and appends the\n     * transformed items to the accumulator using an appropriate iterator function\n     * based on the accumulator type.\n     *\n     * The accumulator can be an array, string, object or a transformer. Iterated\n     * items will be appended to arrays and concatenated to strings. Objects will\n     * be merged directly or 2-item arrays will be merged as key, value pairs.\n     *\n     * The accumulator can also be a transformer object that provides a 2-arity\n     * reducing iterator function, step, 0-arity initial value function, init, and\n     * 1-arity result extraction function result. The step function is used as the\n     * iterator function in reduce. The result function is used to convert the\n     * final accumulator into the return type and in most cases is R.identity. The\n     * init function is used to provide the initial accumulator.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig a -> (b -> b) -> [c] -> a\n     * @param {*} acc The initial accumulator value.\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.into([], transducer, numbers); //=> [2, 3]\n     *\n     *      var intoArray = R.into([]);\n     *      intoArray(transducer, numbers); //=> [2, 3]\n     */\n    var into = _curry3(function into(acc, xf, list) {\n        return _isTransformer(acc) ? _reduce(xf(acc), acc['@@transducer/init'](), list) : _reduce(xf(_stepCat(acc)), _clone(acc, [], [], false), list);\n    });\n\n    /**\n     * Same as R.invertObj, however this accounts for objects with duplicate values\n     * by putting the values into an array.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: [ s, ... ]}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object with keys\n     * in an array.\n     * @example\n     *\n     *      var raceResultsByFirstName = {\n     *        first: 'alice',\n     *        second: 'jake',\n     *        third: 'alice',\n     *      };\n     *      R.invert(raceResultsByFirstName);\n     *      //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n     */\n    var invert = _curry1(function invert(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            var val = obj[key];\n            var list = _has(val, out) ? out[val] : out[val] = [];\n            list[list.length] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new object with the keys of the given object as values, and the\n     * values of the given object, which are coerced to strings, as keys. Note\n     * that the last key found is preferred when handling the same value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig {s: x} -> {x: s}\n     * @param {Object} obj The object or array to invert\n     * @return {Object} out A new object\n     * @example\n     *\n     *      var raceResults = {\n     *        first: 'alice',\n     *        second: 'jake'\n     *      };\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': 'first', 'jake':'second' }\n     *\n     *      // Alternatively:\n     *      var raceResults = ['alice', 'jake'];\n     *      R.invertObj(raceResults);\n     *      //=> { 'alice': '0', 'jake':'1' }\n     */\n    var invertObj = _curry1(function invertObj(obj) {\n        var props = keys(obj);\n        var len = props.length;\n        var idx = 0;\n        var out = {};\n        while (idx < len) {\n            var key = props[idx];\n            out[obj[key]] = key;\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns `true` if the given value is its type's empty value; `false`\n     * otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Logic\n     * @sig a -> Boolean\n     * @param {*} x\n     * @return {Boolean}\n     * @see R.empty\n     * @example\n     *\n     *      R.isEmpty([1, 2, 3]);   //=> false\n     *      R.isEmpty([]);          //=> true\n     *      R.isEmpty('');          //=> true\n     *      R.isEmpty(null);        //=> false\n     *      R.isEmpty({});          //=> true\n     *      R.isEmpty({length: 0}); //=> false\n     */\n    var isEmpty = _curry1(function isEmpty(x) {\n        return x != null && equals(x, empty(x));\n    });\n\n    /**\n     * Returns the last element of the given list or string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig [a] -> a | Undefined\n     * @sig String -> String\n     * @param {*} list\n     * @return {*}\n     * @see R.init, R.head, R.tail\n     * @example\n     *\n     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'\n     *      R.last([]); //=> undefined\n     *\n     *      R.last('abc'); //=> 'c'\n     *      R.last(''); //=> ''\n     */\n    var last = nth(-1);\n\n    /**\n     * Returns the position of the last occurrence of an item in an array, or -1 if\n     * the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.indexOf\n     * @example\n     *\n     *      R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n     *      R.lastIndexOf(10, [1,2,3,4]); //=> -1\n     */\n    var lastIndexOf = _curry2(function lastIndexOf(target, xs) {\n        if (typeof xs.lastIndexOf === 'function' && !_isArray(xs)) {\n            return xs.lastIndexOf(target);\n        } else {\n            var idx = xs.length - 1;\n            while (idx >= 0) {\n                if (equals(xs[idx], target)) {\n                    return idx;\n                }\n                idx -= 1;\n            }\n            return -1;\n        }\n    });\n\n    /**\n     * Takes a function and\n     * a [functor](https://github.com/fantasyland/fantasy-land#functor),\n     * applies the function to each of the functor's values, and returns\n     * a functor of the same shape.\n     *\n     * Ramda provides suitable `map` implementations for `Array` and `Object`,\n     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n     *\n     * Dispatches to the `map` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * Also treats functions as functors and will compose them together.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Functor f => (a -> b) -> f a -> f b\n     * @param {Function} fn The function to be called on every element of the input `list`.\n     * @param {Array} list The list to be iterated over.\n     * @return {Array} The new list.\n     * @see R.transduce, R.addIndex\n     * @example\n     *\n     *      var double = x => x * 2;\n     *\n     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n     *\n     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n     */\n    var map = _curry2(_dispatchable('map', _xmap, function map(fn, functor) {\n        switch (Object.prototype.toString.call(functor)) {\n        case '[object Function]':\n            return curryN(functor.length, function () {\n                return fn.call(this, functor.apply(this, arguments));\n            });\n        case '[object Object]':\n            return _reduce(function (acc, key) {\n                acc[key] = fn(functor[key]);\n                return acc;\n            }, {}, keys(functor));\n        default:\n            return _map(fn, functor);\n        }\n    }));\n\n    /**\n     * An Object-specific version of `map`. The function is applied to three\n     * arguments: *(value, key, obj)*. If only the value is significant, use\n     * `map` instead.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Object\n     * @sig ((*, String, Object) -> *) -> Object -> Object\n     * @param {Function} fn\n     * @param {Object} obj\n     * @return {Object}\n     * @see R.map\n     * @example\n     *\n     *      var values = { x: 1, y: 2, z: 3 };\n     *      var prependKeyAndDouble = (num, key, obj) => key + (num * 2);\n     *\n     *      R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n     */\n    var mapObjIndexed = _curry2(function mapObjIndexed(fn, obj) {\n        return _reduce(function (acc, key) {\n            acc[key] = fn(obj[key], key, obj);\n            return acc;\n        }, {}, keys(obj));\n    });\n\n    /**\n     * Creates a new object with the own properties of the two provided objects. If\n     * a key exists in both objects, the provided function is applied to the values\n     * associated with the key in each object, with the result being used as the\n     * value associated with the key in the returned object. The key will be\n     * excluded from the returned object if the resulting value is `undefined`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @sig (a -> a -> a) -> {a} -> {a} -> {a}\n     * @param {Function} fn\n     * @param {Object} l\n     * @param {Object} r\n     * @return {Object}\n     * @see R.merge, R.mergeWithKey\n     * @example\n     *\n     *      R.mergeWith(R.concat,\n     *                  { a: true, values: [10, 20] },\n     *                  { b: true, values: [15, 35] });\n     *      //=> { a: true, b: true, values: [10, 20, 15, 35] }\n     */\n    var mergeWith = _curry3(function mergeWith(fn, l, r) {\n        return mergeWithKey(function (_, _l, _r) {\n            return fn(_l, _r);\n        }, l, r);\n    });\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided initially followed by the arguments provided to `g`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partialRight\n     * @example\n     *\n     *      var multiply = (a, b) => a * b;\n     *      var double = R.partial(multiply, [2]);\n     *      double(2); //=> 4\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var sayHello = R.partial(greet, ['Hello']);\n     *      var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n     *      sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partial = _createPartialApplicator(_concat);\n\n    /**\n     * Takes a function `f` and a list of arguments, and returns a function `g`.\n     * When applied, `g` returns the result of applying `f` to the arguments\n     * provided to `g` followed by the arguments provided initially.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n     * @param {Function} f\n     * @param {Array} args\n     * @return {Function}\n     * @see R.partial\n     * @example\n     *\n     *      var greet = (salutation, title, firstName, lastName) =>\n     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n     *\n     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n     *\n     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n     */\n    var partialRight = _createPartialApplicator(flip(_concat));\n\n    /**\n     * Determines whether a nested path on an object has a specific value, in\n     * `R.equals` terms. Most likely used to filter a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Relation\n     * @sig [String] -> * -> {String: *} -> Boolean\n     * @param {Array} path The path of the nested property to use\n     * @param {*} val The value to compare the nested property with\n     * @param {Object} obj The object to check the nested property in\n     * @return {Boolean} `true` if the value equals the nested object property,\n     *         `false` otherwise.\n     * @example\n     *\n     *      var user1 = { address: { zipCode: 90210 } };\n     *      var user2 = { address: { zipCode: 55555 } };\n     *      var user3 = { name: 'Bob' };\n     *      var users = [ user1, user2, user3 ];\n     *      var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n     *      R.filter(isFamous, users); //=> [ user1 ]\n     */\n    var pathEq = _curry3(function pathEq(_path, val, obj) {\n        return equals(path(_path, obj), val);\n    });\n\n    /**\n     * Returns a new list by plucking the same named property off all objects in\n     * the list supplied.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig k -> [{k: v}] -> [v]\n     * @param {Number|String} key The key name to pluck off of each object.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of values for the given key.\n     * @see R.props\n     * @example\n     *\n     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n     */\n    var pluck = _curry2(function pluck(p, list) {\n        return map(prop(p), list);\n    });\n\n    /**\n     * Reasonable analog to SQL `select` statement.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @category Relation\n     * @sig [k] -> [{k: v}] -> [{k: v}]\n     * @param {Array} props The property names to project\n     * @param {Array} objs The objects to query\n     * @return {Array} An array of objects with just the `props` properties.\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n     *      var kids = [abby, fred];\n     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n     */\n    // passing `identity` gives correct arity\n    var project = useWith(_map, [\n        pickAll,\n        identity\n    ]);\n\n    /**\n     * Returns `true` if the specified object property is equal, in `R.equals`\n     * terms, to the given value; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig String -> a -> Object -> Boolean\n     * @param {String} name\n     * @param {*} val\n     * @param {*} obj\n     * @return {Boolean}\n     * @see R.equals, R.propSatisfies\n     * @example\n     *\n     *      var abby = {name: 'Abby', age: 7, hair: 'blond'};\n     *      var fred = {name: 'Fred', age: 12, hair: 'brown'};\n     *      var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n     *      var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n     *      var kids = [abby, fred, rusty, alois];\n     *      var hasBrownHair = R.propEq('hair', 'brown');\n     *      R.filter(hasBrownHair, kids); //=> [fred, rusty]\n     */\n    var propEq = _curry3(function propEq(name, val, obj) {\n        return equals(val, obj[name]);\n    });\n\n    /**\n     * Returns a single item by iterating through the list, successively calling\n     * the iterator function and passing it an accumulator value and the current\n     * value from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It may use\n     * `R.reduced` to shortcut the iteration.\n     *\n     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n     * arrays), unlike the native `Array.prototype.reduce` method. For more details\n     * on this behavior, see:\n     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n     *\n     * Dispatches to the `reduce` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array.\n     * @param {*} acc The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduced, R.addIndex\n     * @example\n     *\n     *      var numbers = [1, 2, 3];\n     *      var plus = (a, b) => a + b;\n     *\n     *      R.reduce(plus, 10, numbers); //=> 16\n     */\n    var reduce = _curry3(_reduce);\n\n    /**\n     * Groups the elements of the list according to the result of calling\n     * the String-returning function `keyFn` on each element and reduces the elements\n     * of each group to a single value via the reducer function `valueFn`.\n     *\n     * This function is basically a more general `groupBy` function.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category List\n     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n     * @param {Function} valueFn The function that reduces the elements of each group to a single\n     *        value. Receives two values, accumulator for a particular group and the current element.\n     * @param {*} acc The (initial) accumulator value for each group.\n     * @param {Function} keyFn The function that maps the list's element into a key.\n     * @param {Array} list The array to group.\n     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n     *         `valueFn` for elements which produced that key when passed to `keyFn`.\n     * @see R.groupBy, R.reduce\n     * @example\n     *\n     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n     *      var namesByGrade = reduceToNamesBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Lucy', score: 92},\n     *                      {name: 'Drew', score: 85},\n     *                      // ...\n     *                      {name: 'Bart', score: 62}];\n     *      namesByGrade(students);\n     *      // {\n     *      //   'A': ['Lucy'],\n     *      //   'B': ['Drew']\n     *      //   // ...,\n     *      //   'F': ['Bart']\n     *      // }\n     */\n    var reduceBy = _curryN(4, [], _dispatchable('reduceBy', _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {\n        return _reduce(function (acc, elt) {\n            var key = keyFn(elt);\n            acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);\n            return acc;\n        }, {}, list);\n    }));\n\n    /**\n     * Like `reduce`, `reduceWhile` returns a single item by iterating through\n     * the list, successively calling the iterator function. `reduceWhile` also\n     * takes a predicate that is evaluated before each step. If the predicate returns\n     * `false`, it \"short-circuits\" the iteration and returns the current value\n     * of the accumulator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.22.0\n     * @category List\n     * @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n     * @param {Function} pred The predicate. It is passed the accumulator and the\n     *        current element.\n     * @param {Function} fn The iterator function. Receives two values, the\n     *        accumulator and the current element.\n     * @param {*} a The accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced\n     * @example\n     *\n     *      var isOdd = (acc, x) => x % 2 === 1;\n     *      var xs = [1, 3, 5, 60, 777, 800];\n     *      R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n     *\n     *      var ys = [2, 4, 6]\n     *      R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n     */\n    var reduceWhile = _curryN(4, [], function _reduceWhile(pred, fn, a, list) {\n        return _reduce(function (acc, x) {\n            return pred(acc, x) ? fn(acc, x) : _reduced(acc);\n        }, a, list);\n    });\n\n    /**\n     * The complement of `filter`.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> f a\n     * @param {Function} pred\n     * @param {Array} filterable\n     * @return {Array}\n     * @see R.filter, R.transduce, R.addIndex\n     * @example\n     *\n     *      var isOdd = (n) => n % 2 === 1;\n     *\n     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n     *\n     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n     */\n    var reject = _curry2(function reject(pred, filterable) {\n        return filter(_complement(pred), filterable);\n    });\n\n    /**\n     * Returns a fixed list of size `n` containing a specified identical value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.1\n     * @category List\n     * @sig a -> n -> [a]\n     * @param {*} value The value to repeat.\n     * @param {Number} n The desired size of the output list.\n     * @return {Array} A new array containing `n` `value`s.\n     * @example\n     *\n     *      R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n     *\n     *      var obj = {};\n     *      var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n     *      repeatedObjs[0] === repeatedObjs[1]; //=> true\n     */\n    var repeat = _curry2(function repeat(value, n) {\n        return times(always(value), n);\n    });\n\n    /**\n     * Adds together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The sum of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.sum([2,4,6,8,100,1]); //=> 121\n     */\n    var sum = reduce(add, 0);\n\n    /**\n     * Returns a new list containing the last `n` elements of the given list.\n     * If `n > list.length`, returns a list of `list.length` elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig Number -> [a] -> [a]\n     * @sig Number -> String -> String\n     * @param {Number} n The number of elements to return.\n     * @param {Array} xs The collection to consider.\n     * @return {Array}\n     * @see R.dropLast\n     * @example\n     *\n     *      R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n     *      R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n     *      R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n     *      R.takeLast(3, 'ramda');               //=> 'mda'\n     */\n    var takeLast = _curry2(function takeLast(n, xs) {\n        return drop(n >= 0 ? xs.length - n : 0, xs);\n    });\n\n    /**\n     * Initializes a transducer using supplied iterator function. Returns a single\n     * item by iterating through the list, successively calling the transformed\n     * iterator function and passing it an accumulator value and the current value\n     * from the array, and then passing the result to the next call.\n     *\n     * The iterator function receives two values: *(acc, value)*. It will be\n     * wrapped as a transformer to initialize the transducer. A transformer can be\n     * passed directly in place of an iterator function. In both cases, iteration\n     * may be stopped early with the `R.reduced` function.\n     *\n     * A transducer is a function that accepts a transformer and returns a\n     * transformer and can be composed directly.\n     *\n     * A transformer is an an object that provides a 2-arity reducing iterator\n     * function, step, 0-arity initial value function, init, and 1-arity result\n     * extraction function, result. The step function is used as the iterator\n     * function in reduce. The result function is used to convert the final\n     * accumulator into the return type and in most cases is R.identity. The init\n     * function can be used to provide an initial accumulator, but is ignored by\n     * transduce.\n     *\n     * The iteration is performed with R.reduce after initializing the transducer.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category List\n     * @sig (c -> c) -> (a,b -> a) -> a -> [b] -> a\n     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n     * @param {Function} fn The iterator function. Receives two values, the accumulator and the\n     *        current element from the array. Wrapped as transformer, if necessary, and used to\n     *        initialize the transducer\n     * @param {*} acc The initial accumulator value.\n     * @param {Array} list The list to iterate over.\n     * @return {*} The final, accumulated value.\n     * @see R.reduce, R.reduced, R.into\n     * @example\n     *\n     *      var numbers = [1, 2, 3, 4];\n     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));\n     *\n     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n     */\n    var transduce = curryN(4, function transduce(xf, fn, acc, list) {\n        return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list. Duplication is determined according to the value returned by\n     * applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [*] -> [*] -> [*]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @see R.union\n     * @example\n     *\n     *      var l1 = [{a: 1}, {a: 2}];\n     *      var l2 = [{a: 1}, {a: 4}];\n     *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n     */\n    var unionWith = _curry3(function unionWith(pred, list1, list2) {\n        return uniqWith(pred, _concat(list1, list2));\n    });\n\n    /**\n     * Takes a spec object and a test object; returns true if the test satisfies\n     * the spec, false otherwise. An object satisfies the spec if, for each of the\n     * spec's own properties, accessing that property of the object gives the same\n     * value (in `R.equals` terms) as accessing that property of the spec.\n     *\n     * `whereEq` is a specialization of [`where`](#where).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @sig {String: *} -> {String: *} -> Boolean\n     * @param {Object} spec\n     * @param {Object} testObj\n     * @return {Boolean}\n     * @see R.where\n     * @example\n     *\n     *      // pred :: Object -> Boolean\n     *      var pred = R.whereEq({a: 1, b: 2});\n     *\n     *      pred({a: 1});              //=> false\n     *      pred({a: 1, b: 2});        //=> true\n     *      pred({a: 1, b: 2, c: 3});  //=> true\n     *      pred({a: 1, b: 1});        //=> false\n     */\n    var whereEq = _curry2(function whereEq(spec, testObj) {\n        return where(map(equals, spec), testObj);\n    });\n\n    var _flatCat = function () {\n        var preservingReduced = function (xf) {\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return xf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    var ret = xf['@@transducer/step'](result, input);\n                    return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;\n                }\n            };\n        };\n        return function _xcat(xf) {\n            var rxf = preservingReduced(xf);\n            return {\n                '@@transducer/init': _xfBase.init,\n                '@@transducer/result': function (result) {\n                    return rxf['@@transducer/result'](result);\n                },\n                '@@transducer/step': function (result, input) {\n                    return !isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);\n                }\n            };\n        };\n    }();\n\n    // Array.prototype.indexOf doesn't exist below IE9\n    // manually crawl the list to distinguish between +0 and -0\n    // NaN\n    // non-zero numbers can utilise Set\n    // all these types can utilise Set\n    // null can utilise Set\n    // anything else not covered above, defer to R.equals\n    var _indexOf = function _indexOf(list, a, idx) {\n        var inf, item;\n        // Array.prototype.indexOf doesn't exist below IE9\n        if (typeof list.indexOf === 'function') {\n            switch (typeof a) {\n            case 'number':\n                if (a === 0) {\n                    // manually crawl the list to distinguish between +0 and -0\n                    inf = 1 / a;\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (item === 0 && 1 / item === inf) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                } else if (a !== a) {\n                    // NaN\n                    while (idx < list.length) {\n                        item = list[idx];\n                        if (typeof item === 'number' && item !== item) {\n                            return idx;\n                        }\n                        idx += 1;\n                    }\n                    return -1;\n                }\n                // non-zero numbers can utilise Set\n                return list.indexOf(a, idx);\n            // all these types can utilise Set\n            case 'string':\n            case 'boolean':\n            case 'function':\n            case 'undefined':\n                return list.indexOf(a, idx);\n            case 'object':\n                if (a === null) {\n                    // null can utilise Set\n                    return list.indexOf(a, idx);\n                }\n            }\n        }\n        // anything else not covered above, defer to R.equals\n        while (idx < list.length) {\n            if (equals(list[idx], a)) {\n                return idx;\n            }\n            idx += 1;\n        }\n        return -1;\n    };\n\n    var _xchain = _curry2(function _xchain(f, xf) {\n        return map(f, _flatCat(xf));\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if every one of the provided predicates is satisfied\n     * by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.anyPass\n     * @example\n     *\n     *      var isQueen = R.propEq('rank', 'Q');\n     *      var isSpade = R.propEq('suit', '♠︎');\n     *      var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n     *\n     *      isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n     *      isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n     */\n    var allPass = _curry1(function allPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (!preds[idx].apply(this, arguments)) {\n                    return false;\n                }\n                idx += 1;\n            }\n            return true;\n        });\n    });\n\n    /**\n     * Takes a list of predicates and returns a predicate that returns true for a\n     * given list of arguments if at least one of the provided predicates is\n     * satisfied by those arguments.\n     *\n     * The function returned is a curried function whose arity matches that of the\n     * highest-arity predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Logic\n     * @sig [(*... -> Boolean)] -> (*... -> Boolean)\n     * @param {Array} preds\n     * @return {Function}\n     * @see R.allPass\n     * @example\n     *\n     *      var gte = R.anyPass([R.gt, R.equals]);\n     *\n     *      gte(3, 2); //=> true\n     *      gte(2, 2); //=> true\n     *      gte(2, 3); //=> false\n     */\n    var anyPass = _curry1(function anyPass(preds) {\n        return curryN(reduce(max, 0, pluck('length', preds)), function () {\n            var idx = 0;\n            var len = preds.length;\n            while (idx < len) {\n                if (preds[idx].apply(this, arguments)) {\n                    return true;\n                }\n                idx += 1;\n            }\n            return false;\n        });\n    });\n\n    /**\n     * ap applies a list of functions to a list of values.\n     *\n     * Dispatches to the `ap` method of the second argument, if present. Also\n     * treats curried functions as applicatives.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category Function\n     * @sig [a -> b] -> [a] -> [b]\n     * @sig Apply f => f (a -> b) -> f a -> f b\n     * @param {Array} fns An array of functions\n     * @param {Array} vs An array of values\n     * @return {Array} An array of results of applying each of `fns` to all of `vs` in turn.\n     * @example\n     *\n     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n     */\n    // else\n    var ap = _curry2(function ap(applicative, fn) {\n        return typeof applicative.ap === 'function' ? applicative.ap(fn) : typeof applicative === 'function' ? function (x) {\n            return applicative(x)(fn(x));\n        } : // else\n        _reduce(function (acc, f) {\n            return _concat(acc, map(f, fn));\n        }, [], applicative);\n    });\n\n    /**\n     * Given a spec object recursively mapping properties to functions, creates a\n     * function producing an object of the same structure, by mapping each property\n     * to the result of calling its associated function with the supplied arguments.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.20.0\n     * @category Function\n     * @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n     * @param {Object} spec an object recursively mapping properties to functions for\n     *        producing the values for these properties.\n     * @return {Function} A function that returns an object of the same structure\n     * as `spec', with each property set to the value returned by calling its\n     * associated function with the supplied arguments.\n     * @see R.converge, R.juxt\n     * @example\n     *\n     *      var getMetrics = R.applySpec({\n     *                                      sum: R.add,\n     *                                      nested: { mul: R.multiply }\n     *                                   });\n     *      getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n     */\n    var applySpec = _curry1(function applySpec(spec) {\n        spec = map(function (v) {\n            return typeof v == 'function' ? v : applySpec(v);\n        }, spec);\n        return curryN(reduce(max, 0, pluck('length', values(spec))), function () {\n            var args = arguments;\n            return map(function (f) {\n                return apply(f, args);\n            }, spec);\n        });\n    });\n\n    /**\n     * Returns the result of calling its first argument with the remaining\n     * arguments. This is occasionally useful as a converging function for\n     * `R.converge`: the left branch can produce a function while the right branch\n     * produces a value to be passed to that function as an argument.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category Function\n     * @sig (*... -> a),*... -> a\n     * @param {Function} fn The function to apply to the remaining arguments.\n     * @param {...*} args Any number of positional arguments.\n     * @return {*}\n     * @see R.apply\n     * @example\n     *\n     *      var indentN = R.pipe(R.times(R.always(' ')),\n     *                           R.join(''),\n     *                           R.replace(/^(?!$)/gm));\n     *\n     *      var format = R.converge(R.call, [\n     *                                  R.pipe(R.prop('indent'), indentN),\n     *                                  R.prop('value')\n     *                              ]);\n     *\n     *      format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n     */\n    var call = curry(function call(fn) {\n        return fn.apply(this, _slice(arguments, 1));\n    });\n\n    /**\n     * `chain` maps a function over a list and concatenates the results. `chain`\n     * is also known as `flatMap` in some libraries\n     *\n     * Dispatches to the `chain` method of the second argument, if present,\n     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain m => (a -> m b) -> m a -> m b\n     * @param {Function} fn\n     * @param {Array} list\n     * @return {Array}\n     * @example\n     *\n     *      var duplicate = n => [n, n];\n     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n     */\n    var chain = _curry2(_dispatchable('chain', _xchain, function chain(fn, monad) {\n        if (typeof monad === 'function') {\n            return function () {\n                return monad.call(this, fn.apply(this, arguments)).apply(this, arguments);\n            };\n        }\n        return _makeFlat(false)(map(fn, monad));\n    }));\n\n    /**\n     * Returns a function, `fn`, which encapsulates if/else-if/else logic.\n     * `R.cond` takes a list of [predicate, transform] pairs. All of the arguments\n     * to `fn` are applied to each of the predicates in turn until one returns a\n     * \"truthy\" value, at which point `fn` returns the result of applying its\n     * arguments to the corresponding transformer. If none of the predicates\n     * matches, `fn` returns undefined.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.6.0\n     * @category Logic\n     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)\n     * @param {Array} pairs\n     * @return {Function}\n     * @example\n     *\n     *      var fn = R.cond([\n     *        [R.equals(0),   R.always('water freezes at 0°C')],\n     *        [R.equals(100), R.always('water boils at 100°C')],\n     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n     *      ]);\n     *      fn(0); //=> 'water freezes at 0°C'\n     *      fn(50); //=> 'nothing special happens at 50°C'\n     *      fn(100); //=> 'water boils at 100°C'\n     */\n    var cond = _curry1(function cond(pairs) {\n        var arity = reduce(max, 0, map(function (pair) {\n            return pair[0].length;\n        }, pairs));\n        return _arity(arity, function () {\n            var idx = 0;\n            while (idx < pairs.length) {\n                if (pairs[idx][0].apply(this, arguments)) {\n                    return pairs[idx][1].apply(this, arguments);\n                }\n                idx += 1;\n            }\n        });\n    });\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type. The arity of the function\n     * returned is specified to allow using variadic constructor functions.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.0\n     * @category Function\n     * @sig Number -> (* -> {*}) -> (* -> {*})\n     * @param {Number} n The arity of the constructor function.\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Variadic constructor function\n     *      var Widget = () => {\n     *        this.children = Array.prototype.slice.call(arguments);\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.constructN(1, Widget), allConfigs); // a list of Widgets\n     */\n    var constructN = _curry2(function constructN(n, Fn) {\n        if (n > 10) {\n            throw new Error('Constructor with greater than ten arguments');\n        }\n        if (n === 0) {\n            return function () {\n                return new Fn();\n            };\n        }\n        return curry(nAry(n, function ($0, $1, $2, $3, $4, $5, $6, $7, $8, $9) {\n            switch (arguments.length) {\n            case 1:\n                return new Fn($0);\n            case 2:\n                return new Fn($0, $1);\n            case 3:\n                return new Fn($0, $1, $2);\n            case 4:\n                return new Fn($0, $1, $2, $3);\n            case 5:\n                return new Fn($0, $1, $2, $3, $4);\n            case 6:\n                return new Fn($0, $1, $2, $3, $4, $5);\n            case 7:\n                return new Fn($0, $1, $2, $3, $4, $5, $6);\n            case 8:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7);\n            case 9:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8);\n            case 10:\n                return new Fn($0, $1, $2, $3, $4, $5, $6, $7, $8, $9);\n            }\n        }));\n    });\n\n    /**\n     * Accepts a converging function and a list of branching functions and returns\n     * a new function. When invoked, this new function is applied to some\n     * arguments, each branching function is applied to those same arguments. The\n     * results of each branching function are passed as arguments to the converging\n     * function to produce the return value.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.4.2\n     * @category Function\n     * @sig (x1 -> x2 -> ... -> z) -> [(a -> b -> ... -> x1), (a -> b -> ... -> x2), ...] -> (a -> b -> ... -> z)\n     * @param {Function} after A function. `after` will be invoked with the return values of\n     *        `fn1` and `fn2` as its arguments.\n     * @param {Array} functions A list of functions.\n     * @return {Function} A new function.\n     * @example\n     *\n     *      var add = (a, b) => a + b;\n     *      var multiply = (a, b) => a * b;\n     *      var subtract = (a, b) => a - b;\n     *\n     *      //≅ multiply( add(1, 2), subtract(1, 2) );\n     *      R.converge(multiply, [add, subtract])(1, 2); //=> -3\n     *\n     *      var add3 = (a, b, c) => a + b + c;\n     *      R.converge(add3, [multiply, add, subtract])(1, 2); //=> 4\n     */\n    var converge = _curry2(function converge(after, fns) {\n        return curryN(reduce(max, 0, pluck('length', fns)), function () {\n            var args = arguments;\n            var context = this;\n            return after.apply(context, _map(function (fn) {\n                return fn.apply(context, args);\n            }, fns));\n        });\n    });\n\n    /**\n     * Counts the elements of a list according to how many match each value of a\n     * key generated by the supplied function. Returns an object mapping the keys\n     * produced by `fn` to the number of occurrences in the list. Note that all\n     * keys are coerced to strings because of how JavaScript objects work.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig (a -> String) -> [a] -> {*}\n     * @param {Function} fn The function used to map values to keys.\n     * @param {Array} list The list to count elements from.\n     * @return {Object} An object mapping keys to number of occurrences in the list.\n     * @example\n     *\n     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n     *      var letters = R.split('', 'abcABCaaaBBc');\n     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n     *      R.countBy(R.toLower)(letters);   //=> {'a': 5, 'b': 4, 'c': 3}\n     */\n    var countBy = reduceBy(function (acc, elem) {\n        return acc + 1;\n    }, 0);\n\n    /**\n     * Returns a new list without any consecutively repeating elements. Equality is\n     * determined by applying the supplied predicate two consecutive elements. The\n     * first element in a series of equal element is the one being preserved.\n     *\n     * Dispatches to the `dropRepeatsWith` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig (a, a -> Boolean) -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n     */\n    var dropRepeatsWith = _curry2(_dispatchable('dropRepeatsWith', _xdropRepeatsWith, function dropRepeatsWith(pred, list) {\n        var result = [];\n        var idx = 1;\n        var len = list.length;\n        if (len !== 0) {\n            result[0] = list[0];\n            while (idx < len) {\n                if (!pred(last(result), list[idx])) {\n                    result[result.length] = list[idx];\n                }\n                idx += 1;\n            }\n        }\n        return result;\n    }));\n\n    /**\n     * Takes a function and two values in its domain and returns `true` if the\n     * values map to the same value in the codomain; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.18.0\n     * @category Relation\n     * @sig (a -> b) -> a -> a -> Boolean\n     * @param {Function} f\n     * @param {*} x\n     * @param {*} y\n     * @return {Boolean}\n     * @example\n     *\n     *      R.eqBy(Math.abs, 5, -5); //=> true\n     */\n    var eqBy = _curry3(function eqBy(f, x, y) {\n        return equals(f(x), f(y));\n    });\n\n    /**\n     * Reports whether two objects have the same value, in `R.equals` terms, for\n     * the specified property. Useful as a curried predicate.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig k -> {k: v} -> {k: v} -> Boolean\n     * @param {String} prop The name of the property to compare\n     * @param {Object} obj1\n     * @param {Object} obj2\n     * @return {Boolean}\n     *\n     * @example\n     *\n     *      var o1 = { a: 1, b: 2, c: 3, d: 4 };\n     *      var o2 = { a: 10, b: 20, c: 3, d: 40 };\n     *      R.eqProps('a', o1, o2); //=> false\n     *      R.eqProps('c', o1, o2); //=> true\n     */\n    var eqProps = _curry3(function eqProps(prop, obj1, obj2) {\n        return equals(obj1[prop], obj2[prop]);\n    });\n\n    /**\n     * Splits a list into sub-lists stored in an object, based on the result of\n     * calling a String-returning function on each element, and grouping the\n     * results according to values returned.\n     *\n     * Dispatches to the `groupBy` method of the second argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig (a -> String) -> [a] -> {String: [a]}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} list The array to group\n     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n     *         that produced that key when passed to `fn`.\n     * @see R.transduce\n     * @example\n     *\n     *      var byGrade = R.groupBy(function(student) {\n     *        var score = student.score;\n     *        return score < 65 ? 'F' :\n     *               score < 70 ? 'D' :\n     *               score < 80 ? 'C' :\n     *               score < 90 ? 'B' : 'A';\n     *      });\n     *      var students = [{name: 'Abby', score: 84},\n     *                      {name: 'Eddy', score: 58},\n     *                      // ...\n     *                      {name: 'Jack', score: 69}];\n     *      byGrade(students);\n     *      // {\n     *      //   'A': [{name: 'Dianne', score: 99}],\n     *      //   'B': [{name: 'Abby', score: 84}]\n     *      //   // ...,\n     *      //   'F': [{name: 'Eddy', score: 58}]\n     *      // }\n     */\n    var groupBy = _curry2(_checkForMethod('groupBy', reduceBy(function (acc, item) {\n        if (acc == null) {\n            acc = [];\n        }\n        acc.push(item);\n        return acc;\n    }, null)));\n\n    /**\n     * Given a function that generates a key, turns a list of objects into an\n     * object indexing the objects by the given key. Note that if multiple\n     * objects generate the same value for the indexing key only the last value\n     * will be included in the generated object.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n     * @param {Function} fn Function :: a -> String\n     * @param {Array} array The array of objects to index\n     * @return {Object} An object indexing each array element by the given property.\n     * @example\n     *\n     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n     *      R.indexBy(R.prop('id'), list);\n     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n     */\n    var indexBy = reduceBy(function (acc, elem) {\n        return elem;\n    }, null);\n\n    /**\n     * Returns the position of the first occurrence of an item in an array, or -1\n     * if the item is not included in the array. `R.equals` is used to determine\n     * equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Number\n     * @param {*} target The item to find.\n     * @param {Array} xs The array to search in.\n     * @return {Number} the index of the target, or -1 if the target is not found.\n     * @see R.lastIndexOf\n     * @example\n     *\n     *      R.indexOf(3, [1,2,3,4]); //=> 2\n     *      R.indexOf(10, [1,2,3,4]); //=> -1\n     */\n    var indexOf = _curry2(function indexOf(target, xs) {\n        return typeof xs.indexOf === 'function' && !_isArray(xs) ? xs.indexOf(target) : _indexOf(xs, target, 0);\n    });\n\n    /**\n     * juxt applies a list of functions to a list of values.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Function\n     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n     * @param {Array} fns An array of functions\n     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n     * @see R.applySpec\n     * @example\n     *\n     *      var getRange = R.juxt([Math.min, Math.max]);\n     *      getRange(3, 4, 9, -3); //=> [-3, 9]\n     */\n    var juxt = _curry1(function juxt(fns) {\n        return converge(_arrayOf, fns);\n    });\n\n    /**\n     * Returns a lens for the given getter and setter functions. The getter \"gets\"\n     * the value of the focus; the setter \"sets\" the value of the focus. The setter\n     * should not mutate the data structure.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.8.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n     * @param {Function} getter\n     * @param {Function} setter\n     * @return {Lens}\n     * @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n     * @example\n     *\n     *      var xLens = R.lens(R.prop('x'), R.assoc('x'));\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lens = _curry2(function lens(getter, setter) {\n        return function (toFunctorFn) {\n            return function (target) {\n                return map(function (focus) {\n                    return setter(focus, target);\n                }, toFunctorFn(getter(target)));\n            };\n        };\n    });\n\n    /**\n     * Returns a lens whose focus is the specified index.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig Number -> Lens s a\n     * @param {Number} n\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var headLens = R.lensIndex(0);\n     *\n     *      R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n     *      R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n     *      R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n     */\n    var lensIndex = _curry1(function lensIndex(n) {\n        return lens(nth(n), update(n));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified path.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig [String] -> Lens s a\n     * @param {Array} path The path to use.\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xyLens = R.lensPath(['x', 'y']);\n     *\n     *      R.view(xyLens, {x: {y: 2, z: 3}});            //=> 2\n     *      R.set(xyLens, 4, {x: {y: 2, z: 3}});          //=> {x: {y: 4, z: 3}}\n     *      R.over(xyLens, R.negate, {x: {y: 2, z: 3}});  //=> {x: {y: -2, z: 3}}\n     */\n    var lensPath = _curry1(function lensPath(p) {\n        return lens(path(p), assocPath(p));\n    });\n\n    /**\n     * Returns a lens whose focus is the specified property.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Object\n     * @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n     * @sig String -> Lens s a\n     * @param {String} k\n     * @return {Lens}\n     * @see R.view, R.set, R.over\n     * @example\n     *\n     *      var xLens = R.lensProp('x');\n     *\n     *      R.view(xLens, {x: 1, y: 2});            //=> 1\n     *      R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n     *      R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n     */\n    var lensProp = _curry1(function lensProp(k) {\n        return lens(prop(k), assoc(k));\n    });\n\n    /**\n     * \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig Number -> (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.lift, R.ap\n     * @example\n     *\n     *      var madd3 = R.liftN(3, R.curryN(3, (...args) => R.sum(args)));\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     */\n    var liftN = _curry2(function liftN(arity, fn) {\n        var lifted = curryN(arity, fn);\n        return curryN(arity, function () {\n            return _reduce(ap, map(lifted, arguments[0]), _slice(arguments, 1));\n        });\n    });\n\n    /**\n     * Returns the mean of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.mean([2, 7, 9]); //=> 6\n     *      R.mean([]); //=> NaN\n     */\n    var mean = _curry1(function mean(list) {\n        return sum(list) / list.length;\n    });\n\n    /**\n     * Returns the median of the given list of numbers.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list\n     * @return {Number}\n     * @example\n     *\n     *      R.median([2, 9, 7]); //=> 7\n     *      R.median([7, 2, 10, 9]); //=> 8\n     *      R.median([]); //=> NaN\n     */\n    var median = _curry1(function median(list) {\n        var len = list.length;\n        if (len === 0) {\n            return NaN;\n        }\n        var width = 2 - len % 2;\n        var idx = (len - width) / 2;\n        return mean(_slice(list).sort(function (a, b) {\n            return a < b ? -1 : a > b ? 1 : 0;\n        }).slice(idx, idx + width));\n    });\n\n    /**\n     * Takes a predicate and a list or other \"filterable\" object and returns the\n     * pair of filterable objects of the same type of elements which do and do not\n     * satisfy, the predicate, respectively.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.4\n     * @category List\n     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n     * @param {Function} pred A predicate to determine which side the element belongs to.\n     * @param {Array} filterable the list (or other filterable) to partition.\n     * @return {Array} An array, containing first the subset of elements that satisfy the\n     *         predicate, and second the subset of elements that do not satisfy.\n     * @see R.filter, R.reject\n     * @example\n     *\n     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n     *\n     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n     */\n    var partition = juxt([\n        filter,\n        reject\n    ]);\n\n    /**\n     * Performs left-to-right function composition. The leftmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * In some libraries this function is named `sequence`.\n     *\n     * **Note:** The result of pipe is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.compose\n     * @example\n     *\n     *      var f = R.pipe(Math.pow, R.negate, R.inc);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var pipe = function pipe() {\n        if (arguments.length === 0) {\n            throw new Error('pipe requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Performs left-to-right composition of one or more Promise-returning\n     * functions. The leftmost function may have any arity; the remaining functions\n     * must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.composeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n     */\n    var pipeP = function pipeP() {\n        if (arguments.length === 0) {\n            throw new Error('pipeP requires at least one argument');\n        }\n        return _arity(arguments[0].length, reduce(_pipeP, arguments[0], tail(arguments)));\n    };\n\n    /**\n     * Multiplies together all the elements of a list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Math\n     * @sig [Number] -> Number\n     * @param {Array} list An array of numbers\n     * @return {Number} The product of all the numbers in the list.\n     * @see R.reduce\n     * @example\n     *\n     *      R.product([2,4,6,8,100,1]); //=> 38400\n     */\n    var product = reduce(multiply, 1);\n\n    /**\n     * Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n     * of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n     * Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the second argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n     * @param {Function} of\n     * @param {*} traversable\n     * @return {*}\n     * @see R.traverse\n     * @example\n     *\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n     *      R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n     *\n     *      R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n     *      R.sequence(R.of, Nothing());       //=> [Nothing()]\n     */\n    var sequence = _curry2(function sequence(of, traversable) {\n        return typeof traversable.sequence === 'function' ? traversable.sequence(of) : reduceRight(function (acc, x) {\n            return ap(map(prepend, x), acc);\n        }, of([]), traversable);\n    });\n\n    /**\n     * Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n     * function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n     * then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n     * into an Applicative of Traversable.\n     *\n     * Dispatches to the `sequence` method of the third argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n     * @param {Function} of\n     * @param {Function} f\n     * @param {*} traversable\n     * @return {*}\n     * @see R.sequence\n     * @example\n     *\n     *      // Returns `Nothing` if the given divisor is `0`\n     *      safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n     *\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n     *      R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n     */\n    var traverse = _curry3(function traverse(of, f, traversable) {\n        return sequence(of, map(f, traversable));\n    });\n\n    /**\n     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.3.0\n     * @category List\n     * @sig Chain c => c (c a) -> c a\n     * @param {*} list\n     * @return {*}\n     * @see R.flatten, R.chain\n     * @example\n     *\n     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n     */\n    var unnest = chain(_identity);\n\n    var _contains = function _contains(a, list) {\n        return _indexOf(list, a, 0) >= 0;\n    };\n\n    //  mapPairs :: (Object, [String]) -> [String]\n    var _toString = function _toString(x, seen) {\n        var recur = function recur(y) {\n            var xs = seen.concat([x]);\n            return _contains(y, xs) ? '<Circular>' : _toString(y, xs);\n        };\n        //  mapPairs :: (Object, [String]) -> [String]\n        var mapPairs = function (obj, keys) {\n            return _map(function (k) {\n                return _quote(k) + ': ' + recur(obj[k]);\n            }, keys.slice().sort());\n        };\n        switch (Object.prototype.toString.call(x)) {\n        case '[object Arguments]':\n            return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';\n        case '[object Array]':\n            return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {\n                return /^\\d+$/.test(k);\n            }, keys(x)))).join(', ') + ']';\n        case '[object Boolean]':\n            return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();\n        case '[object Date]':\n            return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';\n        case '[object Null]':\n            return 'null';\n        case '[object Number]':\n            return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);\n        case '[object String]':\n            return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);\n        case '[object Undefined]':\n            return 'undefined';\n        default:\n            if (typeof x.toString === 'function') {\n                var repr = x.toString();\n                if (repr !== '[object Object]') {\n                    return repr;\n                }\n            }\n            return '{' + mapPairs(x, keys(x)).join(', ') + '}';\n        }\n    };\n\n    /**\n     * Performs right-to-left function composition. The rightmost function may have\n     * any arity; the remaining functions must be unary.\n     *\n     * **Note:** The result of compose is not automatically curried.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipe\n     * @example\n     *\n     *      var f = R.compose(R.inc, R.negate, Math.pow);\n     *\n     *      f(3, 4); // -(3^4) + 1\n     */\n    var compose = function compose() {\n        if (arguments.length === 0) {\n            throw new Error('compose requires at least one argument');\n        }\n        return pipe.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the right-to-left Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), R.chain(f))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.pipeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.composeK(\n     *        R.compose(Maybe.of, R.toUpper),\n     *        get('state'),\n     *        get('address'),\n     *        get('user'),\n     *        parseJson\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var composeK = function composeK() {\n        return compose.apply(this, prepend(identity, map(chain, arguments)));\n    };\n\n    /**\n     * Performs right-to-left composition of one or more Promise-returning\n     * functions. The rightmost function may have any arity; the remaining\n     * functions must be unary.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.10.0\n     * @category Function\n     * @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n     * @param {...Function} functions\n     * @return {Function}\n     * @see R.pipeP\n     * @example\n     *\n     *      //  followersForUser :: String -> Promise [User]\n     *      var followersForUser = R.composeP(db.getFollowers, db.getUserById);\n     */\n    var composeP = function composeP() {\n        if (arguments.length === 0) {\n            throw new Error('composeP requires at least one argument');\n        }\n        return pipeP.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Wraps a constructor function inside a curried function that can be called\n     * with the same arguments and returns the same type.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (* -> {*}) -> (* -> {*})\n     * @param {Function} Fn The constructor function to wrap.\n     * @return {Function} A wrapped, curried constructor function.\n     * @example\n     *\n     *      // Constructor function\n     *      var Widget = config => {\n     *        // ...\n     *      };\n     *      Widget.prototype = {\n     *        // ...\n     *      };\n     *      var allConfigs = [\n     *        // ...\n     *      ];\n     *      R.map(R.construct(Widget), allConfigs); // a list of Widgets\n     */\n    var construct = _curry1(function construct(Fn) {\n        return constructN(Fn.length, Fn);\n    });\n\n    /**\n     * Returns `true` if the specified value is equal, in `R.equals` terms, to at\n     * least one element of the given list; `false` otherwise.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig a -> [a] -> Boolean\n     * @param {Object} a The item to compare against.\n     * @param {Array} list The array to consider.\n     * @return {Boolean} `true` if the item is in the list, `false` otherwise.\n     * @see R.any\n     * @example\n     *\n     *      R.contains(3, [1, 2, 3]); //=> true\n     *      R.contains(4, [1, 2, 3]); //=> false\n     *      R.contains([42], [[42]]); //=> true\n     */\n    var contains = _curry2(_contains);\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements in the first list not\n     * contained in the second list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` that are not in `list2`.\n     * @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith\n     * @example\n     *\n     *      R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n     *      R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n     */\n    var difference = _curry2(function difference(first, second) {\n        var out = [];\n        var idx = 0;\n        var firstLen = first.length;\n        while (idx < firstLen) {\n            if (!_contains(first[idx], second) && !_contains(first[idx], out)) {\n                out[out.length] = first[idx];\n            }\n            idx += 1;\n        }\n        return out;\n    });\n\n    /**\n     * Returns a new list without any consecutively repeating elements. `R.equals`\n     * is used to determine equality.\n     *\n     * Dispatches to the `dropRepeats` method of the first argument, if present.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} `list` without repeating elements.\n     * @see R.transduce\n     * @example\n     *\n     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n     */\n    var dropRepeats = _curry1(_dispatchable('dropRepeats', _xdropRepeatsWith(equals), dropRepeatsWith(equals)));\n\n    /**\n     * \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n     *\n     * @func\n     * @memberOf R\n     * @since v0.7.0\n     * @category Function\n     * @sig (*... -> *) -> ([*]... -> [*])\n     * @param {Function} fn The function to lift into higher context\n     * @return {Function} The lifted function.\n     * @see R.liftN\n     * @example\n     *\n     *      var madd3 = R.lift(R.curry((a, b, c) => a + b + c));\n     *\n     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n     *\n     *      var madd5 = R.lift(R.curry((a, b, c, d, e) => a + b + c + d + e));\n     *\n     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n     */\n    var lift = _curry1(function lift(fn) {\n        return liftN(fn.length, fn);\n    });\n\n    /**\n     * Returns a partial copy of an object omitting the keys specified.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Object\n     * @sig [String] -> {String: *} -> {String: *}\n     * @param {Array} names an array of String property names to omit from the new object\n     * @param {Object} obj The object to copy from\n     * @return {Object} A new object with properties from `names` not on it.\n     * @see R.pick\n     * @example\n     *\n     *      R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n     */\n    var omit = _curry2(function omit(names, obj) {\n        var result = {};\n        for (var prop in obj) {\n            if (!_contains(prop, names)) {\n                result[prop] = obj[prop];\n            }\n        }\n        return result;\n    });\n\n    /**\n     * Returns the left-to-right Kleisli composition of the provided functions,\n     * each of which must return a value of a type supported by [`chain`](#chain).\n     *\n     * `R.pipeK(f, g, h)` is equivalent to `R.pipe(R.chain(f), R.chain(g), R.chain(h))`.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category Function\n     * @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (m a -> m z)\n     * @param {...Function}\n     * @return {Function}\n     * @see R.composeK\n     * @example\n     *\n     *      //  parseJson :: String -> Maybe *\n     *      //  get :: String -> Object -> Maybe *\n     *\n     *      //  getStateCode :: Maybe String -> Maybe String\n     *      var getStateCode = R.pipeK(\n     *        parseJson,\n     *        get('user'),\n     *        get('address'),\n     *        get('state'),\n     *        R.compose(Maybe.of, R.toUpper)\n     *      );\n     *\n     *      getStateCode(Maybe.of('{\"user\":{\"address\":{\"state\":\"ny\"}}}'));\n     *      //=> Just('NY')\n     *      getStateCode(Maybe.of('[Invalid JSON]'));\n     *      //=> Nothing()\n     */\n    var pipeK = function pipeK() {\n        return composeK.apply(this, reverse(arguments));\n    };\n\n    /**\n     * Returns the string representation of the given value. `eval`'ing the output\n     * should result in a value equivalent to the input value. Many of the built-in\n     * `toString` methods do not satisfy this requirement.\n     *\n     * If the given value is an `[object Object]` with a `toString` method other\n     * than `Object.prototype.toString`, this method is invoked with no arguments\n     * to produce the return value. This means user-defined constructor functions\n     * can provide a suitable `toString` method. For example:\n     *\n     *     function Point(x, y) {\n     *       this.x = x;\n     *       this.y = y;\n     *     }\n     *\n     *     Point.prototype.toString = function() {\n     *       return 'new Point(' + this.x + ', ' + this.y + ')';\n     *     };\n     *\n     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n     *\n     * @func\n     * @memberOf R\n     * @since v0.14.0\n     * @category String\n     * @sig * -> String\n     * @param {*} val\n     * @return {String}\n     * @example\n     *\n     *      R.toString(42); //=> '42'\n     *      R.toString('abc'); //=> '\"abc\"'\n     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n     */\n    var toString = _curry1(function toString(val) {\n        return _toString(val, []);\n    });\n\n    /**\n     * Returns a new list without values in the first argument.\n     * `R.equals` is used to determine equality.\n     *\n     * Acts as a transducer if a transformer is given in list position.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @param {Array} list1 The values to be removed from `list2`.\n     * @param {Array} list2 The array to remove values from.\n     * @return {Array} The new array without values in `list1`.\n     * @see R.transduce\n     * @example\n     *\n     *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n     */\n    var without = _curry2(function (xs, list) {\n        return reject(flip(_contains)(xs), list);\n    });\n\n    // A simple Set type that honours R.equals semantics\n    /* globals Set */\n    // until we figure out why jsdoc chokes on this\n    // @param item The item to add to the Set\n    // @returns {boolean} true if the item did not exist prior, otherwise false\n    //\n    //\n    // @param item The item to check for existence in the Set\n    // @returns {boolean} true if the item exists in the Set, otherwise false\n    //\n    //\n    // Combines the logic for checking whether an item is a member of the set and\n    // for adding a new item to the set.\n    //\n    // @param item       The item to check or add to the Set instance.\n    // @param shouldAdd  If true, the item will be added to the set if it doesn't\n    //                   already exist.\n    // @param set        The set instance to check or add to.\n    // @return {boolean} true if the item already existed, otherwise false.\n    //\n    // distinguish between +0 and -0\n    // these types can all utilise the native Set\n    // set._items['boolean'] holds a two element array\n    // representing [ falseExists, trueExists ]\n    // compare functions for reference equality\n    /* falls through */\n    // reduce the search size of heterogeneous sets by creating buckets\n    // for each type.\n    // scan through all previously applied items\n    var _Set = function () {\n        function _Set() {\n            /* globals Set */\n            this._nativeSet = typeof Set === 'function' ? new Set() : null;\n            this._items = {};\n        }\n        // until we figure out why jsdoc chokes on this\n        // @param item The item to add to the Set\n        // @returns {boolean} true if the item did not exist prior, otherwise false\n        //\n        _Set.prototype.add = function (item) {\n            return !hasOrAdd(item, true, this);\n        };\n        //\n        // @param item The item to check for existence in the Set\n        // @returns {boolean} true if the item exists in the Set, otherwise false\n        //\n        _Set.prototype.has = function (item) {\n            return hasOrAdd(item, false, this);\n        };\n        //\n        // Combines the logic for checking whether an item is a member of the set and\n        // for adding a new item to the set.\n        //\n        // @param item       The item to check or add to the Set instance.\n        // @param shouldAdd  If true, the item will be added to the set if it doesn't\n        //                   already exist.\n        // @param set        The set instance to check or add to.\n        // @return {boolean} true if the item already existed, otherwise false.\n        //\n        function hasOrAdd(item, shouldAdd, set) {\n            var type = typeof item;\n            var prevSize, newSize;\n            switch (type) {\n            case 'string':\n            case 'number':\n                // distinguish between +0 and -0\n                if (item === 0 && 1 / item === -Infinity) {\n                    if (set._items['-0']) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items['-0'] = true;\n                        }\n                        return false;\n                    }\n                }\n                // these types can all utilise the native Set\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize === prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = {};\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    } else if (item in set._items[type]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][item] = true;\n                        }\n                        return false;\n                    }\n                }\n            case 'boolean':\n                // set._items['boolean'] holds a two element array\n                // representing [ falseExists, trueExists ]\n                if (type in set._items) {\n                    var bIdx = item ? 1 : 0;\n                    if (set._items[type][bIdx]) {\n                        return true;\n                    } else {\n                        if (shouldAdd) {\n                            set._items[type][bIdx] = true;\n                        }\n                        return false;\n                    }\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = item ? [\n                            false,\n                            true\n                        ] : [\n                            true,\n                            false\n                        ];\n                    }\n                    return false;\n                }\n            case 'function':\n                // compare functions for reference equality\n                if (set._nativeSet !== null) {\n                    if (shouldAdd) {\n                        prevSize = set._nativeSet.size;\n                        set._nativeSet.add(item);\n                        newSize = set._nativeSet.size;\n                        return newSize > prevSize;\n                    } else {\n                        return set._nativeSet.has(item);\n                    }\n                } else {\n                    if (!(type in set._items)) {\n                        if (shouldAdd) {\n                            set._items[type] = [item];\n                        }\n                        return false;\n                    }\n                    if (!_contains(item, set._items[type])) {\n                        if (shouldAdd) {\n                            set._items[type].push(item);\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            case 'undefined':\n                if (set._items[type]) {\n                    return true;\n                } else {\n                    if (shouldAdd) {\n                        set._items[type] = true;\n                    }\n                    return false;\n                }\n            case 'object':\n                if (item === null) {\n                    if (!set._items['null']) {\n                        if (shouldAdd) {\n                            set._items['null'] = true;\n                        }\n                        return false;\n                    }\n                    return true;\n                }\n            /* falls through */\n            default:\n                // reduce the search size of heterogeneous sets by creating buckets\n                // for each type.\n                type = Object.prototype.toString.call(item);\n                if (!(type in set._items)) {\n                    if (shouldAdd) {\n                        set._items[type] = [item];\n                    }\n                    return false;\n                }\n                // scan through all previously applied items\n                if (!_contains(item, set._items[type])) {\n                    if (shouldAdd) {\n                        set._items[type].push(item);\n                    }\n                    return false;\n                }\n                return true;\n            }\n        }\n        return _Set;\n    }();\n\n    /**\n     * A function wrapping calls to the two functions in an `&&` operation,\n     * returning the result of the first function if it is false-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * false-y value.\n     *\n     * In addition to functions, `R.both` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n     * @see R.and\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.both(gt10, even);\n     *      f(100); //=> true\n     *      f(101); //=> false\n     */\n    var both = _curry2(function both(f, g) {\n        return _isFunction(f) ? function _both() {\n            return f.apply(this, arguments) && g.apply(this, arguments);\n        } : lift(and)(f, g);\n    });\n\n    /**\n     * Takes a function `f` and returns a function `g` such that:\n     *\n     *   - applying `g` to zero or more arguments will give __true__ if applying\n     *     the same arguments to `f` gives a logical __false__ value; and\n     *\n     *   - applying `g` to zero or more arguments will give __false__ if applying\n     *     the same arguments to `f` gives a logical __true__ value.\n     *\n     * `R.complement` will work on all other functors as well.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> *) -> (*... -> Boolean)\n     * @param {Function} f\n     * @return {Function}\n     * @see R.not\n     * @example\n     *\n     *      var isEven = n => n % 2 === 0;\n     *      var isOdd = R.complement(isEven);\n     *      isOdd(21); //=> true\n     *      isOdd(42); //=> false\n     */\n    var complement = lift(not);\n\n    /**\n     * Returns the result of concatenating the given lists or strings.\n     *\n     * Note: `R.concat` expects both arguments to be of the same type,\n     * unlike the native `Array.prototype.concat` method. It will throw\n     * an error if you `concat` an Array with a non-Array value.\n     *\n     * Dispatches to the `concat` method of the first argument, if present.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a] -> [a]\n     * @sig String -> String -> String\n     * @param {Array|String} a\n     * @param {Array|String} b\n     * @return {Array|String}\n     *\n     * @example\n     *\n     *      R.concat([], []); //=> []\n     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n     *      R.concat('ABC', 'DEF'); // 'ABCDEF'\n     */\n    var concat = _curry2(function concat(a, b) {\n        if (a == null || !_isFunction(a.concat)) {\n            throw new TypeError(toString(a) + ' does not have a method named \"concat\"');\n        }\n        if (_isArray(a) && !_isArray(b)) {\n            throw new TypeError(toString(b) + ' is not an array');\n        }\n        return a.concat(b);\n    });\n\n    /**\n     * A function wrapping calls to the two functions in an `||` operation,\n     * returning the result of the first function if it is truth-y and the result\n     * of the second function otherwise. Note that this is short-circuited,\n     * meaning that the second function will not be invoked if the first returns a\n     * truth-y value.\n     *\n     * In addition to functions, `R.either` also accepts any fantasy-land compatible\n     * applicative functor.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category Logic\n     * @sig (*... -> Boolean) -> (*... -> Boolean) -> (*... -> Boolean)\n     * @param {Function} f a predicate\n     * @param {Function} g another predicate\n     * @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n     * @see R.or\n     * @example\n     *\n     *      var gt10 = x => x > 10;\n     *      var even = x => x % 2 === 0;\n     *      var f = R.either(gt10, even);\n     *      f(101); //=> true\n     *      f(8); //=> true\n     */\n    var either = _curry2(function either(f, g) {\n        return _isFunction(f) ? function _either() {\n            return f.apply(this, arguments) || g.apply(this, arguments);\n        } : lift(or)(f, g);\n    });\n\n    /**\n     * Turns a named method with a specified arity into a function that can be\n     * called directly supplied with arguments and a target object.\n     *\n     * The returned function is curried and accepts `arity + 1` parameters where\n     * the final parameter is the target object.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n     * @param {Number} arity Number of arguments the returned function should take\n     *        before the target object.\n     * @param {String} method Name of the method to call.\n     * @return {Function} A new curried function.\n     * @example\n     *\n     *      var sliceFrom = R.invoker(1, 'slice');\n     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n     *      var sliceFrom6 = R.invoker(2, 'slice')(6);\n     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n     */\n    var invoker = _curry2(function invoker(arity, method) {\n        return curryN(arity + 1, function () {\n            var target = arguments[arity];\n            if (target != null && _isFunction(target[method])) {\n                return target[method].apply(target, _slice(arguments, 0, arity));\n            }\n            throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n        });\n    });\n\n    /**\n     * Returns a string made by inserting the `separator` between each element and\n     * concatenating all the elements into a single string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig String -> [a] -> String\n     * @param {Number|String} separator The string used to separate the elements.\n     * @param {Array} xs The elements to join into a string.\n     * @return {String} str The string made by concatenating `xs` with `separator`.\n     * @see R.split\n     * @example\n     *\n     *      var spacer = R.join(' ');\n     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'\n     */\n    var join = invoker(1, 'join');\n\n    /**\n     * Creates a new function that, when invoked, caches the result of calling `fn`\n     * for a given argument set and returns the result. Subsequent calls to the\n     * memoized `fn` with the same argument set will not result in an additional\n     * call to `fn`; instead, the cached result for that set of arguments will be\n     * returned.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Function\n     * @sig (*... -> a) -> (*... -> a)\n     * @param {Function} fn The function to memoize.\n     * @return {Function} Memoized version of `fn`.\n     * @example\n     *\n     *      var count = 0;\n     *      var factorial = R.memoize(n => {\n     *        count += 1;\n     *        return R.product(R.range(1, n + 1));\n     *      });\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      factorial(5); //=> 120\n     *      count; //=> 1\n     */\n    var memoize = _curry1(function memoize(fn) {\n        var cache = {};\n        return _arity(fn.length, function () {\n            var key = toString(arguments);\n            if (!_has(key, cache)) {\n                cache[key] = fn.apply(this, arguments);\n            }\n            return cache[key];\n        });\n    });\n\n    /**\n     * Splits a string into an array of strings based on the given\n     * separator.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category String\n     * @sig (String | RegExp) -> String -> [String]\n     * @param {String|RegExp} sep The pattern.\n     * @param {String} str The string to separate into an array.\n     * @return {Array} The array of strings from `str` separated by `str`.\n     * @see R.join\n     * @example\n     *\n     *      var pathComponents = R.split('/');\n     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n     *\n     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n     */\n    var split = invoker(1, 'split');\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n     * @example\n     *\n     *      R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n     *      R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n     */\n    var symmetricDifference = _curry2(function symmetricDifference(list1, list2) {\n        return concat(difference(list1, list2), difference(list2, list1));\n    });\n\n    /**\n     * Finds the set (i.e. no duplicates) of all elements contained in the first or\n     * second list, but not both. Duplication is determined according to the value\n     * returned by applying the supplied predicate to two list elements.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.19.0\n     * @category Relation\n     * @sig (a -> a -> Boolean) -> [a] -> [a] -> [a]\n     * @param {Function} pred A predicate used to test whether two items are equal.\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The elements in `list1` or `list2`, but not both.\n     * @see R.symmetricDifference, R.difference, R.differenceWith\n     * @example\n     *\n     *      var eqA = R.eqBy(R.prop('a'));\n     *      var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n     *      var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n     *      R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n     */\n    var symmetricDifferenceWith = _curry3(function symmetricDifferenceWith(pred, list1, list2) {\n        return concat(differenceWith(pred, list1, list2), differenceWith(pred, list2, list1));\n    });\n\n    /**\n     * Determines whether a given string matches a given regular expression.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.12.0\n     * @category String\n     * @sig RegExp -> String -> Boolean\n     * @param {RegExp} pattern\n     * @param {String} str\n     * @return {Boolean}\n     * @see R.match\n     * @example\n     *\n     *      R.test(/^x/, 'xyz'); //=> true\n     *      R.test(/^y/, 'xyz'); //=> false\n     */\n    var test = _curry2(function test(pattern, str) {\n        if (!_isRegExp(pattern)) {\n            throw new TypeError('\\u2018test\\u2019 requires a value of type RegExp as its first argument; received ' + toString(pattern));\n        }\n        return _cloneRegExp(pattern).test(str);\n    });\n\n    /**\n     * The lower case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to lower case.\n     * @return {String} The lower case version of `str`.\n     * @see R.toUpper\n     * @example\n     *\n     *      R.toLower('XYZ'); //=> 'xyz'\n     */\n    var toLower = invoker(0, 'toLowerCase');\n\n    /**\n     * The upper case version of a string.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.9.0\n     * @category String\n     * @sig String -> String\n     * @param {String} str The string to upper case.\n     * @return {String} The upper case version of `str`.\n     * @see R.toLower\n     * @example\n     *\n     *      R.toUpper('abc'); //=> 'ABC'\n     */\n    var toUpper = invoker(0, 'toUpperCase');\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list, based upon the value returned by applying the supplied function to\n     * each list element. Prefers the first item if the supplied function produces\n     * the same value on two items. `R.equals` is used for comparison.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.16.0\n     * @category List\n     * @sig (a -> b) -> [a] -> [a]\n     * @param {Function} fn A function used to produce a value to use during comparisons.\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n     */\n    var uniqBy = _curry2(function uniqBy(fn, list) {\n        var set = new _Set();\n        var result = [];\n        var idx = 0;\n        var appliedItem, item;\n        while (idx < list.length) {\n            item = list[idx];\n            appliedItem = fn(item);\n            if (set.add(appliedItem)) {\n                result.push(item);\n            }\n            idx += 1;\n        }\n        return result;\n    });\n\n    /**\n     * Returns a new list containing only one copy of each element in the original\n     * list. `R.equals` is used to determine equality.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category List\n     * @sig [a] -> [a]\n     * @param {Array} list The array to consider.\n     * @return {Array} The list of unique items.\n     * @example\n     *\n     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]\n     *      R.uniq([1, '1']);     //=> [1, '1']\n     *      R.uniq([[42], [42]]); //=> [[42]]\n     */\n    var uniq = uniqBy(identity);\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of those\n     * elements common to both lists.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} list1 The first list.\n     * @param {Array} list2 The second list.\n     * @return {Array} The list of elements found in both `list1` and `list2`.\n     * @see R.intersectionWith\n     * @example\n     *\n     *      R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n     */\n    var intersection = _curry2(function intersection(list1, list2) {\n        var lookupList, filteredList;\n        if (list1.length > list2.length) {\n            lookupList = list1;\n            filteredList = list2;\n        } else {\n            lookupList = list2;\n            filteredList = list1;\n        }\n        return uniq(_filter(flip(_contains)(lookupList), filteredList));\n    });\n\n    /**\n     * Combines two lists into a set (i.e. no duplicates) composed of the elements\n     * of each list.\n     *\n     * @func\n     * @memberOf R\n     * @since v0.1.0\n     * @category Relation\n     * @sig [*] -> [*] -> [*]\n     * @param {Array} as The first list.\n     * @param {Array} bs The second list.\n     * @return {Array} The first and second lists concatenated, with\n     *         duplicates removed.\n     * @example\n     *\n     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n     */\n    var union = _curry2(compose(uniq, _concat));\n\n    var R = {\n        F: F,\n        T: T,\n        __: __,\n        add: add,\n        addIndex: addIndex,\n        adjust: adjust,\n        all: all,\n        allPass: allPass,\n        always: always,\n        and: and,\n        any: any,\n        anyPass: anyPass,\n        ap: ap,\n        aperture: aperture,\n        append: append,\n        apply: apply,\n        applySpec: applySpec,\n        assoc: assoc,\n        assocPath: assocPath,\n        binary: binary,\n        bind: bind,\n        both: both,\n        call: call,\n        chain: chain,\n        clamp: clamp,\n        clone: clone,\n        comparator: comparator,\n        complement: complement,\n        compose: compose,\n        composeK: composeK,\n        composeP: composeP,\n        concat: concat,\n        cond: cond,\n        construct: construct,\n        constructN: constructN,\n        contains: contains,\n        converge: converge,\n        countBy: countBy,\n        curry: curry,\n        curryN: curryN,\n        dec: dec,\n        defaultTo: defaultTo,\n        difference: difference,\n        differenceWith: differenceWith,\n        dissoc: dissoc,\n        dissocPath: dissocPath,\n        divide: divide,\n        drop: drop,\n        dropLast: dropLast,\n        dropLastWhile: dropLastWhile,\n        dropRepeats: dropRepeats,\n        dropRepeatsWith: dropRepeatsWith,\n        dropWhile: dropWhile,\n        either: either,\n        empty: empty,\n        eqBy: eqBy,\n        eqProps: eqProps,\n        equals: equals,\n        evolve: evolve,\n        filter: filter,\n        find: find,\n        findIndex: findIndex,\n        findLast: findLast,\n        findLastIndex: findLastIndex,\n        flatten: flatten,\n        flip: flip,\n        forEach: forEach,\n        fromPairs: fromPairs,\n        groupBy: groupBy,\n        groupWith: groupWith,\n        gt: gt,\n        gte: gte,\n        has: has,\n        hasIn: hasIn,\n        head: head,\n        identical: identical,\n        identity: identity,\n        ifElse: ifElse,\n        inc: inc,\n        indexBy: indexBy,\n        indexOf: indexOf,\n        init: init,\n        insert: insert,\n        insertAll: insertAll,\n        intersection: intersection,\n        intersectionWith: intersectionWith,\n        intersperse: intersperse,\n        into: into,\n        invert: invert,\n        invertObj: invertObj,\n        invoker: invoker,\n        is: is,\n        isArrayLike: isArrayLike,\n        isEmpty: isEmpty,\n        isNil: isNil,\n        join: join,\n        juxt: juxt,\n        keys: keys,\n        keysIn: keysIn,\n        last: last,\n        lastIndexOf: lastIndexOf,\n        length: length,\n        lens: lens,\n        lensIndex: lensIndex,\n        lensPath: lensPath,\n        lensProp: lensProp,\n        lift: lift,\n        liftN: liftN,\n        lt: lt,\n        lte: lte,\n        map: map,\n        mapAccum: mapAccum,\n        mapAccumRight: mapAccumRight,\n        mapObjIndexed: mapObjIndexed,\n        match: match,\n        mathMod: mathMod,\n        max: max,\n        maxBy: maxBy,\n        mean: mean,\n        median: median,\n        memoize: memoize,\n        merge: merge,\n        mergeAll: mergeAll,\n        mergeWith: mergeWith,\n        mergeWithKey: mergeWithKey,\n        min: min,\n        minBy: minBy,\n        modulo: modulo,\n        multiply: multiply,\n        nAry: nAry,\n        negate: negate,\n        none: none,\n        not: not,\n        nth: nth,\n        nthArg: nthArg,\n        objOf: objOf,\n        of: of,\n        omit: omit,\n        once: once,\n        or: or,\n        over: over,\n        pair: pair,\n        partial: partial,\n        partialRight: partialRight,\n        partition: partition,\n        path: path,\n        pathEq: pathEq,\n        pathOr: pathOr,\n        pathSatisfies: pathSatisfies,\n        pick: pick,\n        pickAll: pickAll,\n        pickBy: pickBy,\n        pipe: pipe,\n        pipeK: pipeK,\n        pipeP: pipeP,\n        pluck: pluck,\n        prepend: prepend,\n        product: product,\n        project: project,\n        prop: prop,\n        propEq: propEq,\n        propIs: propIs,\n        propOr: propOr,\n        propSatisfies: propSatisfies,\n        props: props,\n        range: range,\n        reduce: reduce,\n        reduceBy: reduceBy,\n        reduceRight: reduceRight,\n        reduceWhile: reduceWhile,\n        reduced: reduced,\n        reject: reject,\n        remove: remove,\n        repeat: repeat,\n        replace: replace,\n        reverse: reverse,\n        scan: scan,\n        sequence: sequence,\n        set: set,\n        slice: slice,\n        sort: sort,\n        sortBy: sortBy,\n        split: split,\n        splitAt: splitAt,\n        splitEvery: splitEvery,\n        splitWhen: splitWhen,\n        subtract: subtract,\n        sum: sum,\n        symmetricDifference: symmetricDifference,\n        symmetricDifferenceWith: symmetricDifferenceWith,\n        tail: tail,\n        take: take,\n        takeLast: takeLast,\n        takeLastWhile: takeLastWhile,\n        takeWhile: takeWhile,\n        tap: tap,\n        test: test,\n        times: times,\n        toLower: toLower,\n        toPairs: toPairs,\n        toPairsIn: toPairsIn,\n        toString: toString,\n        toUpper: toUpper,\n        transduce: transduce,\n        transpose: transpose,\n        traverse: traverse,\n        trim: trim,\n        tryCatch: tryCatch,\n        type: type,\n        unapply: unapply,\n        unary: unary,\n        uncurryN: uncurryN,\n        unfold: unfold,\n        union: union,\n        unionWith: unionWith,\n        uniq: uniq,\n        uniqBy: uniqBy,\n        uniqWith: uniqWith,\n        unless: unless,\n        unnest: unnest,\n        until: until,\n        update: update,\n        useWith: useWith,\n        values: values,\n        valuesIn: valuesIn,\n        view: view,\n        when: when,\n        where: where,\n        whereEq: whereEq,\n        without: without,\n        wrap: wrap,\n        xprod: xprod,\n        zip: zip,\n        zipObj: zipObj,\n        zipWith: zipWith\n    };\n  /* eslint-env amd */\n\n  /* TEST_ENTRY_POINT */\n\n  if (typeof exports === 'object') {\n    module.exports = R;\n  } else if (typeof define === 'function' && define.amd) {\n    define(function() { return R; });\n  } else {\n    this.R = R;\n  }\n\n}.call(this));\n","module.exports = require('./lib/_stream_duplex.js');\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototypal inheritance, this class\n// prototypally inherits from Readable, and then parasitically from\n// Writable.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n/*<replacement>*/\nvar objectKeys = Object.keys || function (obj) {\n  var keys = [];\n  for (var key in obj) {\n    keys.push(key);\n  }return keys;\n};\n/*</replacement>*/\n\nmodule.exports = Duplex;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nvar Readable = require('./_stream_readable');\nvar Writable = require('./_stream_writable');\n\nutil.inherits(Duplex, Readable);\n\n{\n  // avoid scope creep, the keys array can then be collected\n  var keys = objectKeys(Writable.prototype);\n  for (var v = 0; v < keys.length; v++) {\n    var method = keys[v];\n    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n  }\n}\n\nfunction Duplex(options) {\n  if (!(this instanceof Duplex)) return new Duplex(options);\n\n  Readable.call(this, options);\n  Writable.call(this, options);\n\n  if (options && options.readable === false) this.readable = false;\n\n  if (options && options.writable === false) this.writable = false;\n\n  this.allowHalfOpen = true;\n  if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;\n\n  this.once('end', onend);\n}\n\nObject.defineProperty(Duplex.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// the no-half-open enforcer\nfunction onend() {\n  // if we allow half-open state, or if the writable side ended,\n  // then we're ok.\n  if (this.allowHalfOpen || this._writableState.ended) return;\n\n  // no more data can be written.\n  // But allow more writes to happen in this tick.\n  pna.nextTick(onEndNT, this);\n}\n\nfunction onEndNT(self) {\n  self.end();\n}\n\nObject.defineProperty(Duplex.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed && this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (this._readableState === undefined || this._writableState === undefined) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n    this._writableState.destroyed = value;\n  }\n});\n\nDuplex.prototype._destroy = function (err, cb) {\n  this.push(null);\n  this.end();\n\n  pna.nextTick(cb, err);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\n'use strict';\n\nmodule.exports = PassThrough;\n\nvar Transform = require('./_stream_transform');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(PassThrough, Transform);\n\nfunction PassThrough(options) {\n  if (!(this instanceof PassThrough)) return new PassThrough(options);\n\n  Transform.call(this, options);\n}\n\nPassThrough.prototype._transform = function (chunk, encoding, cb) {\n  cb(null, chunk);\n};","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Readable;\n\n/*<replacement>*/\nvar isArray = require('isarray');\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nReadable.ReadableState = ReadableState;\n\n/*<replacement>*/\nvar EE = require('events').EventEmitter;\n\nvar EElistenerCount = function (emitter, type) {\n  return emitter.listeners(type).length;\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar debugUtil = require('util');\nvar debug = void 0;\nif (debugUtil && debugUtil.debuglog) {\n  debug = debugUtil.debuglog('stream');\n} else {\n  debug = function () {};\n}\n/*</replacement>*/\n\nvar BufferList = require('./internal/streams/BufferList');\nvar destroyImpl = require('./internal/streams/destroy');\nvar StringDecoder;\n\nutil.inherits(Readable, Stream);\n\nvar kProxyEvents = ['error', 'close', 'destroy', 'pause', 'resume'];\n\nfunction prependListener(emitter, event, fn) {\n  // Sadly this is not cacheable as some libraries bundle their own\n  // event emitter implementation with them.\n  if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn);\n\n  // This is a hack to make sure that our error handler is attached before any\n  // userland ones.  NEVER DO THIS. This is here only because this code needs\n  // to continue to work with older versions of Node.js that do not include\n  // the prependListener() method. The goal is to eventually remove this hack.\n  if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);else if (isArray(emitter._events[event])) emitter._events[event].unshift(fn);else emitter._events[event] = [fn, emitter._events[event]];\n}\n\nfunction ReadableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag. Used to make read(n) ignore n and to\n  // make all the buffer merging and length checks go away\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode;\n\n  // the point at which it stops calling _read() to fill the buffer\n  // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n  var hwm = options.highWaterMark;\n  var readableHwm = options.readableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (readableHwm || readableHwm === 0)) this.highWaterMark = readableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // A linked list is used to store data chunks instead of an array because the\n  // linked list can remove elements from the beginning faster than\n  // array.shift()\n  this.buffer = new BufferList();\n  this.length = 0;\n  this.pipes = null;\n  this.pipesCount = 0;\n  this.flowing = null;\n  this.ended = false;\n  this.endEmitted = false;\n  this.reading = false;\n\n  // a flag to be able to tell if the event 'readable'/'data' is emitted\n  // immediately, or on a later tick.  We set this to true at first, because\n  // any actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first read call.\n  this.sync = true;\n\n  // whenever we return null, then we set a flag to say\n  // that we're awaiting a 'readable' event emission.\n  this.needReadable = false;\n  this.emittedReadable = false;\n  this.readableListening = false;\n  this.resumeScheduled = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // the number of writers that are awaiting a drain event in .pipe()s\n  this.awaitDrain = 0;\n\n  // if true, a maybeReadMore has been scheduled\n  this.readingMore = false;\n\n  this.decoder = null;\n  this.encoding = null;\n  if (options.encoding) {\n    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n    this.decoder = new StringDecoder(options.encoding);\n    this.encoding = options.encoding;\n  }\n}\n\nfunction Readable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  if (!(this instanceof Readable)) return new Readable(options);\n\n  this._readableState = new ReadableState(options, this);\n\n  // legacy\n  this.readable = true;\n\n  if (options) {\n    if (typeof options.read === 'function') this._read = options.read;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n  }\n\n  Stream.call(this);\n}\n\nObject.defineProperty(Readable.prototype, 'destroyed', {\n  get: function () {\n    if (this._readableState === undefined) {\n      return false;\n    }\n    return this._readableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._readableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._readableState.destroyed = value;\n  }\n});\n\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function (err, cb) {\n  this.push(null);\n  cb(err);\n};\n\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function (chunk, encoding) {\n  var state = this._readableState;\n  var skipChunkCheck;\n\n  if (!state.objectMode) {\n    if (typeof chunk === 'string') {\n      encoding = encoding || state.defaultEncoding;\n      if (encoding !== state.encoding) {\n        chunk = Buffer.from(chunk, encoding);\n        encoding = '';\n      }\n      skipChunkCheck = true;\n    }\n  } else {\n    skipChunkCheck = true;\n  }\n\n  return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);\n};\n\n// Unshift should *always* be something directly out of read()\nReadable.prototype.unshift = function (chunk) {\n  return readableAddChunk(this, chunk, null, true, false);\n};\n\nfunction readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {\n  var state = stream._readableState;\n  if (chunk === null) {\n    state.reading = false;\n    onEofChunk(stream, state);\n  } else {\n    var er;\n    if (!skipChunkCheck) er = chunkInvalid(state, chunk);\n    if (er) {\n      stream.emit('error', er);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n      if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) {\n        chunk = _uint8ArrayToBuffer(chunk);\n      }\n\n      if (addToFront) {\n        if (state.endEmitted) stream.emit('error', new Error('stream.unshift() after end event'));else addChunk(stream, state, chunk, true);\n      } else if (state.ended) {\n        stream.emit('error', new Error('stream.push() after EOF'));\n      } else {\n        state.reading = false;\n        if (state.decoder && !encoding) {\n          chunk = state.decoder.write(chunk);\n          if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);else maybeReadMore(stream, state);\n        } else {\n          addChunk(stream, state, chunk, false);\n        }\n      }\n    } else if (!addToFront) {\n      state.reading = false;\n    }\n  }\n\n  return needMoreData(state);\n}\n\nfunction addChunk(stream, state, chunk, addToFront) {\n  if (state.flowing && state.length === 0 && !state.sync) {\n    stream.emit('data', chunk);\n    stream.read(0);\n  } else {\n    // update the buffer info.\n    state.length += state.objectMode ? 1 : chunk.length;\n    if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);\n\n    if (state.needReadable) emitReadable(stream);\n  }\n  maybeReadMore(stream, state);\n}\n\nfunction chunkInvalid(state, chunk) {\n  var er;\n  if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  return er;\n}\n\n// if it's past the high water mark, we can push in some more.\n// Also, if we have no data yet, we can stand some\n// more bytes.  This is to work around cases where hwm=0,\n// such as the repl.  Also, if the push() triggered a\n// readable event, and the user called read(largeNumber) such that\n// needReadable was set, then we ought to push more, so that another\n// 'readable' event will be triggered.\nfunction needMoreData(state) {\n  return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);\n}\n\nReadable.prototype.isPaused = function () {\n  return this._readableState.flowing === false;\n};\n\n// backwards compatibility.\nReadable.prototype.setEncoding = function (enc) {\n  if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;\n  this._readableState.decoder = new StringDecoder(enc);\n  this._readableState.encoding = enc;\n  return this;\n};\n\n// Don't raise the hwm > 8MB\nvar MAX_HWM = 0x800000;\nfunction computeNewHighWaterMark(n) {\n  if (n >= MAX_HWM) {\n    n = MAX_HWM;\n  } else {\n    // Get the next highest power of 2 to prevent increasing hwm excessively in\n    // tiny amounts\n    n--;\n    n |= n >>> 1;\n    n |= n >>> 2;\n    n |= n >>> 4;\n    n |= n >>> 8;\n    n |= n >>> 16;\n    n++;\n  }\n  return n;\n}\n\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n  if (n <= 0 || state.length === 0 && state.ended) return 0;\n  if (state.objectMode) return 1;\n  if (n !== n) {\n    // Only flow one buffer at a time\n    if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;\n  }\n  // If we're asking for more than the current hwm, then raise the hwm.\n  if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n  if (n <= state.length) return n;\n  // Don't have enough\n  if (!state.ended) {\n    state.needReadable = true;\n    return 0;\n  }\n  return state.length;\n}\n\n// you can override either this method, or the async _read(n) below.\nReadable.prototype.read = function (n) {\n  debug('read', n);\n  n = parseInt(n, 10);\n  var state = this._readableState;\n  var nOrig = n;\n\n  if (n !== 0) state.emittedReadable = false;\n\n  // if we're doing read(0) to trigger a readable event, but we\n  // already have a bunch of data in the buffer, then just trigger\n  // the 'readable' event and move on.\n  if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {\n    debug('read: emitReadable', state.length, state.ended);\n    if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);\n    return null;\n  }\n\n  n = howMuchToRead(n, state);\n\n  // if we've ended, and we're now clear, then finish it up.\n  if (n === 0 && state.ended) {\n    if (state.length === 0) endReadable(this);\n    return null;\n  }\n\n  // All the actual chunk generation logic needs to be\n  // *below* the call to _read.  The reason is that in certain\n  // synthetic stream cases, such as passthrough streams, _read\n  // may be a completely synchronous operation which may change\n  // the state of the read buffer, providing enough data when\n  // before there was *not* enough.\n  //\n  // So, the steps are:\n  // 1. Figure out what the state of things will be after we do\n  // a read from the buffer.\n  //\n  // 2. If that resulting state will trigger a _read, then call _read.\n  // Note that this may be asynchronous, or synchronous.  Yes, it is\n  // deeply ugly to write APIs this way, but that still doesn't mean\n  // that the Readable class should behave improperly, as streams are\n  // designed to be sync/async agnostic.\n  // Take note if the _read call is sync or async (ie, if the read call\n  // has returned yet), so that we know whether or not it's safe to emit\n  // 'readable' etc.\n  //\n  // 3. Actually pull the requested chunks out of the buffer and return.\n\n  // if we need a readable event, then we need to do some reading.\n  var doRead = state.needReadable;\n  debug('need readable', doRead);\n\n  // if we currently have less than the highWaterMark, then also read some\n  if (state.length === 0 || state.length - n < state.highWaterMark) {\n    doRead = true;\n    debug('length less than watermark', doRead);\n  }\n\n  // however, if we've ended, then there's no point, and if we're already\n  // reading, then it's unnecessary.\n  if (state.ended || state.reading) {\n    doRead = false;\n    debug('reading or ended', doRead);\n  } else if (doRead) {\n    debug('do read');\n    state.reading = true;\n    state.sync = true;\n    // if the length is currently zero, then we *need* a readable event.\n    if (state.length === 0) state.needReadable = true;\n    // call internal read method\n    this._read(state.highWaterMark);\n    state.sync = false;\n    // If _read pushed data synchronously, then `reading` will be false,\n    // and we need to re-evaluate how much data we can return to the user.\n    if (!state.reading) n = howMuchToRead(nOrig, state);\n  }\n\n  var ret;\n  if (n > 0) ret = fromList(n, state);else ret = null;\n\n  if (ret === null) {\n    state.needReadable = true;\n    n = 0;\n  } else {\n    state.length -= n;\n  }\n\n  if (state.length === 0) {\n    // If we have nothing in the buffer, then we want to know\n    // as soon as we *do* get something into the buffer.\n    if (!state.ended) state.needReadable = true;\n\n    // If we tried to read() past the EOF, then emit end on the next tick.\n    if (nOrig !== n && state.ended) endReadable(this);\n  }\n\n  if (ret !== null) this.emit('data', ret);\n\n  return ret;\n};\n\nfunction onEofChunk(stream, state) {\n  if (state.ended) return;\n  if (state.decoder) {\n    var chunk = state.decoder.end();\n    if (chunk && chunk.length) {\n      state.buffer.push(chunk);\n      state.length += state.objectMode ? 1 : chunk.length;\n    }\n  }\n  state.ended = true;\n\n  // emit 'readable' now to make sure it gets picked up.\n  emitReadable(stream);\n}\n\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n  var state = stream._readableState;\n  state.needReadable = false;\n  if (!state.emittedReadable) {\n    debug('emitReadable', state.flowing);\n    state.emittedReadable = true;\n    if (state.sync) pna.nextTick(emitReadable_, stream);else emitReadable_(stream);\n  }\n}\n\nfunction emitReadable_(stream) {\n  debug('emit readable');\n  stream.emit('readable');\n  flow(stream);\n}\n\n// at this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n  if (!state.readingMore) {\n    state.readingMore = true;\n    pna.nextTick(maybeReadMore_, stream, state);\n  }\n}\n\nfunction maybeReadMore_(stream, state) {\n  var len = state.length;\n  while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {\n    debug('maybeReadMore read 0');\n    stream.read(0);\n    if (len === state.length)\n      // didn't get any data, stop spinning.\n      break;else len = state.length;\n  }\n  state.readingMore = false;\n}\n\n// abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function (n) {\n  this.emit('error', new Error('_read() is not implemented'));\n};\n\nReadable.prototype.pipe = function (dest, pipeOpts) {\n  var src = this;\n  var state = this._readableState;\n\n  switch (state.pipesCount) {\n    case 0:\n      state.pipes = dest;\n      break;\n    case 1:\n      state.pipes = [state.pipes, dest];\n      break;\n    default:\n      state.pipes.push(dest);\n      break;\n  }\n  state.pipesCount += 1;\n  debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);\n\n  var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n\n  var endFn = doEnd ? onend : unpipe;\n  if (state.endEmitted) pna.nextTick(endFn);else src.once('end', endFn);\n\n  dest.on('unpipe', onunpipe);\n  function onunpipe(readable, unpipeInfo) {\n    debug('onunpipe');\n    if (readable === src) {\n      if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n        unpipeInfo.hasUnpiped = true;\n        cleanup();\n      }\n    }\n  }\n\n  function onend() {\n    debug('onend');\n    dest.end();\n  }\n\n  // when the dest drains, it reduces the awaitDrain counter\n  // on the source.  This would be more elegant with a .once()\n  // handler in flow(), but adding and removing repeatedly is\n  // too slow.\n  var ondrain = pipeOnDrain(src);\n  dest.on('drain', ondrain);\n\n  var cleanedUp = false;\n  function cleanup() {\n    debug('cleanup');\n    // cleanup event handlers once the pipe is broken\n    dest.removeListener('close', onclose);\n    dest.removeListener('finish', onfinish);\n    dest.removeListener('drain', ondrain);\n    dest.removeListener('error', onerror);\n    dest.removeListener('unpipe', onunpipe);\n    src.removeListener('end', onend);\n    src.removeListener('end', unpipe);\n    src.removeListener('data', ondata);\n\n    cleanedUp = true;\n\n    // if the reader is waiting for a drain event from this\n    // specific writer, then it would cause it to never start\n    // flowing again.\n    // So, if this is awaiting a drain, then we just call it now.\n    // If we don't know, then assume that we are waiting for one.\n    if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n  }\n\n  // If the user pushes more data while we're writing to dest then we'll end up\n  // in ondata again. However, we only want to increase awaitDrain once because\n  // dest will only emit one 'drain' event for the multiple writes.\n  // => Introduce a guard on increasing awaitDrain.\n  var increasedAwaitDrain = false;\n  src.on('data', ondata);\n  function ondata(chunk) {\n    debug('ondata');\n    increasedAwaitDrain = false;\n    var ret = dest.write(chunk);\n    if (false === ret && !increasedAwaitDrain) {\n      // If the user unpiped during `dest.write()`, it is possible\n      // to get stuck in a permanently paused state if that write\n      // also returned false.\n      // => Check whether `dest` is still a piping destination.\n      if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {\n        debug('false write response, pause', src._readableState.awaitDrain);\n        src._readableState.awaitDrain++;\n        increasedAwaitDrain = true;\n      }\n      src.pause();\n    }\n  }\n\n  // if the dest has an error, then stop piping into it.\n  // however, don't suppress the throwing behavior for this.\n  function onerror(er) {\n    debug('onerror', er);\n    unpipe();\n    dest.removeListener('error', onerror);\n    if (EElistenerCount(dest, 'error') === 0) dest.emit('error', er);\n  }\n\n  // Make sure our error handler is attached before userland ones.\n  prependListener(dest, 'error', onerror);\n\n  // Both close and finish should trigger unpipe, but only once.\n  function onclose() {\n    dest.removeListener('finish', onfinish);\n    unpipe();\n  }\n  dest.once('close', onclose);\n  function onfinish() {\n    debug('onfinish');\n    dest.removeListener('close', onclose);\n    unpipe();\n  }\n  dest.once('finish', onfinish);\n\n  function unpipe() {\n    debug('unpipe');\n    src.unpipe(dest);\n  }\n\n  // tell the dest that it's being piped to\n  dest.emit('pipe', src);\n\n  // start the flow if it hasn't been started already.\n  if (!state.flowing) {\n    debug('pipe resume');\n    src.resume();\n  }\n\n  return dest;\n};\n\nfunction pipeOnDrain(src) {\n  return function () {\n    var state = src._readableState;\n    debug('pipeOnDrain', state.awaitDrain);\n    if (state.awaitDrain) state.awaitDrain--;\n    if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {\n      state.flowing = true;\n      flow(src);\n    }\n  };\n}\n\nReadable.prototype.unpipe = function (dest) {\n  var state = this._readableState;\n  var unpipeInfo = { hasUnpiped: false };\n\n  // if we're not piping anywhere, then do nothing.\n  if (state.pipesCount === 0) return this;\n\n  // just one destination.  most common case.\n  if (state.pipesCount === 1) {\n    // passed in one, but it's not the right one.\n    if (dest && dest !== state.pipes) return this;\n\n    if (!dest) dest = state.pipes;\n\n    // got a match.\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n    if (dest) dest.emit('unpipe', this, unpipeInfo);\n    return this;\n  }\n\n  // slow case. multiple pipe destinations.\n\n  if (!dest) {\n    // remove all.\n    var dests = state.pipes;\n    var len = state.pipesCount;\n    state.pipes = null;\n    state.pipesCount = 0;\n    state.flowing = false;\n\n    for (var i = 0; i < len; i++) {\n      dests[i].emit('unpipe', this, unpipeInfo);\n    }return this;\n  }\n\n  // try to find the right one.\n  var index = indexOf(state.pipes, dest);\n  if (index === -1) return this;\n\n  state.pipes.splice(index, 1);\n  state.pipesCount -= 1;\n  if (state.pipesCount === 1) state.pipes = state.pipes[0];\n\n  dest.emit('unpipe', this, unpipeInfo);\n\n  return this;\n};\n\n// set up data events if they are asked for\n// Ensure readable listeners eventually get something\nReadable.prototype.on = function (ev, fn) {\n  var res = Stream.prototype.on.call(this, ev, fn);\n\n  if (ev === 'data') {\n    // Start flowing on next tick if stream isn't explicitly paused\n    if (this._readableState.flowing !== false) this.resume();\n  } else if (ev === 'readable') {\n    var state = this._readableState;\n    if (!state.endEmitted && !state.readableListening) {\n      state.readableListening = state.needReadable = true;\n      state.emittedReadable = false;\n      if (!state.reading) {\n        pna.nextTick(nReadingNextTick, this);\n      } else if (state.length) {\n        emitReadable(this);\n      }\n    }\n  }\n\n  return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\n\nfunction nReadingNextTick(self) {\n  debug('readable nexttick read 0');\n  self.read(0);\n}\n\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function () {\n  var state = this._readableState;\n  if (!state.flowing) {\n    debug('resume');\n    state.flowing = true;\n    resume(this, state);\n  }\n  return this;\n};\n\nfunction resume(stream, state) {\n  if (!state.resumeScheduled) {\n    state.resumeScheduled = true;\n    pna.nextTick(resume_, stream, state);\n  }\n}\n\nfunction resume_(stream, state) {\n  if (!state.reading) {\n    debug('resume read 0');\n    stream.read(0);\n  }\n\n  state.resumeScheduled = false;\n  state.awaitDrain = 0;\n  stream.emit('resume');\n  flow(stream);\n  if (state.flowing && !state.reading) stream.read(0);\n}\n\nReadable.prototype.pause = function () {\n  debug('call pause flowing=%j', this._readableState.flowing);\n  if (false !== this._readableState.flowing) {\n    debug('pause');\n    this._readableState.flowing = false;\n    this.emit('pause');\n  }\n  return this;\n};\n\nfunction flow(stream) {\n  var state = stream._readableState;\n  debug('flow', state.flowing);\n  while (state.flowing && stream.read() !== null) {}\n}\n\n// wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function (stream) {\n  var _this = this;\n\n  var state = this._readableState;\n  var paused = false;\n\n  stream.on('end', function () {\n    debug('wrapped end');\n    if (state.decoder && !state.ended) {\n      var chunk = state.decoder.end();\n      if (chunk && chunk.length) _this.push(chunk);\n    }\n\n    _this.push(null);\n  });\n\n  stream.on('data', function (chunk) {\n    debug('wrapped data');\n    if (state.decoder) chunk = state.decoder.write(chunk);\n\n    // don't skip over falsy values in objectMode\n    if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;\n\n    var ret = _this.push(chunk);\n    if (!ret) {\n      paused = true;\n      stream.pause();\n    }\n  });\n\n  // proxy all the other methods.\n  // important when wrapping filters and duplexes.\n  for (var i in stream) {\n    if (this[i] === undefined && typeof stream[i] === 'function') {\n      this[i] = function (method) {\n        return function () {\n          return stream[method].apply(stream, arguments);\n        };\n      }(i);\n    }\n  }\n\n  // proxy certain important events.\n  for (var n = 0; n < kProxyEvents.length; n++) {\n    stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));\n  }\n\n  // when we try to consume some more bytes, simply unpause the\n  // underlying stream.\n  this._read = function (n) {\n    debug('wrapped _read', n);\n    if (paused) {\n      paused = false;\n      stream.resume();\n    }\n  };\n\n  return this;\n};\n\nObject.defineProperty(Readable.prototype, 'readableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._readableState.highWaterMark;\n  }\n});\n\n// exposed for testing purposes only.\nReadable._fromList = fromList;\n\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n  // nothing buffered\n  if (state.length === 0) return null;\n\n  var ret;\n  if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {\n    // read it all, truncate the list\n    if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);\n    state.buffer.clear();\n  } else {\n    // read part of list\n    ret = fromListPartial(n, state.buffer, state.decoder);\n  }\n\n  return ret;\n}\n\n// Extracts only enough buffered data to satisfy the amount requested.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromListPartial(n, list, hasStrings) {\n  var ret;\n  if (n < list.head.data.length) {\n    // slice is the same for buffers and strings\n    ret = list.head.data.slice(0, n);\n    list.head.data = list.head.data.slice(n);\n  } else if (n === list.head.data.length) {\n    // first chunk is a perfect match\n    ret = list.shift();\n  } else {\n    // result spans more than one buffer\n    ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);\n  }\n  return ret;\n}\n\n// Copies a specified amount of characters from the list of buffered data\n// chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBufferString(n, list) {\n  var p = list.head;\n  var c = 1;\n  var ret = p.data;\n  n -= ret.length;\n  while (p = p.next) {\n    var str = p.data;\n    var nb = n > str.length ? str.length : n;\n    if (nb === str.length) ret += str;else ret += str.slice(0, n);\n    n -= nb;\n    if (n === 0) {\n      if (nb === str.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = str.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\n// Copies a specified amount of bytes from the list of buffered data chunks.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction copyFromBuffer(n, list) {\n  var ret = Buffer.allocUnsafe(n);\n  var p = list.head;\n  var c = 1;\n  p.data.copy(ret);\n  n -= p.data.length;\n  while (p = p.next) {\n    var buf = p.data;\n    var nb = n > buf.length ? buf.length : n;\n    buf.copy(ret, ret.length - n, 0, nb);\n    n -= nb;\n    if (n === 0) {\n      if (nb === buf.length) {\n        ++c;\n        if (p.next) list.head = p.next;else list.head = list.tail = null;\n      } else {\n        list.head = p;\n        p.data = buf.slice(nb);\n      }\n      break;\n    }\n    ++c;\n  }\n  list.length -= c;\n  return ret;\n}\n\nfunction endReadable(stream) {\n  var state = stream._readableState;\n\n  // If we get here before consuming all the bytes, then that is a\n  // bug in node.  Should never happen.\n  if (state.length > 0) throw new Error('\"endReadable()\" called on non-empty stream');\n\n  if (!state.endEmitted) {\n    state.ended = true;\n    pna.nextTick(endReadableNT, state, stream);\n  }\n}\n\nfunction endReadableNT(state, stream) {\n  // Check that we didn't get one last unshift.\n  if (!state.endEmitted && state.length === 0) {\n    state.endEmitted = true;\n    stream.readable = false;\n    stream.emit('end');\n  }\n}\n\nfunction indexOf(xs, x) {\n  for (var i = 0, l = xs.length; i < l; i++) {\n    if (xs[i] === x) return i;\n  }\n  return -1;\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\n'use strict';\n\nmodule.exports = Transform;\n\nvar Duplex = require('./_stream_duplex');\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\nutil.inherits(Transform, Duplex);\n\nfunction afterTransform(er, data) {\n  var ts = this._transformState;\n  ts.transforming = false;\n\n  var cb = ts.writecb;\n\n  if (!cb) {\n    return this.emit('error', new Error('write callback called multiple times'));\n  }\n\n  ts.writechunk = null;\n  ts.writecb = null;\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    this.push(data);\n\n  cb(er);\n\n  var rs = this._readableState;\n  rs.reading = false;\n  if (rs.needReadable || rs.length < rs.highWaterMark) {\n    this._read(rs.highWaterMark);\n  }\n}\n\nfunction Transform(options) {\n  if (!(this instanceof Transform)) return new Transform(options);\n\n  Duplex.call(this, options);\n\n  this._transformState = {\n    afterTransform: afterTransform.bind(this),\n    needTransform: false,\n    transforming: false,\n    writecb: null,\n    writechunk: null,\n    writeencoding: null\n  };\n\n  // start out asking for a readable event once data is transformed.\n  this._readableState.needReadable = true;\n\n  // we have implemented the _read method, and done the other things\n  // that Readable wants before the first _read call, so unset the\n  // sync guard flag.\n  this._readableState.sync = false;\n\n  if (options) {\n    if (typeof options.transform === 'function') this._transform = options.transform;\n\n    if (typeof options.flush === 'function') this._flush = options.flush;\n  }\n\n  // When the writable side finishes, then flush out anything remaining.\n  this.on('prefinish', prefinish);\n}\n\nfunction prefinish() {\n  var _this = this;\n\n  if (typeof this._flush === 'function') {\n    this._flush(function (er, data) {\n      done(_this, er, data);\n    });\n  } else {\n    done(this, null, null);\n  }\n}\n\nTransform.prototype.push = function (chunk, encoding) {\n  this._transformState.needTransform = false;\n  return Duplex.prototype.push.call(this, chunk, encoding);\n};\n\n// This is the part where you do stuff!\n// override this function in implementation classes.\n// 'chunk' is an input chunk.\n//\n// Call `push(newChunk)` to pass along transformed output\n// to the readable side.  You may call 'push' zero or more times.\n//\n// Call `cb(err)` when you are done with this chunk.  If you pass\n// an error, then that'll put the hurt on the whole operation.  If you\n// never call cb(), then you'll never get another chunk.\nTransform.prototype._transform = function (chunk, encoding, cb) {\n  throw new Error('_transform() is not implemented');\n};\n\nTransform.prototype._write = function (chunk, encoding, cb) {\n  var ts = this._transformState;\n  ts.writecb = cb;\n  ts.writechunk = chunk;\n  ts.writeencoding = encoding;\n  if (!ts.transforming) {\n    var rs = this._readableState;\n    if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);\n  }\n};\n\n// Doesn't matter what the args are here.\n// _transform does all the work.\n// That we got here means that the readable side wants more data.\nTransform.prototype._read = function (n) {\n  var ts = this._transformState;\n\n  if (ts.writechunk !== null && ts.writecb && !ts.transforming) {\n    ts.transforming = true;\n    this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);\n  } else {\n    // mark that we need a transform, so that any data that comes in\n    // will get processed, now that we've asked for it.\n    ts.needTransform = true;\n  }\n};\n\nTransform.prototype._destroy = function (err, cb) {\n  var _this2 = this;\n\n  Duplex.prototype._destroy.call(this, err, function (err2) {\n    cb(err2);\n    _this2.emit('close');\n  });\n};\n\nfunction done(stream, er, data) {\n  if (er) return stream.emit('error', er);\n\n  if (data != null) // single equals check for both `null` and `undefined`\n    stream.push(data);\n\n  // if there's nothing in the write buffer, then that means\n  // that nothing more will ever be provided\n  if (stream._writableState.length) throw new Error('Calling transform done when ws.length != 0');\n\n  if (stream._transformState.transforming) throw new Error('Calling transform done when still transforming');\n\n  return stream.push(null);\n}","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// A bit simpler than readable streams.\n// Implement an async ._write(chunk, encoding, cb), and it'll handle all\n// the drain event emission and buffering.\n\n'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\nmodule.exports = Writable;\n\n/* <replacement> */\nfunction WriteReq(chunk, encoding, cb) {\n  this.chunk = chunk;\n  this.encoding = encoding;\n  this.callback = cb;\n  this.next = null;\n}\n\n// It seems a linked list but it is not\n// there will be only 2 of these for each stream\nfunction CorkedRequest(state) {\n  var _this = this;\n\n  this.next = null;\n  this.entry = null;\n  this.finish = function () {\n    onCorkedFinish(_this, state);\n  };\n}\n/* </replacement> */\n\n/*<replacement>*/\nvar asyncWrite = !process.browser && ['v0.10', 'v0.9.'].indexOf(process.version.slice(0, 5)) > -1 ? setImmediate : pna.nextTick;\n/*</replacement>*/\n\n/*<replacement>*/\nvar Duplex;\n/*</replacement>*/\n\nWritable.WritableState = WritableState;\n\n/*<replacement>*/\nvar util = require('core-util-is');\nutil.inherits = require('inherits');\n/*</replacement>*/\n\n/*<replacement>*/\nvar internalUtil = {\n  deprecate: require('util-deprecate')\n};\n/*</replacement>*/\n\n/*<replacement>*/\nvar Stream = require('./internal/streams/stream');\n/*</replacement>*/\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\nvar OurUint8Array = global.Uint8Array || function () {};\nfunction _uint8ArrayToBuffer(chunk) {\n  return Buffer.from(chunk);\n}\nfunction _isUint8Array(obj) {\n  return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;\n}\n\n/*</replacement>*/\n\nvar destroyImpl = require('./internal/streams/destroy');\n\nutil.inherits(Writable, Stream);\n\nfunction nop() {}\n\nfunction WritableState(options, stream) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  options = options || {};\n\n  // Duplex streams are both readable and writable, but share\n  // the same options object.\n  // However, some cases require setting options to different\n  // values for the readable and the writable sides of the duplex stream.\n  // These options can be provided separately as readableXXX and writableXXX.\n  var isDuplex = stream instanceof Duplex;\n\n  // object stream flag to indicate whether or not this stream\n  // contains buffers or objects.\n  this.objectMode = !!options.objectMode;\n\n  if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode;\n\n  // the point at which write() starts returning false\n  // Note: 0 is a valid value, means that we always return false if\n  // the entire buffer is not flushed immediately on write()\n  var hwm = options.highWaterMark;\n  var writableHwm = options.writableHighWaterMark;\n  var defaultHwm = this.objectMode ? 16 : 16 * 1024;\n\n  if (hwm || hwm === 0) this.highWaterMark = hwm;else if (isDuplex && (writableHwm || writableHwm === 0)) this.highWaterMark = writableHwm;else this.highWaterMark = defaultHwm;\n\n  // cast to ints.\n  this.highWaterMark = Math.floor(this.highWaterMark);\n\n  // if _final has been called\n  this.finalCalled = false;\n\n  // drain event flag.\n  this.needDrain = false;\n  // at the start of calling end()\n  this.ending = false;\n  // when end() has been called, and returned\n  this.ended = false;\n  // when 'finish' is emitted\n  this.finished = false;\n\n  // has it been destroyed\n  this.destroyed = false;\n\n  // should we decode strings into buffers before passing to _write?\n  // this is here so that some node-core streams can optimize string\n  // handling at a lower level.\n  var noDecode = options.decodeStrings === false;\n  this.decodeStrings = !noDecode;\n\n  // Crypto is kind of old and crusty.  Historically, its default string\n  // encoding is 'binary' so we have to make this configurable.\n  // Everything else in the universe uses 'utf8', though.\n  this.defaultEncoding = options.defaultEncoding || 'utf8';\n\n  // not an actual buffer we keep track of, but a measurement\n  // of how much we're waiting to get pushed to some underlying\n  // socket or file.\n  this.length = 0;\n\n  // a flag to see when we're in the middle of a write.\n  this.writing = false;\n\n  // when true all writes will be buffered until .uncork() call\n  this.corked = 0;\n\n  // a flag to be able to tell if the onwrite cb is called immediately,\n  // or on a later tick.  We set this to true at first, because any\n  // actions that shouldn't happen until \"later\" should generally also\n  // not happen before the first write call.\n  this.sync = true;\n\n  // a flag to know if we're processing previously buffered items, which\n  // may call the _write() callback in the same tick, so that we don't\n  // end up in an overlapped onwrite situation.\n  this.bufferProcessing = false;\n\n  // the callback that's passed to _write(chunk,cb)\n  this.onwrite = function (er) {\n    onwrite(stream, er);\n  };\n\n  // the callback that the user supplies to write(chunk,encoding,cb)\n  this.writecb = null;\n\n  // the amount that is being written when _write is called.\n  this.writelen = 0;\n\n  this.bufferedRequest = null;\n  this.lastBufferedRequest = null;\n\n  // number of pending user-supplied write callbacks\n  // this must be 0 before 'finish' can be emitted\n  this.pendingcb = 0;\n\n  // emit prefinish if the only thing we're waiting for is _write cbs\n  // This is relevant for synchronous Transform streams\n  this.prefinished = false;\n\n  // True if the error was already emitted and should not be thrown again\n  this.errorEmitted = false;\n\n  // count buffered requests\n  this.bufferedRequestCount = 0;\n\n  // allocate the first CorkedRequest, there is always\n  // one allocated and free to use, and we maintain at most two\n  this.corkedRequestsFree = new CorkedRequest(this);\n}\n\nWritableState.prototype.getBuffer = function getBuffer() {\n  var current = this.bufferedRequest;\n  var out = [];\n  while (current) {\n    out.push(current);\n    current = current.next;\n  }\n  return out;\n};\n\n(function () {\n  try {\n    Object.defineProperty(WritableState.prototype, 'buffer', {\n      get: internalUtil.deprecate(function () {\n        return this.getBuffer();\n      }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.', 'DEP0003')\n    });\n  } catch (_) {}\n})();\n\n// Test _writableState for inheritance to account for Duplex streams,\n// whose prototype chain only points to Readable.\nvar realHasInstance;\nif (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {\n  realHasInstance = Function.prototype[Symbol.hasInstance];\n  Object.defineProperty(Writable, Symbol.hasInstance, {\n    value: function (object) {\n      if (realHasInstance.call(this, object)) return true;\n      if (this !== Writable) return false;\n\n      return object && object._writableState instanceof WritableState;\n    }\n  });\n} else {\n  realHasInstance = function (object) {\n    return object instanceof this;\n  };\n}\n\nfunction Writable(options) {\n  Duplex = Duplex || require('./_stream_duplex');\n\n  // Writable ctor is applied to Duplexes, too.\n  // `realHasInstance` is necessary because using plain `instanceof`\n  // would return false, as no `_writableState` property is attached.\n\n  // Trying to use the custom `instanceof` for Writable here will also break the\n  // Node.js LazyTransform implementation, which has a non-trivial getter for\n  // `_writableState` that would lead to infinite recursion.\n  if (!realHasInstance.call(Writable, this) && !(this instanceof Duplex)) {\n    return new Writable(options);\n  }\n\n  this._writableState = new WritableState(options, this);\n\n  // legacy.\n  this.writable = true;\n\n  if (options) {\n    if (typeof options.write === 'function') this._write = options.write;\n\n    if (typeof options.writev === 'function') this._writev = options.writev;\n\n    if (typeof options.destroy === 'function') this._destroy = options.destroy;\n\n    if (typeof options.final === 'function') this._final = options.final;\n  }\n\n  Stream.call(this);\n}\n\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function () {\n  this.emit('error', new Error('Cannot pipe, not readable'));\n};\n\nfunction writeAfterEnd(stream, cb) {\n  var er = new Error('write after end');\n  // TODO: defer error events consistently everywhere, not just the cb\n  stream.emit('error', er);\n  pna.nextTick(cb, er);\n}\n\n// Checks that a user-supplied chunk is valid, especially for the particular\n// mode the stream is in. Currently this means that `null` is never accepted\n// and undefined/non-string values are only allowed in object mode.\nfunction validChunk(stream, state, chunk, cb) {\n  var valid = true;\n  var er = false;\n\n  if (chunk === null) {\n    er = new TypeError('May not write null values to stream');\n  } else if (typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {\n    er = new TypeError('Invalid non-string/buffer chunk');\n  }\n  if (er) {\n    stream.emit('error', er);\n    pna.nextTick(cb, er);\n    valid = false;\n  }\n  return valid;\n}\n\nWritable.prototype.write = function (chunk, encoding, cb) {\n  var state = this._writableState;\n  var ret = false;\n  var isBuf = !state.objectMode && _isUint8Array(chunk);\n\n  if (isBuf && !Buffer.isBuffer(chunk)) {\n    chunk = _uint8ArrayToBuffer(chunk);\n  }\n\n  if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (isBuf) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;\n\n  if (typeof cb !== 'function') cb = nop;\n\n  if (state.ended) writeAfterEnd(this, cb);else if (isBuf || validChunk(this, state, chunk, cb)) {\n    state.pendingcb++;\n    ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);\n  }\n\n  return ret;\n};\n\nWritable.prototype.cork = function () {\n  var state = this._writableState;\n\n  state.corked++;\n};\n\nWritable.prototype.uncork = function () {\n  var state = this._writableState;\n\n  if (state.corked) {\n    state.corked--;\n\n    if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);\n  }\n};\n\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n  // node::ParseEncoding() requires lower case.\n  if (typeof encoding === 'string') encoding = encoding.toLowerCase();\n  if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);\n  this._writableState.defaultEncoding = encoding;\n  return this;\n};\n\nfunction decodeChunk(state, chunk, encoding) {\n  if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {\n    chunk = Buffer.from(chunk, encoding);\n  }\n  return chunk;\n}\n\nObject.defineProperty(Writable.prototype, 'writableHighWaterMark', {\n  // making it explicit this property is not enumerable\n  // because otherwise some prototype manipulation in\n  // userland will fail\n  enumerable: false,\n  get: function () {\n    return this._writableState.highWaterMark;\n  }\n});\n\n// if we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {\n  if (!isBuf) {\n    var newChunk = decodeChunk(state, chunk, encoding);\n    if (chunk !== newChunk) {\n      isBuf = true;\n      encoding = 'buffer';\n      chunk = newChunk;\n    }\n  }\n  var len = state.objectMode ? 1 : chunk.length;\n\n  state.length += len;\n\n  var ret = state.length < state.highWaterMark;\n  // we must ensure that previous needDrain will not be reset to false.\n  if (!ret) state.needDrain = true;\n\n  if (state.writing || state.corked) {\n    var last = state.lastBufferedRequest;\n    state.lastBufferedRequest = {\n      chunk: chunk,\n      encoding: encoding,\n      isBuf: isBuf,\n      callback: cb,\n      next: null\n    };\n    if (last) {\n      last.next = state.lastBufferedRequest;\n    } else {\n      state.bufferedRequest = state.lastBufferedRequest;\n    }\n    state.bufferedRequestCount += 1;\n  } else {\n    doWrite(stream, state, false, len, chunk, encoding, cb);\n  }\n\n  return ret;\n}\n\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n  state.writelen = len;\n  state.writecb = cb;\n  state.writing = true;\n  state.sync = true;\n  if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);\n  state.sync = false;\n}\n\nfunction onwriteError(stream, state, sync, er, cb) {\n  --state.pendingcb;\n\n  if (sync) {\n    // defer the callback if we are being called synchronously\n    // to avoid piling up things on the stack\n    pna.nextTick(cb, er);\n    // this can emit finish, and it will always happen\n    // after error\n    pna.nextTick(finishMaybe, stream, state);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n  } else {\n    // the caller expect this to happen before if\n    // it is async\n    cb(er);\n    stream._writableState.errorEmitted = true;\n    stream.emit('error', er);\n    // this can emit finish, but finish must\n    // always follow error\n    finishMaybe(stream, state);\n  }\n}\n\nfunction onwriteStateUpdate(state) {\n  state.writing = false;\n  state.writecb = null;\n  state.length -= state.writelen;\n  state.writelen = 0;\n}\n\nfunction onwrite(stream, er) {\n  var state = stream._writableState;\n  var sync = state.sync;\n  var cb = state.writecb;\n\n  onwriteStateUpdate(state);\n\n  if (er) onwriteError(stream, state, sync, er, cb);else {\n    // Check if we're actually ready to finish, but don't emit yet\n    var finished = needFinish(state);\n\n    if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {\n      clearBuffer(stream, state);\n    }\n\n    if (sync) {\n      /*<replacement>*/\n      asyncWrite(afterWrite, stream, state, finished, cb);\n      /*</replacement>*/\n    } else {\n      afterWrite(stream, state, finished, cb);\n    }\n  }\n}\n\nfunction afterWrite(stream, state, finished, cb) {\n  if (!finished) onwriteDrain(stream, state);\n  state.pendingcb--;\n  cb();\n  finishMaybe(stream, state);\n}\n\n// Must force callback to be called on nextTick, so that we don't\n// emit 'drain' before the write() consumer gets the 'false' return\n// value, and has a chance to attach a 'drain' listener.\nfunction onwriteDrain(stream, state) {\n  if (state.length === 0 && state.needDrain) {\n    state.needDrain = false;\n    stream.emit('drain');\n  }\n}\n\n// if there's something in the buffer waiting, then process it\nfunction clearBuffer(stream, state) {\n  state.bufferProcessing = true;\n  var entry = state.bufferedRequest;\n\n  if (stream._writev && entry && entry.next) {\n    // Fast case, write everything using _writev()\n    var l = state.bufferedRequestCount;\n    var buffer = new Array(l);\n    var holder = state.corkedRequestsFree;\n    holder.entry = entry;\n\n    var count = 0;\n    var allBuffers = true;\n    while (entry) {\n      buffer[count] = entry;\n      if (!entry.isBuf) allBuffers = false;\n      entry = entry.next;\n      count += 1;\n    }\n    buffer.allBuffers = allBuffers;\n\n    doWrite(stream, state, true, state.length, buffer, '', holder.finish);\n\n    // doWrite is almost always async, defer these to save a bit of time\n    // as the hot path ends with doWrite\n    state.pendingcb++;\n    state.lastBufferedRequest = null;\n    if (holder.next) {\n      state.corkedRequestsFree = holder.next;\n      holder.next = null;\n    } else {\n      state.corkedRequestsFree = new CorkedRequest(state);\n    }\n    state.bufferedRequestCount = 0;\n  } else {\n    // Slow case, write chunks one-by-one\n    while (entry) {\n      var chunk = entry.chunk;\n      var encoding = entry.encoding;\n      var cb = entry.callback;\n      var len = state.objectMode ? 1 : chunk.length;\n\n      doWrite(stream, state, false, len, chunk, encoding, cb);\n      entry = entry.next;\n      state.bufferedRequestCount--;\n      // if we didn't call the onwrite immediately, then\n      // it means that we need to wait until it does.\n      // also, that means that the chunk and cb are currently\n      // being processed, so move the buffer counter past them.\n      if (state.writing) {\n        break;\n      }\n    }\n\n    if (entry === null) state.lastBufferedRequest = null;\n  }\n\n  state.bufferedRequest = entry;\n  state.bufferProcessing = false;\n}\n\nWritable.prototype._write = function (chunk, encoding, cb) {\n  cb(new Error('_write() is not implemented'));\n};\n\nWritable.prototype._writev = null;\n\nWritable.prototype.end = function (chunk, encoding, cb) {\n  var state = this._writableState;\n\n  if (typeof chunk === 'function') {\n    cb = chunk;\n    chunk = null;\n    encoding = null;\n  } else if (typeof encoding === 'function') {\n    cb = encoding;\n    encoding = null;\n  }\n\n  if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);\n\n  // .end() fully uncorks\n  if (state.corked) {\n    state.corked = 1;\n    this.uncork();\n  }\n\n  // ignore unnecessary end() calls.\n  if (!state.ending && !state.finished) endWritable(this, state, cb);\n};\n\nfunction needFinish(state) {\n  return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;\n}\nfunction callFinal(stream, state) {\n  stream._final(function (err) {\n    state.pendingcb--;\n    if (err) {\n      stream.emit('error', err);\n    }\n    state.prefinished = true;\n    stream.emit('prefinish');\n    finishMaybe(stream, state);\n  });\n}\nfunction prefinish(stream, state) {\n  if (!state.prefinished && !state.finalCalled) {\n    if (typeof stream._final === 'function') {\n      state.pendingcb++;\n      state.finalCalled = true;\n      pna.nextTick(callFinal, stream, state);\n    } else {\n      state.prefinished = true;\n      stream.emit('prefinish');\n    }\n  }\n}\n\nfunction finishMaybe(stream, state) {\n  var need = needFinish(state);\n  if (need) {\n    prefinish(stream, state);\n    if (state.pendingcb === 0) {\n      state.finished = true;\n      stream.emit('finish');\n    }\n  }\n  return need;\n}\n\nfunction endWritable(stream, state, cb) {\n  state.ending = true;\n  finishMaybe(stream, state);\n  if (cb) {\n    if (state.finished) pna.nextTick(cb);else stream.once('finish', cb);\n  }\n  state.ended = true;\n  stream.writable = false;\n}\n\nfunction onCorkedFinish(corkReq, state, err) {\n  var entry = corkReq.entry;\n  corkReq.entry = null;\n  while (entry) {\n    var cb = entry.callback;\n    state.pendingcb--;\n    cb(err);\n    entry = entry.next;\n  }\n  if (state.corkedRequestsFree) {\n    state.corkedRequestsFree.next = corkReq;\n  } else {\n    state.corkedRequestsFree = corkReq;\n  }\n}\n\nObject.defineProperty(Writable.prototype, 'destroyed', {\n  get: function () {\n    if (this._writableState === undefined) {\n      return false;\n    }\n    return this._writableState.destroyed;\n  },\n  set: function (value) {\n    // we ignore the value if the stream\n    // has not been initialized yet\n    if (!this._writableState) {\n      return;\n    }\n\n    // backward compatibility, the user is explicitly\n    // managing destroyed\n    this._writableState.destroyed = value;\n  }\n});\n\nWritable.prototype.destroy = destroyImpl.destroy;\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function (err, cb) {\n  this.end();\n  cb(err);\n};","'use strict';\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Buffer = require('safe-buffer').Buffer;\nvar util = require('util');\n\nfunction copyBuffer(src, target, offset) {\n  src.copy(target, offset);\n}\n\nmodule.exports = function () {\n  function BufferList() {\n    _classCallCheck(this, BufferList);\n\n    this.head = null;\n    this.tail = null;\n    this.length = 0;\n  }\n\n  BufferList.prototype.push = function push(v) {\n    var entry = { data: v, next: null };\n    if (this.length > 0) this.tail.next = entry;else this.head = entry;\n    this.tail = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.unshift = function unshift(v) {\n    var entry = { data: v, next: this.head };\n    if (this.length === 0) this.tail = entry;\n    this.head = entry;\n    ++this.length;\n  };\n\n  BufferList.prototype.shift = function shift() {\n    if (this.length === 0) return;\n    var ret = this.head.data;\n    if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;\n    --this.length;\n    return ret;\n  };\n\n  BufferList.prototype.clear = function clear() {\n    this.head = this.tail = null;\n    this.length = 0;\n  };\n\n  BufferList.prototype.join = function join(s) {\n    if (this.length === 0) return '';\n    var p = this.head;\n    var ret = '' + p.data;\n    while (p = p.next) {\n      ret += s + p.data;\n    }return ret;\n  };\n\n  BufferList.prototype.concat = function concat(n) {\n    if (this.length === 0) return Buffer.alloc(0);\n    if (this.length === 1) return this.head.data;\n    var ret = Buffer.allocUnsafe(n >>> 0);\n    var p = this.head;\n    var i = 0;\n    while (p) {\n      copyBuffer(p.data, ret, i);\n      i += p.data.length;\n      p = p.next;\n    }\n    return ret;\n  };\n\n  return BufferList;\n}();\n\nif (util && util.inspect && util.inspect.custom) {\n  module.exports.prototype[util.inspect.custom] = function () {\n    var obj = util.inspect({ length: this.length });\n    return this.constructor.name + ' ' + obj;\n  };\n}","'use strict';\n\n/*<replacement>*/\n\nvar pna = require('process-nextick-args');\n/*</replacement>*/\n\n// undocumented cb() API, needed for core, not for public API\nfunction destroy(err, cb) {\n  var _this = this;\n\n  var readableDestroyed = this._readableState && this._readableState.destroyed;\n  var writableDestroyed = this._writableState && this._writableState.destroyed;\n\n  if (readableDestroyed || writableDestroyed) {\n    if (cb) {\n      cb(err);\n    } else if (err && (!this._writableState || !this._writableState.errorEmitted)) {\n      pna.nextTick(emitErrorNT, this, err);\n    }\n    return this;\n  }\n\n  // we set destroyed to true before firing error callbacks in order\n  // to make it re-entrance safe in case destroy() is called within callbacks\n\n  if (this._readableState) {\n    this._readableState.destroyed = true;\n  }\n\n  // if this is a duplex stream mark the writable part as destroyed as well\n  if (this._writableState) {\n    this._writableState.destroyed = true;\n  }\n\n  this._destroy(err || null, function (err) {\n    if (!cb && err) {\n      pna.nextTick(emitErrorNT, _this, err);\n      if (_this._writableState) {\n        _this._writableState.errorEmitted = true;\n      }\n    } else if (cb) {\n      cb(err);\n    }\n  });\n\n  return this;\n}\n\nfunction undestroy() {\n  if (this._readableState) {\n    this._readableState.destroyed = false;\n    this._readableState.reading = false;\n    this._readableState.ended = false;\n    this._readableState.endEmitted = false;\n  }\n\n  if (this._writableState) {\n    this._writableState.destroyed = false;\n    this._writableState.ended = false;\n    this._writableState.ending = false;\n    this._writableState.finished = false;\n    this._writableState.errorEmitted = false;\n  }\n}\n\nfunction emitErrorNT(self, err) {\n  self.emit('error', err);\n}\n\nmodule.exports = {\n  destroy: destroy,\n  undestroy: undestroy\n};","module.exports = require('events').EventEmitter;\n","module.exports = require('./readable').PassThrough\n","exports = module.exports = require('./lib/_stream_readable.js');\nexports.Stream = exports;\nexports.Readable = exports;\nexports.Writable = require('./lib/_stream_writable.js');\nexports.Duplex = require('./lib/_stream_duplex.js');\nexports.Transform = require('./lib/_stream_transform.js');\nexports.PassThrough = require('./lib/_stream_passthrough.js');\n","module.exports = require('./readable').Transform\n","module.exports = require('./lib/_stream_writable.js');\n","/* eslint-disable node/no-deprecated-api */\nvar buffer = require('buffer')\nvar Buffer = buffer.Buffer\n\n// alternative to using Object.keys for old browsers\nfunction copyProps (src, dst) {\n  for (var key in src) {\n    dst[key] = src[key]\n  }\n}\nif (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) {\n  module.exports = buffer\n} else {\n  // Copy properties from require('buffer')\n  copyProps(buffer, exports)\n  exports.Buffer = SafeBuffer\n}\n\nfunction SafeBuffer (arg, encodingOrOffset, length) {\n  return Buffer(arg, encodingOrOffset, length)\n}\n\n// Copy static methods from Buffer\ncopyProps(Buffer, SafeBuffer)\n\nSafeBuffer.from = function (arg, encodingOrOffset, length) {\n  if (typeof arg === 'number') {\n    throw new TypeError('Argument must not be a number')\n  }\n  return Buffer(arg, encodingOrOffset, length)\n}\n\nSafeBuffer.alloc = function (size, fill, encoding) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  var buf = Buffer(size)\n  if (fill !== undefined) {\n    if (typeof encoding === 'string') {\n      buf.fill(fill, encoding)\n    } else {\n      buf.fill(fill)\n    }\n  } else {\n    buf.fill(0)\n  }\n  return buf\n}\n\nSafeBuffer.allocUnsafe = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return Buffer(size)\n}\n\nSafeBuffer.allocUnsafeSlow = function (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('Argument must be a number')\n  }\n  return buffer.SlowBuffer(size)\n}\n","(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nmodule.exports = Stream;\n\nvar EE = require('events').EventEmitter;\nvar inherits = require('inherits');\n\ninherits(Stream, EE);\nStream.Readable = require('readable-stream/readable.js');\nStream.Writable = require('readable-stream/writable.js');\nStream.Duplex = require('readable-stream/duplex.js');\nStream.Transform = require('readable-stream/transform.js');\nStream.PassThrough = require('readable-stream/passthrough.js');\n\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\n\n\n\n// old-style streams.  Note that the pipe method (the only relevant\n// part of this class) is overridden in the Readable class.\n\nfunction Stream() {\n  EE.call(this);\n}\n\nStream.prototype.pipe = function(dest, options) {\n  var source = this;\n\n  function ondata(chunk) {\n    if (dest.writable) {\n      if (false === dest.write(chunk) && source.pause) {\n        source.pause();\n      }\n    }\n  }\n\n  source.on('data', ondata);\n\n  function ondrain() {\n    if (source.readable && source.resume) {\n      source.resume();\n    }\n  }\n\n  dest.on('drain', ondrain);\n\n  // If the 'end' option is not supplied, dest.end() will be called when\n  // source gets the 'end' or 'close' events.  Only dest.end() once.\n  if (!dest._isStdio && (!options || options.end !== false)) {\n    source.on('end', onend);\n    source.on('close', onclose);\n  }\n\n  var didOnEnd = false;\n  function onend() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    dest.end();\n  }\n\n\n  function onclose() {\n    if (didOnEnd) return;\n    didOnEnd = true;\n\n    if (typeof dest.destroy === 'function') dest.destroy();\n  }\n\n  // don't leave dangling pipes when there are errors.\n  function onerror(er) {\n    cleanup();\n    if (EE.listenerCount(this, 'error') === 0) {\n      throw er; // Unhandled stream error in pipe.\n    }\n  }\n\n  source.on('error', onerror);\n  dest.on('error', onerror);\n\n  // remove all the event listeners that were added.\n  function cleanup() {\n    source.removeListener('data', ondata);\n    dest.removeListener('drain', ondrain);\n\n    source.removeListener('end', onend);\n    source.removeListener('close', onclose);\n\n    source.removeListener('error', onerror);\n    dest.removeListener('error', onerror);\n\n    source.removeListener('end', cleanup);\n    source.removeListener('close', cleanup);\n\n    dest.removeListener('close', cleanup);\n  }\n\n  source.on('end', cleanup);\n  source.on('close', cleanup);\n\n  dest.on('close', cleanup);\n\n  dest.emit('pipe', source);\n\n  // Allow for unix-like usage: A.pipe(B).pipe(C)\n  return dest;\n};\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n/*<replacement>*/\n\nvar Buffer = require('safe-buffer').Buffer;\n/*</replacement>*/\n\nvar isEncoding = Buffer.isEncoding || function (encoding) {\n  encoding = '' + encoding;\n  switch (encoding && encoding.toLowerCase()) {\n    case 'hex':case 'utf8':case 'utf-8':case 'ascii':case 'binary':case 'base64':case 'ucs2':case 'ucs-2':case 'utf16le':case 'utf-16le':case 'raw':\n      return true;\n    default:\n      return false;\n  }\n};\n\nfunction _normalizeEncoding(enc) {\n  if (!enc) return 'utf8';\n  var retried;\n  while (true) {\n    switch (enc) {\n      case 'utf8':\n      case 'utf-8':\n        return 'utf8';\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return 'utf16le';\n      case 'latin1':\n      case 'binary':\n        return 'latin1';\n      case 'base64':\n      case 'ascii':\n      case 'hex':\n        return enc;\n      default:\n        if (retried) return; // undefined\n        enc = ('' + enc).toLowerCase();\n        retried = true;\n    }\n  }\n};\n\n// Do not cache `Buffer.isEncoding` when checking encoding names as some\n// modules monkey-patch it to support additional encodings\nfunction normalizeEncoding(enc) {\n  var nenc = _normalizeEncoding(enc);\n  if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);\n  return nenc || enc;\n}\n\n// StringDecoder provides an interface for efficiently splitting a series of\n// buffers into a series of JS strings without breaking apart multi-byte\n// characters.\nexports.StringDecoder = StringDecoder;\nfunction StringDecoder(encoding) {\n  this.encoding = normalizeEncoding(encoding);\n  var nb;\n  switch (this.encoding) {\n    case 'utf16le':\n      this.text = utf16Text;\n      this.end = utf16End;\n      nb = 4;\n      break;\n    case 'utf8':\n      this.fillLast = utf8FillLast;\n      nb = 4;\n      break;\n    case 'base64':\n      this.text = base64Text;\n      this.end = base64End;\n      nb = 3;\n      break;\n    default:\n      this.write = simpleWrite;\n      this.end = simpleEnd;\n      return;\n  }\n  this.lastNeed = 0;\n  this.lastTotal = 0;\n  this.lastChar = Buffer.allocUnsafe(nb);\n}\n\nStringDecoder.prototype.write = function (buf) {\n  if (buf.length === 0) return '';\n  var r;\n  var i;\n  if (this.lastNeed) {\n    r = this.fillLast(buf);\n    if (r === undefined) return '';\n    i = this.lastNeed;\n    this.lastNeed = 0;\n  } else {\n    i = 0;\n  }\n  if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);\n  return r || '';\n};\n\nStringDecoder.prototype.end = utf8End;\n\n// Returns only complete characters in a Buffer\nStringDecoder.prototype.text = utf8Text;\n\n// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer\nStringDecoder.prototype.fillLast = function (buf) {\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);\n  this.lastNeed -= buf.length;\n};\n\n// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a\n// continuation byte. If an invalid byte is detected, -2 is returned.\nfunction utf8CheckByte(byte) {\n  if (byte <= 0x7F) return 0;else if (byte >> 5 === 0x06) return 2;else if (byte >> 4 === 0x0E) return 3;else if (byte >> 3 === 0x1E) return 4;\n  return byte >> 6 === 0x02 ? -1 : -2;\n}\n\n// Checks at most 3 bytes at the end of a Buffer in order to detect an\n// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)\n// needed to complete the UTF-8 character (if applicable) are returned.\nfunction utf8CheckIncomplete(self, buf, i) {\n  var j = buf.length - 1;\n  if (j < i) return 0;\n  var nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 1;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) self.lastNeed = nb - 2;\n    return nb;\n  }\n  if (--j < i || nb === -2) return 0;\n  nb = utf8CheckByte(buf[j]);\n  if (nb >= 0) {\n    if (nb > 0) {\n      if (nb === 2) nb = 0;else self.lastNeed = nb - 3;\n    }\n    return nb;\n  }\n  return 0;\n}\n\n// Validates as many continuation bytes for a multi-byte UTF-8 character as\n// needed or are available. If we see a non-continuation byte where we expect\n// one, we \"replace\" the validated continuation bytes we've seen so far with\n// a single UTF-8 replacement character ('\\ufffd'), to match v8's UTF-8 decoding\n// behavior. The continuation byte check is included three times in the case\n// where all of the continuation bytes for a character exist in the same buffer.\n// It is also done this way as a slight performance increase instead of using a\n// loop.\nfunction utf8CheckExtraBytes(self, buf, p) {\n  if ((buf[0] & 0xC0) !== 0x80) {\n    self.lastNeed = 0;\n    return '\\ufffd';\n  }\n  if (self.lastNeed > 1 && buf.length > 1) {\n    if ((buf[1] & 0xC0) !== 0x80) {\n      self.lastNeed = 1;\n      return '\\ufffd';\n    }\n    if (self.lastNeed > 2 && buf.length > 2) {\n      if ((buf[2] & 0xC0) !== 0x80) {\n        self.lastNeed = 2;\n        return '\\ufffd';\n      }\n    }\n  }\n}\n\n// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.\nfunction utf8FillLast(buf) {\n  var p = this.lastTotal - this.lastNeed;\n  var r = utf8CheckExtraBytes(this, buf, p);\n  if (r !== undefined) return r;\n  if (this.lastNeed <= buf.length) {\n    buf.copy(this.lastChar, p, 0, this.lastNeed);\n    return this.lastChar.toString(this.encoding, 0, this.lastTotal);\n  }\n  buf.copy(this.lastChar, p, 0, buf.length);\n  this.lastNeed -= buf.length;\n}\n\n// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a\n// partial character, the character's bytes are buffered until the required\n// number of bytes are available.\nfunction utf8Text(buf, i) {\n  var total = utf8CheckIncomplete(this, buf, i);\n  if (!this.lastNeed) return buf.toString('utf8', i);\n  this.lastTotal = total;\n  var end = buf.length - (total - this.lastNeed);\n  buf.copy(this.lastChar, 0, end);\n  return buf.toString('utf8', i, end);\n}\n\n// For UTF-8, a replacement character is added when ending on a partial\n// character.\nfunction utf8End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + '\\ufffd';\n  return r;\n}\n\n// UTF-16LE typically needs two bytes per character, but even if we have an even\n// number of bytes available, we need to check if we end on a leading/high\n// surrogate. In that case, we need to wait for the next two bytes in order to\n// decode the last character properly.\nfunction utf16Text(buf, i) {\n  if ((buf.length - i) % 2 === 0) {\n    var r = buf.toString('utf16le', i);\n    if (r) {\n      var c = r.charCodeAt(r.length - 1);\n      if (c >= 0xD800 && c <= 0xDBFF) {\n        this.lastNeed = 2;\n        this.lastTotal = 4;\n        this.lastChar[0] = buf[buf.length - 2];\n        this.lastChar[1] = buf[buf.length - 1];\n        return r.slice(0, -1);\n      }\n    }\n    return r;\n  }\n  this.lastNeed = 1;\n  this.lastTotal = 2;\n  this.lastChar[0] = buf[buf.length - 1];\n  return buf.toString('utf16le', i, buf.length - 1);\n}\n\n// For UTF-16LE we do not explicitly append special replacement characters if we\n// end on a partial character, we simply let v8 handle that.\nfunction utf16End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) {\n    var end = this.lastTotal - this.lastNeed;\n    return r + this.lastChar.toString('utf16le', 0, end);\n  }\n  return r;\n}\n\nfunction base64Text(buf, i) {\n  var n = (buf.length - i) % 3;\n  if (n === 0) return buf.toString('base64', i);\n  this.lastNeed = 3 - n;\n  this.lastTotal = 3;\n  if (n === 1) {\n    this.lastChar[0] = buf[buf.length - 1];\n  } else {\n    this.lastChar[0] = buf[buf.length - 2];\n    this.lastChar[1] = buf[buf.length - 1];\n  }\n  return buf.toString('base64', i, buf.length - n);\n}\n\nfunction base64End(buf) {\n  var r = buf && buf.length ? this.write(buf) : '';\n  if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);\n  return r;\n}\n\n// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)\nfunction simpleWrite(buf) {\n  return buf.toString(this.encoding);\n}\n\nfunction simpleEnd(buf) {\n  return buf && buf.length ? this.write(buf) : '';\n}","var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\nrequire(\"setimmediate\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n","\n/**\n * Module exports.\n */\n\nmodule.exports = deprecate;\n\n/**\n * Mark that a method should not be used.\n * Returns a modified function which warns once by default.\n *\n * If `localStorage.noDeprecation = true` is set, then it is a no-op.\n *\n * If `localStorage.throwDeprecation = true` is set, then deprecated functions\n * will throw an Error when invoked.\n *\n * If `localStorage.traceDeprecation = true` is set, then deprecated functions\n * will invoke `console.trace()` instead of `console.error()`.\n *\n * @param {Function} fn - the function to deprecate\n * @param {String} msg - the string to print to the console when `fn` is invoked\n * @returns {Function} a new \"deprecated\" version of `fn`\n * @api public\n */\n\nfunction deprecate (fn, msg) {\n  if (config('noDeprecation')) {\n    return fn;\n  }\n\n  var warned = false;\n  function deprecated() {\n    if (!warned) {\n      if (config('throwDeprecation')) {\n        throw new Error(msg);\n      } else if (config('traceDeprecation')) {\n        console.trace(msg);\n      } else {\n        console.warn(msg);\n      }\n      warned = true;\n    }\n    return fn.apply(this, arguments);\n  }\n\n  return deprecated;\n}\n\n/**\n * Checks `localStorage` for boolean values for the given `name`.\n *\n * @param {String} name\n * @returns {Boolean}\n * @api private\n */\n\nfunction config (name) {\n  // accessing global.localStorage can trigger a DOMException in sandboxed iframes\n  try {\n    if (!global.localStorage) return false;\n  } catch (_) {\n    return false;\n  }\n  var val = global.localStorage[name];\n  if (null == val) return false;\n  return String(val).toLowerCase() === 'true';\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","function sum(a, b) {\n  return a + b;\n}\n\n// named export\n// ter vários exports dentro de um msm arquivo\n// só pode chamar com o msm nome\n// import precisa das chaves { sub }\nexport function sub(a, b) {\n  return a - b;\n}\n\nfunction mult(a, b) {\n  return a * b;\n}\n\nfunction div(a, b) {\n  return a / b;\n}\n\nconst PI = 3.14\n\nexport { mult as multiplicacao, div, PI };\n\n// método principal\n// só pode ter um default por arquivo\n// importar com qualquer nome\n// não precisa utilizar as chaves\nexport default sum;"],"sourceRoot":""}